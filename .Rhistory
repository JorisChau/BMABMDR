# start value BMD
datf=data.frame(yy=mean.a[covar == covar_lvls[i]],
xx=dose.a[covar == covar_lvls[i]]+0.00000000000001)
fpfit=try(gamlss::gamlss(yy~fp(xx),family=gamlss.dist::NO(),data=datf), silent = T)
if(class(fpfit)[1] == 'try-error'){
message('could not fit fractional polynomial, BMD start value is set to 0.05')
bmd.sv[i] = 0.05
}else{
RISK=function(x) (predict(fpfit,newdata=data.frame(xx=c((x))),data=datf)-
predict(fpfit,newdata=data.frame(xx=c(0.00000000000001)),data=datf))/
(predict(fpfit,newdata=data.frame(xx=c(0.00000000000001)),data=datf))-q
bmd.svh=try(uniroot(RISK, interval=c(0,1))$root,silent=T)
bmd.sv[i]=ifelse((mode(bmd.svh)=="numeric"),(bmd.svh),0.05)
}
}
## Default prior BMD
BMD.min <- rep(.Machine$double.xmin, nlevels)
if(extended == FALSE){
BMD.max <- rep(1, nlevels)
}else{
# BMD.max <- rep(maxDose, nlevels)
BMD.max <- rep(extended.value, nlevels)
if(maxDose <= 1){
BMD.max <- rep(maxDose*extended.value, nlevels)
}
}
BMD.mode <- rep(maxDose/2, nlevels)
## If info on BMD is given
if(!is.null(prior.BMD)){
if(!is.na(prior.BMD[2])){
BMD.mode = rep(prior.BMD[2]/maxDose, nlevels)
}else{
BMD.mode = rep((prior.BMD[1]/maxDose) + (((prior.BMD[3]/maxDose) - prior.BMD[1]/maxDose)/2), nlevels)
}
if(!is.na(prior.BMD[1])){
BMD.min = rep(prior.BMD[1]/maxDose, nlevels)
}
if(!is.na(prior.BMD[3])){
BMD.max = rep(prior.BMD[3]/maxDose, nlevels)
}
}else {
message("default prior choices used on BMD")
}
BMD.vec <- matrix(c(BMD.min, BMD.mode, BMD.max), nrow = nlevels, ncol = 3)
shape.BMD1 <- shape.BMD2 <- numeric(nlevels)
for(i in 1:nlevels) {
shape.BMD1[i] <- fun.alpha(a = BMD.vec[i,1], b = BMD.vec[i,2],
c = BMD.vec[i,3], g = shape.BMD)
shape.BMD2[i] <- fun.beta(a = BMD.vec[i,1], b = BMD.vec[i,2],
c = BMD.vec[i,3], g = shape.BMD)
}
} else {
# start value BMD
datf=data.frame(yy=mean.a2,
xx=dose.a2+0.00000000000001)
fpfit=try(gamlss::gamlss(yy~fp(xx),family=gamlss.dist::NO(),data=datf), silent = T)
if(class(fpfit)[1] == 'try-error'){
message('could not fit fractional polynomial, BMD start value is set to 0.05')
bmd.sv = 0.05
}else{
RISK=function(x) (predict(fpfit,newdata=data.frame(xx=c((x))),data=datf)-
predict(fpfit,newdata=data.frame(xx=c(0.00000000000001)),data=datf))/
(predict(fpfit,newdata=data.frame(xx=c(0.00000000000001)),data=datf))-q
bmd.svh=try(uniroot(RISK, interval=c(0,1))$root,silent=T)
bmd.sv=ifelse((mode(bmd.svh)=="numeric"),(bmd.svh),0.05)
}
## Default prior BMD
BMD.min <- .Machine$double.xmin
if(extended == FALSE){
BMD.max <- 1
}else{
# BMD.max <- maxDose
BMD.max <- extended.value
if(maxDose <= 1){
BMD.max <- maxDose*extended.value
}
}
BMD.mode <- maxDose/2
## If info on BMD is given
if(!is.null(prior.BMD)){
if(!is.na(prior.BMD[2])){
BMD.mode = prior.BMD[2]/maxDose
}else{
BMD.mode = (prior.BMD[1]/maxDose) + (((prior.BMD[3]/maxDose) - prior.BMD[1]/maxDose)/2)
}
if(!is.na(prior.BMD[1])){
BMD.min = prior.BMD[1]/maxDose
}
if(!is.na(prior.BMD[3])){
BMD.max = prior.BMD[3]/maxDose
}
}else {
message("default prior choices used on BMD")
}
BMD.vec <- c(BMD.min, BMD.mode, BMD.max)
shape.BMD1 <- fun.alpha(a = BMD.vec[1], b = BMD.vec[2],
c = BMD.vec[3], g = shape.BMD)
shape.BMD2 <- fun.beta(a = BMD.vec[1], b = BMD.vec[2],
c = BMD.vec[3], g = shape.BMD)
# dim(bmd.sv) <- 1
}
nlevels_BMD <- ifelse(covariate == 'BMD_d' | covariate == 'all', nlevels, 1)
dim(bmd.sv) <- nlevels_BMD
if(covariate == 'BMD_d' | covariate == 'all') {
if(prior.d == 'N11'){
prvar.d = rep(1, nlevels); prmean.d = rep(1, nlevels); truncd = 5
}else if(prior.d == 'EPA'){
# prvar.d = 0.5^2; prmean.d = 0.4; truncd = 10000
prvar.d = rep(0.5, nlevels); prmean.d = rep(0.4, nlevels); truncd = 10000
# prvar.d = 1; prmean.d = 1; truncd = 10000
}else if(prior.d == 'N05'){
prvar.d = rep(0.25, nlevels); prmean.d = rep(0.5, nlevels); truncd = 10000
}else if(prior.d == 'custom'){
if(is.null(d.std) | is.null(d.mean) | is.null(d.trunc)){
stop('For the custom prior on d please specify which mean (d.mean), standard deviation (d.std) and upper bound (d.trunc) should be used')
}
prvar.d = rep(d.std**2, nlevels); prmean.d = rep(d.mean, nlevels); truncd = d.trunc
}
# prvar.d=sqrt(0.5); prmean.d = prmean.d
prmean.dQE4 = rep(0, nlevels); prvar.dQE4 = rep(1, nlevels); truncdQ = 10000
# prvar.d=(exp(sqrt(0.18)))^2; prmean.d=2
} else {
if(prior.d == 'N11'){
prvar.d = 1; prmean.d = 1; truncd = 5
}else if(prior.d == 'EPA'){
# prvar.d = 0.5^2; prmean.d = 0.4; truncd = 10000
prvar.d = 0.5; prmean.d = 0.4; truncd = 10000
# prvar.d = 1; prmean.d = 1; truncd = 10000
}else if(prior.d == 'N05'){
prvar.d = 0.25; prmean.d = 0.5; truncd = 10000
}else if(prior.d == 'custom'){
if(is.null(d.std) | is.null(d.mean) | is.null(d.trunc)){
stop('For the custom prior on d please specify which mean (d.mean), standard deviation (d.std) and upper bound (d.trunc) should be used')
}
prvar.d = d.std**2; prmean.d = d.mean; truncd = d.trunc
}
# prvar.d=sqrt(0.5); prmean.d = prmean.d
prmean.dQE4 = 0; prvar.dQE4 = 1; truncdQ = 10000
# prvar.d=(exp(sqrt(0.18)))^2; prmean.d=2
# dim(prmean.d) <- dim(prmean.dQE4) <- 1
}
nlevels_d <- ifelse(covariate == 'BMD_d' | covariate == 'all', nlevels, 1)
nlevels_b <- ifelse(covariate == 'a_sigma2' | covariate == 'BMD_d' | covariate == 'all', nlevels, 1)
prvar.s=1;
priormu1a <- rbind(ifelse(rep(is.vector(a.vec), nlevels), rep(a.vec[2], nlevels), a.vec[,2]),
ifelse(rep(is.vector(BMD.vec), nlevels), rep(BMD.vec[2], nlevels), BMD.vec[,2]),
ifelse(rep(is.vector(c.vec), nlevels), rep(c.vec[2], nlevels), c.vec[,2]),
ifelse(rep(length(prmean.d) > 1, nlevels), prmean.d, rep(prmean.d, nlevels)),
ifelse(rep(length(prmean.s) > 1, nlevels), prmean.s, rep(prmean.s, nlevels))
)
priormu1bQ <- rbind(ifelse(rep(is.vector(a.vec), nlevels), rep(a.vec[2], nlevels), a.vec[,2]),
ifelse(rep(is.vector(BMD.vec), nlevels), rep(BMD.vec[2], nlevels), BMD.vec[,2]),
ifelse(rep(is.vector(c.vec), nlevels), rep(c.vec[2], nlevels), c.vec[,2]),
ifelse(rep(length(prmean.dQE4) > 1, nlevels), prmean.dQE4, rep(prmean.dQE4, nlevels)),
ifelse(rep(length(prvar.dQE4) > 1, nlevels), prvar.dQE4, rep(prvar.dQE4, nlevels))
)
a.vec
data
sumstats = T
sd = T
q = 0.05
prior.d='N11'
extended=T
extended.value=3
prior.weights
data_NCOV_all <- PREP_DATA_NCOV(
data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended,
extended.value = extended.value,
covariate = 'all'
)
data_NCOV_all$data$priorlb
data_NCOV_all$data$priormu
data_NCOV_all$data$priorub
maxDose
maxDose*extended.value
data_N$data$priorlb
data_N$data$priormu
data_N$data$priorub
data_NCOV_all$data$priorub
data_N$data$priormu
data_NCOV_all$data$priorub
data_NCOV_all$data$priormu
dose = c(0,6.25,12.5,25,50,100)/200
dose
mean = c(10.87143,10.16669,10.81050,10.41179,12.38305,18.47681)
sd = c(1.804554,1.805939,3.858265,1.626007,2.045695,2.322449)
n = rep(10,6)
summ.data = data.frame(x = dose, y = mean, s = sd, n = n)
plot(summ.data$x, summ.data$y, type = 'l')
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights: example including only Normal distribution
prior.weights = c(rep(1,4), rep(0,12))
# bmr
q = 0.05
pvec = c(0.05,0.5,0.95)
# uninformative
data_N = PREP_DATA_N(summ.data,
sumstats = T,
q = q)
data_N$data$priorlb
data_N$data$priormu
data_N$data$priorub
# example(source)
# try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# # roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
dose = c(0,6.25,12.5,25,50,100)/200
mean = c(10.87143,10.16669,10.81050,10.41179,12.38305,18.47681)
sd = c(1.804554,1.805939,3.858265,1.626007,2.045695,2.322449)
n = rep(10,6)
summ.data = data.frame(x = dose, y = mean, s = sd, n = n)
plot(summ.data$x, summ.data$y, type = 'l')
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights: example including only Normal distribution
prior.weights = c(rep(1,4), rep(0,12))
# bmr
q = 0.05
pvec = c(0.05,0.5,0.95)
# uninformative
data_N = PREP_DATA_N(summ.data,
sumstats = T,
q = q)
data_LN = PREP_DATA_LN(summ.data,
sumstats = T,
q = q)
FLBMD=full.laplace_MA(data_N,
data_LN,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec)
# MA estimates
FLBMD$MA
# plot output
pFLBMD = plot.BMADR(FLBMD, weight_type = "LP", type = 'increasing', include_data = T, all = F, title = '', log = F)
pFLBMD$BMDs
pFLBMD$weights
pFLBMD$model_fit_N
pFLBMD$model_fit_LN
dose = c(0,6.25,12.5,25,50,100)
mean = c(10.87143,10.16669,10.81050,10.41179,12.38305,18.47681)
sd = c(1.804554,1.805939,3.858265,1.626007,2.045695,2.322449)
n = rep(10,6)
summ.data = data.frame(x = dose, y = mean, s = sd, n = n)
plot(summ.data$x, summ.data$y, type = 'l')
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights: example including only Normal distribution
prior.weights = c(rep(1,4), rep(0,12))
# bmr
q = 0.05
pvec = c(0.05,0.5,0.95)
# uninformative
data_N = PREP_DATA_N(summ.data,
sumstats = T,
q = q)
data_LN = PREP_DATA_LN(summ.data,
sumstats = T,
q = q)
FLBMD=full.laplace_MA(data_N,
data_LN,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec)
# MA estimates
FLBMD$MA
# plot output
pFLBMD = plot.BMADR(FLBMD, weight_type = "LP", type = 'increasing', include_data = T, all = F, title = '', log = F)
pFLBMD$BMDs
pFLBMD$weights
pFLBMD$model_fit_N
pFLBMD$model_fit_LN
pFLBMD$model_fit
pFLBMD$MA_fit
# simulated data
par = c(10.58,0.38,1.91,2)
doses <- c(0,6.25,12.5,25,50,100)/100
dim = 10 # number of observations per litter
ngroup = 20 # number of litters per dose
covmat = matrix(0.8, nrow = dim, ncol = dim) # correlation of 0.5
diag(covmat) = 1
library(mvtnorm)
sd = 2.28
covmat2 = covmat*sd^2
q = 0.1
means = DRM.E4_NI(par, doses, q)
set.seed(34545)
sim_data = c()
for(i in 1){
datmat = c()
cnt = 1
for(j in 1:length(doses)){
for(k in 1:ngroup){
datmat = rbind(datmat,
cbind(rep(doses[j], dim), rep(cnt, dim),
## CHANGE MEANS !!!
as.vector(rmvnorm(1, mean = rep(means[j], dim), sigma = covmat2))
)
)
cnt = cnt+1
}
}
sim_data = rbind(sim_data, as.vector(datmat[,3]))
}
simulated_data = data.frame(dose = rep(doses, each = dim*ngroup),
litter = rep(c(1:(ngroup*length(doses))), each = dim),
resp = sim_data[1,])
data.input <- data.frame(dose = simulated_data$dose,
response = simulated_data$resp,
litter = simulated_data$litter)
plot(data.input$dose, data.input$response)
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
data_LN <- PREP_DATA_LN_C(data.input, q, prior.d = 'N11')
prior.weights = c(rep(1,4), rep(0,12))
FLBMD <- full.laplace_MAc(data_N, data_LN, prior.weights)
pFLBMD <- plot.BMADR(FLBMD, 'increasing', clustered = T, weight_type = 'LP', include_data = T, all = F, title = '', log = F)
pFLBMD$BMDs
pFLBMD$weights
pFLBMD$model_fit_N
pFLBMD$model_fit_LN
pFLBMD$model_fit
pFLBMD$MA_fit
dose = c(0, 5, 15, 50, 100)
y = c(0, 4, 6, 5, 12)
n = c(20, 20, 20, 20, 20)
summ.data = data.frame(x = dose, y = y, n = n)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = c(rep(1,4), rep(1,4))
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_Q = PREP_DATA_QA(summ.data,
sumstats = T,
q = q)
FLBMD_Q = full.laplaceQ_MA(data_Q,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec)
# MA estimates
FLBMD_Q$MA
# plot output
pFLBMD_Q = plot.BMADRQ(FLBMD_Q, weight_type = "LP", include_data = T, all = F, title = '')
pFLBMD_Q$BMDs
pFLBMD_Q$weights
pFLBMD_Q$model_fit
pFLBMD_Q$MA_fit
data.test <- read.csv('../AllData.csv', header = T)
summ.data <- summarize.indiv.data(data.test[,c(3,4,2)], type = 'continuous', covar = TRUE)
analysisData <- data.test[, c("oralexpo", "response", "sex")]
colnames(analysisData) <- c("dose", "response", "covariate")
q = 0.05
# data.test <- read.csv('./data/test_data.csv', header = T, sep = ';')
# summ.data <- data.frame(
#   x = data.test$Dose,
#   y = data.test$Mean,
#   s = data.test$SD,
#   n = data.test$N,
#   cov = data.test$group
# )
# q = 0.2
prior.weights = c(rep(1,4), rep(1,12))
FLBMD <- full.laplace_MA_Cov(analysisData,
sumstats = F,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = T, extended.value = 3,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
basic.plot(FLBMD, 'E4_N', increasing = F)
library('rstantools')
library('usethis')
library('roxygen2')
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
####################################################################################
####################################################################################
### Instructions for publishing a package on CRAN: https://r-pkgs.org/release.html
# https://cran.r-project.org/web/packages/rstantools/vignettes/minimal-rstan-package.html
## Compile package and generate the documentation
rstan_config() # recompile stan models
# example(source)
# try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# # roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
rm(list=ls())
library(BMABMDR) # version 0.0.0.9059
## available models?
get_models('continuous')
data.test <- read.csv('../AllData.csv', header = T)
data = data.test
analysisData <- data[, c("oralexpo", "response", "sex")]
colnames(analysisData) <- c("dose", "response", "covariate")
argList <- list(
data = analysisData,
q = 0.05,
sd = TRUE,
extended = TRUE, sumstats = FALSE, prior.d = "N11", prior.weights = rep(1, 16),
ndraws = 30000, pvec = c(0.05, 0.5, 0.95))
modelFit <- do.call("full.laplace_MA_Cov", argList)
warnings()
# Warning in fun_cov_selection(model = stanmodels$mLN4COV, model_name = "LN4_LN",  :
#  Problems fitting model LN4_LN, this model was excluded from the analysis
# Error in if (!is.na(get(paste0(\"BMD_\", m)))) {: the condition has length > 1\n"
modelFit
modelFit$summary
basic.plot(modelFit, 'E4_N', increasing = F)
save.image("~/GitHub/WS_AllData_cov.RData")
data.test <- read.csv('../AllData (1).csv', header = T)
data = data.test
analysisData <- data[, c("oralexpo", "response", "sex")]
colnames(analysisData) <- c("dose", "response", "covariate")
argList <- list(
data = analysisData,
q = 0.05,
sd = TRUE,
extended = TRUE, sumstats = FALSE, prior.d = "N11", prior.weights = rep(1, 16),
ndraws = 30000, pvec = c(0.05, 0.5, 0.95))
modelFit <- do.call("full.laplace_MA_Cov", argList)
warnings()
modelFit$summary
basic.plot(modelFit, 'E4_N', increasing = F)
save.image("~/GitHub/WS_AllData_cov.RData")
packageVersion('BMABMDR')
library('rstantools')
library('usethis')
library('roxygen2')
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
####################################################################################
####################################################################################
### Instructions for publishing a package on CRAN: https://r-pkgs.org/release.html
# https://cran.r-project.org/web/packages/rstantools/vignettes/minimal-rstan-package.html
## Compile package and generate the documentation
rstan_config() # recompile stan models
# example(source)
# try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# # roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
rm(list=ls())
library(BMABMDR) # version 0.0.0.9059
packageVersion('rstan')
packageVersion('rstantools')
packageVersion('StanHeaders')
packageVersion('brms')
sessionInfo()
