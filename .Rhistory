ddd[1] <- ifelse(min(bmdlo, na.rm=T) < ddd[1],
min(BMDW$BMDL/mod.obj$max.dose/2, na.rm=T),
min(dose[dose > 0])/4)
}else{
ddd <- c(min(dose)/4, dose)
lg10d <- c(log10(min(dose)/4), log10(dose))
bmdl <- log10(BMDW$BMDL/mod.obj$max.dose)
bmdlo <- BMDW$BMDL/mod.obj$max.dose
lg10d[1] <- ifelse((min(bmdl, na.rm=T) < lg10d[1] & min(bmdl, na.rm=T)!='-Inf' ),
log10(min(BMDW$BMDL/mod.obj$max.dose/2, na.rm=T)),
log10(min(dose)/4))
ddd[1] <- ifelse(min(bmdlo, na.rm=T) < ddd[1],
min(BMDW$BMDL/mod.obj$max.dose/2, na.rm=T),
min(dose)/4)
}
if(min(dose) == 0){
if(clustered == F){
orig.y <- log(NtoLN(mod.obj$dataN$m,mod.obj$dataN$sd))[1:length(mod.obj$dataN$dose)]
orig.s <- log(NtoLN(mod.obj$dataN$m,mod.obj$dataN$sd))[(length(mod.obj$dataN$dose)+1):(2*length(mod.obj$dataN$dose))]
orig_ptdataN <- data.frame(dose = (mod.obj$dataN$dose),
dose2 = rep(ddd, times = table(mod.obj$dataN$dose)),
lg10d = rep(lg10d, times = table(mod.obj$dataN$dose)),
m = (mod.obj$dataN$m),
sd = (mod.obj$dataN$sd),
log10m = log10(exp(orig.y)),
log10s = log10(exp(orig.s))
)
orig_ptdataLN <- data.frame(dose = mod.obj$dataLN$dose,
dose2 = rep(ddd, times = table(mod.obj$dataLN$dose)),
lg10d = rep(lg10d, times = table(mod.obj$dataLN$dose)),
m = (mod.obj$dataLN$m),
sd = (mod.obj$dataLN$sd),
log10m = log10(exp(mod.obj$dataLN$m)),
log10s = log10(exp(mod.obj$dataLN$sd))
)
}else if(clustered == T){
orig_ptdata <- data.frame(dose = (mod.obj$dataN$dose),
dose2 = rep(ddd, times = table(mod.obj$dataN$dose)),
lg10d = rep(lg10d, times = table(mod.obj$dataN$dose)),
y = mod.obj$dataN$response,
yl = log(mod.obj$dataN$response),
log10y = log10(mod.obj$dataN$response))
}
if(clustered == T){
## overall mean
means.all <- mod.obj$dataN %>%
dplyr::group_by(dose) %>%
dplyr::summarise(mresp = mean(response),
mlresp = mean(log(response)))
means.litter <- mod.obj$dataN %>%
dplyr::group_by(dose, litter) %>%
dplyr::summarise(mresp = mean(response),
mlresp = mean(log(response)))
means.all$dose = means.all$dose/max(means.all$dose)
means.litter$dose = means.litter$dose/max(means.litter$dose)
}
mod.obj$dataN$lg10d <- rep(lg10d, times = table(mod.obj$dataN$dose))
mod.obj$dataN$dose2 <- rep(ddd, times = table(mod.obj$dataN$dose))
mod.obj$dataLN$lg10d <- rep(lg10d, times = table(mod.obj$dataLN$dose))
mod.obj$dataLN$dose2 <- rep(ddd, times = table(mod.obj$dataLN$dose))
if(clustered == F){
mod.obj$dataN$lg10m <- log10(exp(orig.y))
mod.obj$dataN$lg10s <- log10(exp(orig.s))
mod.obj$dataLN$lg10m <- log10(exp(mod.obj$dataLN$m))
mod.obj$dataLN$lg10s <- log10(exp(mod.obj$dataLN$s))
}else if(clustered == T){
# means.all$lg10m <- log10(means.all$mresp)
# means.litter$lg10m <- log10(means.litter$mresp)
means.all$dose[means.all$dose==0] = ddd[1]
means.litter$dose[means.litter$dose==0] = ddd[1]
}
}else{
if(clustered == F){
orig.y <- log(NtoLN(mod.obj$dataN$m,mod.obj$dataN$sd))[1:length(mod.obj$dataN$dose)]
orig.s <- log(NtoLN(mod.obj$dataN$m,mod.obj$dataN$sd))[(length(mod.obj$dataN$dose)+1):(2*length(mod.obj$dataN$dose))]
orig_ptdataN <- data.frame(dose = (mod.obj$dataN$dose),
dose2 = rep(ddd[2:(length(unique(mod.obj$dataN$dose))+1)], times = table(mod.obj$dataN$dose)),
lg10d = rep(lg10d[2:(length(unique(mod.obj$dataN$dose))+1)], times = table(mod.obj$dataN$dose)),
m = (mod.obj$dataN$m),
sd = (mod.obj$dataN$sd),
log10m = log10(exp(orig.y)),
log10s = log10(exp(orig.s))
)
orig_ptdataLN <- data.frame(dose = mod.obj$dataLN$dose,
dose2 = rep(ddd[2:(length(unique(mod.obj$dataLN$dose))+1)], times = table(mod.obj$dataLN$dose)),
lg10d = rep(lg10d[2:(length(unique(mod.obj$dataLN$dose))+1)], times = table(mod.obj$dataLN$dose)),
m = (mod.obj$dataLN$m),
sd = (mod.obj$dataLN$sd),
log10m = log10(exp(mod.obj$dataLN$m)),
log10s = log10(exp(mod.obj$dataLN$sd))
)
}else if(clustered == T){
orig_ptdata <- data.frame(dose = (mod.obj$dataN$dose),
dose2 = rep(ddd[2:(length(unique(mod.obj$dataN$dose))+1)], times = table(mod.obj$dataN$dose)),
lg10d = rep(lg10d[2:(length(unique(mod.obj$dataN$dose))+1)], times = table(mod.obj$dataN$dose)),
y = mod.obj$dataN$response,
yl = log(mod.obj$dataN$response),
log10y = log10(mod.obj$dataN$response))
}
if(clustered == T){
## overall mean
means.all <- mod.obj$dataN %>%
dplyr::group_by(dose) %>%
dplyr::summarise(mresp = mean(response),
mlresp = mean(log(response)))
means.litter <- mod.obj$dataN %>%
dplyr::group_by(dose, litter) %>%
dplyr::summarise(mresp = mean(response),
mlresp = mean(log(response)))
means.all$dose = means.all$dose/max(means.all$dose)
means.litter$dose = means.litter$dose/max(means.litter$dose)
}
mod.obj$dataN$lg10d <- rep(lg10d[2:(length(unique(mod.obj$dataN$dose))+1)], times = table(mod.obj$dataN$dose))
mod.obj$dataN$dose2 <- rep(ddd[2:(length(unique(mod.obj$dataN$dose))+1)], times = table(mod.obj$dataN$dose))
mod.obj$dataLN$lg10d <- rep(lg10d[2:(length(unique(mod.obj$dataLN$dose))+1)], times = table(mod.obj$dataLN$dose))
mod.obj$dataLN$dose2 <- rep(ddd[2:(length(unique(mod.obj$dataLN$dose))+1)], times = table(mod.obj$dataLN$dose))
if(clustered == F){
mod.obj$dataN$lg10m <- log10(exp(orig.y))
mod.obj$dataN$lg10s <- log10(exp(orig.s))
mod.obj$dataLN$lg10m <- log10(exp(mod.obj$dataLN$m))
mod.obj$dataLN$lg10s <- log10(exp(mod.obj$dataLN$s))
}
# else if(clustered == T){
#   # means.all$lg10m <- log10(means.all$mresp)
#   # means.litter$lg10m <- log10(means.litter$mresp)
#   means.all$dose[means.all$dose==0] = ddd[1]
#   means.litter$dose[means.litter$dose==0] = ddd[1]
# }
}
dgr <- seq(min(lg10d), abs(min(lg10d)), by=0.01)
dose2 <- 10^dgr[(dgr > (lg10d[2]-((lg10d[2]-lg10d[1])/2)))]
if(clustered == F){
preds <- predict.BMADR(mod.obj, dose = dose2,
type = type, what = "predicted",
model_averaged = TRUE,
weight_type = weight_type)
}else if(clustered == T){
preds <- predict.BMADR(mod.obj, dose = dose2,
type = type, what = "predicted",
model_averaged = TRUE,
clustered = TRUE,
weight_type = weight_type)
}
preds$predicted$dgr <- dgr[(dgr > (lg10d[2]-((lg10d[2]-lg10d[1])/2)))]
preds$model_averaged$dgr <- dgr[(dgr > (lg10d[2]-((lg10d[2]-lg10d[1])/2)))]
preds$predicted$lg10pred <- log10(preds$predicted$predicted)
dgrprime <- dgr[(dgr <= (lg10d[2]-((lg10d[2]-lg10d[1])/2)))]
preds_min <- tidyr::nest(dplyr::group_by(dplyr::filter(preds$predicted, Dose == min(Dose)), Model))
if(clustered == F){
as_per_model <- dplyr::select(par_med(mod.obj), Model, min_response)
}else if(clustered == T){
as_per_model <- dplyr::select(par_med(mod.obj, clustered = TRUE), Model, min_response)
}
preds_min$data <- lapply(preds_min$data, function(x) data.frame(dgrprime = dgrprime,
Dose = 10^dgrprime,
#Dose = x$Dose,
predicted = x$predicted,
lg10predicted = x$lg10pred))
preds_min <- tidyr::unnest(preds_min, cols = c('data'))
preds_min <- merge(preds_min, as_per_model, by = 'Model', sort = FALSE)
preds_min$min_response[stringr::str_detect(preds_min$Model, "_LN")] <- (
preds_min$min_response[stringr::str_detect(preds_min$Model, "_LN")])
preds_min2 <- data.frame(lg10d = dgrprime,
Dose = 10^dgrprime,
log10MA = rep(log10(preds$model_averaged$model_averaged[
preds$model_averaged$Dose==min(preds$model_averaged$Dose)]),
length(dgrprime)),
MA = rep(preds$model_averaged$model_averaged[
preds$model_averaged$Dose==min(preds$model_averaged$Dose)],
length(dgrprime))
)
if(clustered == F){
respBMD <- predict.BMADR(mod.obj, type = type,
what = "resp_at_BMD",
model_averaged = TRUE,
weight_type = weight_type)
}else if(clustered == T){
respBMD <- predict.BMADR(mod.obj, type = type,
what = "resp_at_BMD",
model_averaged = TRUE,
clustered = TRUE,
weight_type = weight_type)
}
respBMD$resp_at_BMD$lg10bmd <- log10(respBMD$resp_at_BMD$BMD)
BMDMixture <- BMDmixture_extract(mod.obj, weight_type, conv=FALSE) # BMD values
BMDMixture$BMDMixture2 <- log10(BMDMixture$BMDMixture/mod.obj$max.dose)
gghst2 <- hist(BMDMixture$BMDMixture, breaks = sqrt(nrow(BMDMixture)), plot = FALSE) #hist on original scale
lais <- log10(gghst2$breaks) # log10 of the breakpoints
dlais <- abs(diff(lais)) # width of the interval on log scale
glais <- (gghst2$counts/dlais) # divide the original counts by the width on the log scale
glais2 <- glais/sum(glais) * nrow(BMDMixture) # normalise the new frequencie
BMDMixture2 <- data.frame(Model = unique(BMDMixture$Model),#rep(unique(BMDMixture$Model), length(gghst2$counts)),
# Dose = gghst2$mids, #midpoints
Dose = 10**lais[1:length(gghst2$counts)], #midpoints
y = gghst2$counts, #frequencies
y2 = glais2
)
#BMDs and Weights
respBMDBMDW <- merge(respBMD$resp_at_BMD, BMDW, by = c("Model", "BMD"), sort = FALSE)
respBMDBMDW <- refactor(respBMDBMDW, type)
respBMDBMDW$Distribution <- ifelse(stringr::str_detect(respBMDBMDW$Model, "(LN)"), "LN", "N")
pd <- position_dodge(0.5)
# dist_fills <- c("N" = "#EFC000FF", "LN" = "#0073C2FF")
# dist_names <- c("N" = "Normal", "LN" = "LogNormal")
dist_fills <- c("#EFC000FF", "#0073C2FF")
names(dist_fills) <- c("N","LN")
dist_names <- c("Normal","LogNormal")
names(dist_names) <- c("N","LN")
## If BMDU > maxD^2 set to maxD^2
# if(mod.obj$max.dose > 1){
#   respBMDBMDW$BMDU <- ifelse(respBMDBMDW$BMDU > mod.obj$max.dose^2, mod.obj$max.dose^2, respBMDBMDW$BMDU)
# }
if(mod.obj$max.dose > 1){
respBMDBMDW$BMDU <- ifelse(((respBMDBMDW$BMDU > mod.obj$max.dose^2) &
((respBMDBMDW$BMDU/respBMDBMDW$BMD)/(respBMDBMDW$BMD/respBMDBMDW$BMDL)) > 10) |
respBMDBMDW$BMDU > 10*mod.obj$max.dose^2,
# mod.obj$max.dose^2,
2*(respBMDBMDW$BMD - respBMDBMDW$BMDL),
respBMDBMDW$BMDU)
}
if(clustered == F){
mod.obj$dataN$response = mod.obj$dataN$m
mod.obj$dataLN$response = mod.obj$dataLN$m
}
#BMD plots
pBMDs <- ggplot(data = respBMDBMDW, aes(x = BMD, y = Model, group = Model)) +
geom_errorbarh(aes(xmin = BMDL, xmax = BMDU, y = Model),
linetype = "solid", show.legend = FALSE,
size = 3, height = 1.2, color = brewer.pal(8, "Set2")[8]) +
geom_point(aes(x = BMD, y = Model, fill = Distribution),
size = 7, color = 1, shape = 21) +
theme_minimal() +
labs(x = expression(BMD), y = "", fill = "Distribution") +
scale_fill_manual(values = dist_fills,
labels = dist_names) +
labs(x="BMD on original scale") +
#labs(x = "BMD", y = "Models", title = "BMDs per Model") +
# scale_x_continuous(breaks = seq(min(log10(respBMDBMDW$BMDL)),
#                                 max(log10(respBMDBMDW$BMDU)), by = 0.08)
#                    ) +
theme(strip.text = element_text(size = 15, face = "bold"),
axis.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.text = element_text(size = 10, face = "bold"),
legend.title = element_text(size = 15, face = "bold"),
panel.spacing = unit(5, "lines"),
legend.position = "top",
legend.direction = "horizontal",
title = element_text(size = 15, face = "bold")) +
geom_errorbarh(data = BMDBMA[BMDBMA$Type == weight_type,],
aes(xmin = BMDL, xmax = BMDU, y = Model),
linetype = "solid", show.legend = FALSE,
size = 3, height = 1.2, color = brewer.pal(9, "Set1")[3]) +
geom_point(data = BMDBMA[BMDBMA$Type == weight_type,],
aes(x = BMD, y = Model),
size = 7, color = 1, shape = 21,
fill = brewer.pal(9, "Set1")[1]) +
#scale_x_log10() +
scale_y_discrete(limits = rev(c("Model Averaged", "Exp(N)", "InvExp(N)", "Hill(N)",
"LogNormal(N)", "Gamma(N)",  "QuadExp(N)", "Probit(N)",
"Logistic(N)", "Exp(LN)", "InvExp(LN)", "Hill4(LN)",
"LogNormal(LN)", "Gamma(LN)", "QuadExp(LN)",
"Probit(LN)", "Logistic(LN)")),
labels = rev(c("Model Averaged", "Exp(N)", "InvExp(N)", "Hill(N)",
"LogNormal(N)", "Gamma(N)",  "QuadExp(N)", "Probit(N)",
"Logistic(N)", "Exp(LN)", "InvExp(LN)", "Hill4(LN)",
"LogNormal(LN)", "Gamma(LN)", "QuadExp(LN)",
"Probit(LN)", "Logistic(LN)")))
#Weights plot
needed_data <- tidyr::separate(BMDW,
col = "Model", sep = "_",
into = c("Model", "Distribution"))
if(weight_type == "LP") {
pWeights <- ggpubr::ggdotchart(
needed_data, x = "Model", y = "LP_Weights",
group = "Distribution", color = "Distribution",
add = "segment", position = position_dodge(0.3),
sorting = "descending", size = 3, dot.size = 7) +
labs(x = "", y = "Weight", color = "Distribution",
title = "") +
theme_minimal() +
theme(strip.text = element_text(size = 15, face = "bold"),
axis.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.text = element_text(size = 10, face = "bold"),
legend.title = element_text(size = 15, face = "bold"),
panel.spacing = unit(5, "lines"),
legend.position = "top",
legend.direction = "horizontal",
title = element_text(size = 15, face = "bold")) +
scale_x_discrete(
limits = c("E4", "IE4", "H4", "LN4", "G4", "QE4", "P4", "L4"),
labels = c("Exp", "InvExp", "Hill", "LogNormal", "Gamma",
"QuadExp", "Probit", "Logistic")
) +
scale_color_manual(values = dist_fills,
labels = dist_names)
needed_data2 <- dplyr::arrange(needed_data, desc(LP_Weights))
needed_data2$CWeights <- cumsum(needed_data2$LP_Weights)
needed_data2 <- dplyr::rename(needed_data2, Weights = LP_Weights)
} else {
pWeights <- ggpubr::ggdotchart(
needed_data, x = "Model", y = "BS_Weights",
group = "Distribution", color = "Distribution",
add = "segment", position = position_dodge(0.3),
sorting = "descending", size = 3, dot.size = 7) +
labs(x = "", y = "Weight", color = "Distribution",
title = "") +
theme_minimal() +
theme(strip.text = element_text(size = 15, face = "bold"),
axis.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.text = element_text(size = 10, face = "bold"),
legend.title = element_text(size = 15, face = "bold"),
panel.spacing = unit(5, "lines"),
legend.position = "top",
legend.direction = "horizontal",
title = element_text(size = 15, face = "bold")) +
scale_x_discrete(
limits = c("E4", "IE4", "H4", "LN4", "G4", "QE4", "P4", "L4"),
labels = c("Exp", "InvExp", "Hill", "LogNormal", "Gamma",
"QuadExp", "Probit", "Logistic")
) +
scale_color_manual(values = dist_fills,
labels = dist_names)
needed_data2 <- dplyr::arrange(needed_data, desc(BS_Weights))
needed_data2$CWeights <- cumsum(needed_data2$BS_Weights)
needed_data2 <- dplyr::rename(needed_data2, Weights = BS_Weights)
}
#Prediction plot
mods_fills <- c("Model-averaged BMD" = "coral")
#print(BMDBMA)
if(is.BMADR2(mod.obj)[3]==2) {
BMDBMA$Response <- c(sum(respBMDBMDW$resp_at_BMD*respBMDBMDW$BS_Weights),
sum(respBMDBMDW$resp_at_BMD*respBMDBMDW$LP_Weights))
} else if(is.BMADR2(mod.obj)[2]==2) {
BMDBMA$Response <- sum(respBMDBMDW$resp_at_BMD*respBMDBMDW$LP_Weights)
} else {
pts <- ggpubr::ggarrange(pBMDs, pWeights, nrow = 1, ncol = 2)
return(pts)
stop("cannot compute model averaged response at BMD. Please check the inputs.")
}
preds2 <- tidyr::separate(preds$predicted,
col = "Model", sep = "_",
into = c("Model", "Distribution"))
preds_min <- tidyr::separate(preds_min,
col = "Model", sep = "_",
into = c("Model", "Distribution"))
lty <- c("LN" = "twodash",
"N" = "solid")
md_cls <- RColorBrewer::brewer.pal(8, "Dark2")
names(md_cls) <-  c("E4", "IE4", "H4",
"LN4", "G4", "QE4",
"P4", "L4")
dose*mod.obj$max.dose
if(min(mod.obj$data$dose) == 0){
plot.labs = dose*mod.obj$max.dose
}else{
plot.labs = c(0, dose*mod.obj$max.dose)
}
if(min(mod.obj$dataN$dose) == 0){
plot.labs = dose*mod.obj$max.dose
}else{
plot.labs = c(0, dose*mod.obj$max.dose)
}
plot.labs
ymin = 10^min(mod.obj$dataN$lg10m - 2*mod.obj$dataN$lg10s, na.rm=T)
ymax = 10^max(mod.obj$dataN$lg10m + 2*mod.obj$dataN$lg10s, na.rm=T)
# plot for Normal distribution
pplotN <- ggplot(data = preds2[preds2$Distribution=="N",],
aes(x = Dose*mod.obj$max.dose, y = predicted, group = Model,
color = Model)) +
geom_line(alpha = 0.6,
size = 1,
show.legend = TRUE, linetype = 1) +
labs(color = "Model", x = expression(dose),
y = expression(response), title = "Normal distribution",
caption = "data and vertical bars based on arithmetic sample means and standard deviations") +
geom_segment(data = preds_min[preds_min$Distribution=="N",],
mapping = aes(x = Dose[1]*mod.obj$max.dose, y = min_response,
xend = max(Dose*mod.obj$max.dose),#max(dgr[(dgr <= (lg10d[2]-((lg10d[2]-lg10d[1])/2)))]),
yend = predicted,
group = interaction(Model, Distribution),
color = Model),
linetype = "dotted", alpha = 0.6,
size = 0.8, inherit.aes = FALSE, show.legend = FALSE) +
#ylim(ymin, ymax) +
geom_errorbar(data = orig_ptdataN,
mapping = aes(x = dose2*mod.obj$max.dose, ymin = m-sd,
ymax = m+sd),
width = NA, position = pd, size = 1,
inherit.aes = FALSE) +
geom_point(data = orig_ptdataN, mapping = aes(x = dose2*mod.obj$max.dose, y = m) ,
size = 2, color = 1, shape = 21,
fill = brewer.pal(9, "Set1")[2],
inherit.aes = FALSE) +
# geom_jitter(data = orig_ptdata, mapping = aes(x = dose2*mod.obj$max.dose, y = m) ,
#              size = 2, color = 1, shape = 21,
#              fill = brewer.pal(9, "Set1")[2], position = position_jitter(h = 0.01, width = 0),
#              inherit.aes = FALSE) +
geom_errorbarh(data = dplyr::filter(BMDBMA, Type == weight_type),
aes(xmin = BMDL, xmax = BMDU,
y = Response,
group = Model),
linetype = "solid", show.legend = FALSE,
size = 2, height = 0.01*log10(mean(mod.obj$dataN$m)), inherit.aes = FALSE,
color = brewer.pal(9, "Set1")[3]) +
geom_point(data = dplyr::filter(BMDBMA, Type == weight_type),
aes(x = BMD, y = Response, group = Model),
size = 5, shape = 19,
color = brewer.pal(9, "Set1")[1],
show.legend = FALSE,
inherit.aes = FALSE) +
coord_cartesian(xlim = c(min(preds_min$Dose*mod.obj$max.dose),
2*mod.obj$max.dose) ) +
# scale_x_continuous(trans = 'log10', labels = scales::comma,
#                    breaks = orig_ptdata$dose2[2:length(orig_ptdata$dose2)]*mod.obj$max.dose) +
scale_x_continuous(trans = 'log10', labels = plot.labs,
breaks = ddd*mod.obj$max.dose) +
# scale_linetype_manual(values = lty,
# labels = c('LogNormal', 'Normal')) +
scale_color_manual(values = md_cls,
labels = c("Exp", "InvExp", "Hill", "LogNormal", "Gamma",
"QuadExp", "Probit", "Logistic")) +
theme_minimal() +
theme(strip.text = element_text(size = 15, face = "bold"),
axis.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.text = element_text(size = 8),
legend.title = element_text(size = 12, face = "bold"),
panel.spacing = unit(5, "lines"),
legend.position = "top",
legend.direction = "horizontal",
title = element_text(size = 15, face = "bold"))
pplotN
source('./R/plottingfunctions.R')
pFLBMD <- plot.BMADR(FLBMD, type = 'increasing', weight_type = 'LP', all = FALSE, title = '', log = F)
pFLBMD$BMDs
pFLBMD$weights
pFLBMD$model_fit_N
pFLBMD$model_fit_LN
pFLBMD$model_fit
pFLBMD$MA_fit
load("~/BBMD/FINAL CODE/TESTING/das5.rda")
# # data.input <- das5$data[das5$data$sex==1,]
data.input <- das5$data
data.input <- data.frame(dose = data.input$dose,
response = data.input$foetalweight,
litter = data.input$number)
plot(data.input$dose, data.input$response)
plot(data.input$dose, data.input$response, xlab = 'dose', ylab = 'fetal weight')
library(dplyr)
data.plot <- data.input %>%
group_by(dose, litter) %>%
summarise(mresp = mean(response))
# plot(data.plot$dose/max(data.plot$dose), data.plot$mresp, xlab = 'Dose', ylab = 'Litter mean response')
points(data.plot$dose, data.plot$mresp, pch = 15, col = 2)
data.plot2 <- data.input %>%
group_by(dose) %>%
summarise(mresp = mean(response))
# plot(data.plot$dose/max(data.plot$dose), data.plot$mresp, xlab = 'Dose', ylab = 'Litter mean response')
points(data.plot2$dose, data.plot2$mresp, pch = 18, cex = 2, col = 3)
data.input.test.DR <- data.input
data.input.test.DR$litter <- 1
summarize.indiv.data(data.input, 'continuous', cluster = TRUE)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
prior.weights = c(rep(1,8), 1, rep(1,7))
q = 0.05
pvec = c(0.05,0.5,0.95)
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
data_LN <- PREP_DATA_LN_C(data.input, q, prior.d = 'N11')
FLBMD <- full.laplace_MAc(data_N, data_LN, prior.weights)
plt <- plot.BMADR(FLBMD, type = 'decreasing', clustered = T, weight_type = 'LP', include_data = T, all = F, title = '')
plt$BMDs
plt$weights
plt$model_fit
plt$model_fit_N
plt$model_fit_LN
plt$MA_fit
data.input <- data.input[data.input$dose != 0, ]
plot(data.input$dose, data.input$response)
plot(data.input$dose, data.input$response, xlab = 'dose', ylab = 'fetal weight')
library(dplyr)
data.plot <- data.input %>%
group_by(dose, litter) %>%
summarise(mresp = mean(response))
# plot(data.plot$dose/max(data.plot$dose), data.plot$mresp, xlab = 'Dose', ylab = 'Litter mean response')
points(data.plot$dose, data.plot$mresp, pch = 15, col = 2)
data.plot2 <- data.input %>%
group_by(dose) %>%
summarise(mresp = mean(response))
# plot(data.plot$dose/max(data.plot$dose), data.plot$mresp, xlab = 'Dose', ylab = 'Litter mean response')
points(data.plot2$dose, data.plot2$mresp, pch = 18, cex = 2, col = 3)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
prior.weights = c(rep(1,8), 1, rep(1,7))
q = 0.05
pvec = c(0.05,0.5,0.95)
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
data_LN <- PREP_DATA_LN_C(data.input, q, prior.d = 'N11')
FLBMD <- full.laplace_MAc(data_N, data_LN, prior.weights)
FLBMD$MA
plt <- plot.BMADR(FLBMD, type = 'decreasing', clustered = T, weight_type = 'LP', include_data = T, all = F, title = '')
plt$BMDs
plt$weights
plt$model_fit
plt$model_fit_N
plt$model_fit_LN
plt$MA_fit
