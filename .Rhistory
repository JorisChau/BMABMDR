try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
library(gamlss)
data <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos2.csv", header = T)
head(data)
data <- data.frame(dose = data$dose,
y = data$y,
n = data$n)
plot(data$dose, data$y/data$n)
anydoseresponseQ(data$dose, data$y, data$n, cluster = T)
anydoseresponseQ(data$dose, data$y, data$n, cluster = T, use.mcmc=F)
anydoseresponseQ(data$dose, data$y, data$n, cluster = F)
library('rstantools')
library('usethis')
library('roxygen2')
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
####################################################################################
####################################################################################
### Instructions for publishing a package on CRAN: https://r-pkgs.org/release.html
# https://cran.r-project.org/web/packages/rstantools/vignettes/minimal-rstan-package.html
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
library(gamlss)
data <- read.csv('~/BBMD/FINAL CODE/RatStudyCovariates.csv', header = T)
data
summ.data <- data.frame(x = data$Dose,
y = data$MeanBW,
s = data$SdBW,
n = data$N,
cov = data$Sex)
summ.data
q = 0.05
prior.weights = c(rep(1,4), rep(0,4), rep(1,4), rep(0,4))
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = T,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
data = summ.data
sumstats  = T
sd = T
q
prior.d='N11'
extended = T
ndraws = 30000
seed = 123
pvec = c(0.05,0.5,0.95)
data_NCOV_all <- PREP_DATA_NCOV(
data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended,
covariate = 'all'
)
data_NCOV_asigma2 <- PREP_DATA_NCOV(
data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended,
covariate = 'a_sigma2'
)
data_NCOV_dBMD <- PREP_DATA_NCOV(
data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended,
covariate = 'BMD_d'
)
data_N_noCOV <- PREP_DATA_N(data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended)
data_LNCOV_all <- PREP_DATA_LNCOV(
data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended,
covariate = 'all'
)
data_LNCOV_asigma2 <- PREP_DATA_LNCOV(
data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended,
covariate = 'a_sigma2'
)
data_LNCOV_dBMD <- PREP_DATA_LNCOV(
data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended,
covariate = 'BMD_d'
)
data_LN_noCOV <- PREP_DATA_LN(data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended)
select_E4_N <- fun_cov_selection(model = mE4COV,
model_name = 'E4_N',
model.none = mE4,
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfE4_NI_Cov, llfE4_ND_Cov),
data_asigma2 = data_NCOV_asigma2,
data_dBMD = data_NCOV_dBMD,
data_all = data_NCOV_all,
data_none = data_N_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
warnings()
mE4
load('WS_STAN_CONT_COV.RData')
load('~/BBMD/FINAL CODE/WS_STAN_CONT_COV.RData')
select_E4_N <- fun_cov_selection(model = mE4COV,
model_name = 'E4_N',
model.none = mE4,
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfE4_NI_Cov, llfE4_ND_Cov),
data_asigma2 = data_NCOV_asigma2,
data_dBMD = data_NCOV_dBMD,
data_all = data_NCOV_all,
data_none = data_N_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
model = mE4COV
model_name = 'E4_N'
model.none = mE4
load('WS_STAN_CONT.RData')
load('~/BBMD/FINAL CODE/WS_STAN_CONT.RData')
model.none = mE4
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfE4_NI_Cov, llfE4_ND_Cov)
data_asigma2 = data_NCOV_asigma2
data_dBMD = data_NCOV_dBMD
data_all = data_NCOV_all
data_none = data_N_noCOV
prior.weightsCov = rep(1, 4)
pvec = pvec
td = data_NCOV_all$data$truncd
# fit all four submodels
optMod_asigma2 <- fun_optimCov(model, data_asigma2$data,
data_asigma2$start, ndraws, seed, pvec)
if((ifelse(is.na(optMod_asigma2[[3]]),TRUE,(optMod_asigma2[[3]]!=0)) | length(optMod_asigma2)!=9 | ('Inf' %in% optMod_asigma2$theta_tilde))){
prior.weightsCov[1] <- 0
# warning('Difficulties fitting the Probit (Lognormal) model; prior weight was set to 0 and the model is not included in model averaging')
ll_asigma2 <- NA
}else{
ll_asigma2 <- loglik(pars = optMod_asigma2$par, x = data_asigma2$data$x, n = data_asigma2$data$n,
m = data_asigma2$data$m, s2 = data_asigma2$data$s2,
qval = data_asigma2$data$q, shift = data_asigma2$data$shift, covar = 'a_sigma2',
nlevels = data_asigma2$data$nlevels,
trt_ind = data_asigma2$data$trt_ind)
}
optMod_dBMD <- fun_optimCov(model, data_dBMD$data,
data_dBMD$start, ndraws, seed, pvec)
if((ifelse(is.na(optMod_dBMD[[3]]),TRUE,(optMod_dBMD[[3]]!=0)) | length(optMod_dBMD)!=9 | ('Inf' %in% optMod_dBMD$theta_tilde))){
prior.weightsCov[2] <- 0
# warning('Difficulties fitting the Probit (Lognormal) model; prior weight was set to 0 and the model is not included in model averaging')
ll_dBMD <- NA
}else{
ll_dBMD <- loglik(pars = optMod_dBMD$par, x = data_dBMD$data$x, n = data_dBMD$data$n,
m = data_dBMD$data$m, s2 = data_dBMD$data$s2,
qval = data_dBMD$data$q, shift = data_dBMD$data$shift, covar = 'BMD_d',
nlevels = data_dBMD$data$nlevels,
trt_ind = data_dBMD$data$trt_ind)
}
optMod_dBMD
if((ifelse(is.na(optMod_asigma2[[3]]),TRUE,(optMod_asigma2[[3]]!=0)) | length(optMod_asigma2)!=9)){
prior.weightsCov[1] <- 0
# warning('Difficulties fitting the Probit (Lognormal) model; prior weight was set to 0 and the model is not included in model averaging')
ll_asigma2 <- NA
}else{
ll_asigma2 <- loglik(pars = optMod_asigma2$par, x = data_asigma2$data$x, n = data_asigma2$data$n,
m = data_asigma2$data$m, s2 = data_asigma2$data$s2,
qval = data_asigma2$data$q, shift = data_asigma2$data$shift, covar = 'a_sigma2',
nlevels = data_asigma2$data$nlevels,
trt_ind = data_asigma2$data$trt_ind)
}
optMod_dBMD <- fun_optimCov(model, data_dBMD$data,
data_dBMD$start, ndraws, seed, pvec)
if((ifelse(is.na(optMod_dBMD[[3]]),TRUE,(optMod_dBMD[[3]]!=0)) | length(optMod_dBMD)!=9)){
prior.weightsCov[2] <- 0
# warning('Difficulties fitting the Probit (Lognormal) model; prior weight was set to 0 and the model is not included in model averaging')
ll_dBMD <- NA
}else{
ll_dBMD <- loglik(pars = optMod_dBMD$par, x = data_dBMD$data$x, n = data_dBMD$data$n,
m = data_dBMD$data$m, s2 = data_dBMD$data$s2,
qval = data_dBMD$data$q, shift = data_dBMD$data$shift, covar = 'BMD_d',
nlevels = data_dBMD$data$nlevels,
trt_ind = data_dBMD$data$trt_ind)
}
source('~/GitHub/BMABMDR/R/fun_cov_selection.R')
select_E4_N <- fun_cov_selection(model = mE4COV,
model_name = 'E4_N',
model.none = mE4,
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfE4_NI_Cov, llfE4_ND_Cov),
data_asigma2 = data_NCOV_asigma2,
data_dBMD = data_NCOV_dBMD,
data_all = data_NCOV_all,
data_none = data_N_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
select_E4_N
select_IE4_N <- fun_cov_selection(model = mIE4COV,
model_name = 'IE4_N',
model.none = mIE4,
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfIE4_NI_Cov, llfIE4_ND_Cov),
data_asigma2 = data_NCOV_asigma2,
data_dBMD = data_NCOV_dBMD,
data_all = data_NCOV_all,
data_none = data_N_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
select_H4_N <- fun_cov_selection(model = mH4COV,
model_name = 'H4_N',
model.none = mH4,
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfH4_NI_Cov, llfH4_ND_Cov),
data_asigma2 = data_NCOV_asigma2,
data_dBMD = data_NCOV_dBMD,
data_all = data_NCOV_all,
data_none = data_N_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
select_LN4_N <- fun_cov_selection(model = mLN4COV,
model_name = 'LN4_N',
model.none = mLN4,
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfLN4_NI_Cov, llfLN4_ND_Cov),
data_asigma2 = data_NCOV_asigma2,
data_dBMD = data_NCOV_dBMD,
data_all = data_NCOV_all,
data_none = data_N_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
select_G4_N <- fun_cov_selection(model = mG4COV,
model_name = 'G4_N',
model.none = mG4,
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfG4_NI_Cov, llfG4_ND_Cov),
data_asigma2 = data_NCOV_asigma2,
data_dBMD = data_NCOV_dBMD,
data_all = data_NCOV_all,
data_none = data_N_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
select_QE4_N <- fun_cov_selection(model = mQE4COV,
model_name = 'QE4_N',
model.none = mQE4,
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfQE4_NI_Cov, llfQE4_ND_Cov),
data_asigma2 = data_NCOV_asigma2,
data_dBMD = data_NCOV_dBMD,
data_all = data_NCOV_all,
data_none = data_N_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncdQ, seed = seed)
select_P4_N <- fun_cov_selection(model = mP4COV,
model_name = 'P4_N',
model.none = mP4,
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfP4_NI_Cov, llfP4_ND_Cov),
data_asigma2 = data_NCOV_asigma2,
data_dBMD = data_NCOV_dBMD,
data_all = data_NCOV_all,
data_none = data_N_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
select_L4_N <- fun_cov_selection(model = mL4COV,
model_name = 'L4_N',
model.none = mL4,
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfL4_NI_Cov, llfL4_ND_Cov),
data_asigma2 = data_NCOV_asigma2,
data_dBMD = data_NCOV_dBMD,
data_all = data_NCOV_all,
data_none = data_N_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
select_E4_LN <- fun_cov_selection(model = mE4COV,
model_name = 'E4_LN',
model.none = mE4,
loglik = ifelse(data_LNCOV_all$data$data_type == 2, llfE4_LNI_Cov, llfE4_LND_Cov),
data_asigma2 = data_LNCOV_asigma2,
data_dBMD = data_LNCOV_dBMD,
data_all = data_LNCOV_all,
data_none = data_LN_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
select_IE4_LN <- fun_cov_selection(model = mIE4COV,
model_name = 'IE4_LN',
model.none = mIE4,
loglik = ifelse(data_LNCOV_all$data$data_type == 2, llfIE4_LNI_Cov, llfIE4_LND_Cov),
data_asigma2 = data_LNCOV_asigma2,
data_dBMD = data_LNCOV_dBMD,
data_all = data_LNCOV_all,
data_none = data_LN_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
select_H4_LN <- fun_cov_selection(model = mH4COV,
model_name = 'H4_LN',
model.none = mH4,
loglik = ifelse(data_LNCOV_all$data$data_type == 2, llfH4_LNI_Cov, llfH4_LND_Cov),
data_asigma2 = data_LNCOV_asigma2,
data_dBMD = data_LNCOV_dBMD,
data_all = data_LNCOV_all,
data_none = data_LN_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
select_LN4_LN <- fun_cov_selection(model = mLN4COV,
model_name = 'LN4_LN',
model.none = mLN4,
loglik = ifelse(data_LNCOV_all$data$data_type == 2, llfLN4_LNI_Cov, llfLN4_LND_Cov),
data_asigma2 = data_LNCOV_asigma2,
data_dBMD = data_LNCOV_dBMD,
data_all = data_LNCOV_all,
data_none = data_LN_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
select_G4_LN <- fun_cov_selection(model = mG4COV,
model_name = 'G4_LN',
model.none = mG4,
loglik = ifelse(data_LNCOV_all$data$data_type == 2, llfG4_LNI_Cov, llfG4_LND_Cov),
data_asigma2 = data_LNCOV_asigma2,
data_dBMD = data_LNCOV_dBMD,
data_all = data_LNCOV_all,
data_none = data_LN_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
select_QE4_LN <- fun_cov_selection(model = mQE4COV,
model_name = 'QE4_LN',
model.none = mQE4,
loglik = ifelse(data_LNCOV_all$data$data_type == 2, llfQE4_LNI_Cov, llfQE4_LND_Cov),
data_asigma2 = data_LNCOV_asigma2,
data_dBMD = data_LNCOV_dBMD,
data_all = data_LNCOV_all,
data_none = data_LN_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncdQ, seed = seed)
select_P4_LN <- fun_cov_selection(model = mP4COV,
model_name = 'P4_LN',
model.none = mP4,
loglik = ifelse(data_LNCOV_all$data$data_type == 2, llfP4_LNI_Cov, llfP4_LND_Cov),
data_asigma2 = data_LNCOV_asigma2,
data_dBMD = data_LNCOV_dBMD,
data_all = data_LNCOV_all,
data_none = data_LN_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
select_L4_LN <- fun_cov_selection(model = mL4COV,
model_name = 'L4_LN',
model.none = mL4,
loglik = ifelse(data_LNCOV_all$data$data_type == 2, llfL4_LNI_Cov, llfL4_LND_Cov),
data_asigma2 = data_LNCOV_asigma2,
data_dBMD = data_LNCOV_dBMD,
data_all = data_LNCOV_all,
data_none = data_LN_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
data <- read.csv('~/BBMD/FINAL CODE/RatStudyCovariates.csv', header = T)
data
summ.data <- data.frame(x = data$Dose,
y = data$MeanBW,
s = data$SdBW,
n = data$N,
cov = data$Sex)
summ.data
q = 0.05
prior.weights = c(rep(1,4), rep(0,4), rep(1,4), rep(0,4))
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = T,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
source('~/GitHub/BMABMDR/R/fun_cov_selection.R')
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = T,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = T,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
basic.plot(FLBMD, 'E4_N', increasing = F)
basic.plot(FLBMD, 'H4_LN', increasing = F)
# prior.weights = c(rep(1,4), rep(0,4), rep(1,4), rep(0,4))
# prior.weights = c(rep(1,7), rep(0,1), rep(1,6), rep(1,2))
prior.weight = rep(1,16)
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = T,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
basic.plot(FLBMD, 'E4_N', increasing = F)
basic.plot(FLBMD, 'H4_LN', increasing = F)
# data <- read.csv('~/BBMD/FINAL CODE/RatStudyCovariates.csv', header = T)
data <- read.csv('~/BBMD/FINAL CODE/RatStudy.csv', header = T)
data
summ.data <- data.frame(x = data$Dose,
y = data$MeanBW,
s = data$SdBW,
n = data$N,
cov = data$Sex)
summ.data
q = 0.05
# prior.weights = c(rep(1,4), rep(0,4), rep(1,4), rep(0,4))
# prior.weights = c(rep(1,7), rep(0,1), rep(1,6), rep(1,2))
prior.weight = rep(1,16)
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = T,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
basic.plot(FLBMD, 'E4_N', increasing = F)
basic.plot(FLBMD, 'H4_LN', increasing = F)
