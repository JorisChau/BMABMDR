<<<<<<< HEAD
node_color = 'child',
edge_linetype = 'observed',
node_label = 'id',
# edge_color = 'school',
# edge_alpha = 'support',
root_order = 't_inf_est',
# node_order = 't_inf_est',
position_dodge = T,
rank_contact = 'from',
unlinked_pos = 'top',
# igraph_type = 'fr',
# lineend = 'square',
# annot = F,
arrow_size = 0,
# editor = T,
edge_width = 1,
node_size = 10,
font_size = 5,
col_pal = c('Adult' = 'grey', 'Child' = 'white','Household' = 'grey', 'School' = 'black')
# x_axis = 't_inf_est',
# network_shape = 'rectangle',
# node_color = 'child',
# col_pal = c('Adult' = 'grey', 'Child' = 'white'),
# edge_linetype = 'observed',
# arrow_size = 0.1,
# node_size = 10
) + xlab('Estimated time of infection') + ylab('') +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = seq(as.Date('2020-10-01'),as.Date('2021-03-19'), 14))
pNetAll
pNetAll <- vis_temporal_static(cons_tree,
x_axis = 't_inf_est',
network_shape = 'rectangle',
node_color = 'child',
edge_linetype = 'observed',
node_label = 'id',
# edge_color = 'school',
# edge_alpha = 'support',
root_order = 't_inf_est',
# node_order = 't_inf_est',
position_dodge = T,
rank_contact = 'from',
unlinked_pos = 'top',
# igraph_type = 'fr',
# lineend = 'square',
# annot = F,
arrow_size = 0,
# editor = T,
edge_width = 1,
node_size = 10,
font_size = 15,
col_pal = c('Adult' = 'grey', 'Child' = 'white','Household' = 'grey', 'School' = 'black')
# x_axis = 't_inf_est',
# network_shape = 'rectangle',
# node_color = 'child',
# col_pal = c('Adult' = 'grey', 'Child' = 'white'),
# edge_linetype = 'observed',
# arrow_size = 0.1,
# node_size = 10
) + xlab('Estimated time of infection') + ylab('') +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = seq(as.Date('2020-10-01'),as.Date('2021-03-19'), 14))
pNetAll
jpeg('network_all_0606.jpg',  width = 120, height = 70, units = 'cm', res = 300)
pNetAll
dev.off()
?vis_temporal_static
pNetAll <- vis_temporal_static(cons_tree,
type = 'ttree',
x_axis = 't_inf_est',
network_shape = 'rectangle',
node_color = 'child',
edge_linetype = 'observed',
node_label = 'id',
# edge_color = 'school',
# edge_alpha = 'support',
root_order = 't_inf_est',
# node_order = 't_inf_est',
position_dodge = T,
rank_contact = 'from',
unlinked_pos = 'top',
# igraph_type = 'fr',
# lineend = 'square',
# annot = F,
arrow_size = 0,
# editor = T,
edge_width = 1,
node_size = 10,
# font_size = 15,
col_pal = c('Adult' = 'grey', 'Child' = 'white','Household' = 'grey', 'School' = 'black')
# x_axis = 't_inf_est',
# network_shape = 'rectangle',
# node_color = 'child',
# col_pal = c('Adult' = 'grey', 'Child' = 'white'),
# edge_linetype = 'observed',
# arrow_size = 0.1,
# node_size = 10
) + xlab('Estimated time of infection') + ylab('') +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = seq(as.Date('2020-10-01'),as.Date('2021-03-19'), 14))
pNetAll
jpeg('network_all_0606.jpg',  width = 120, height = 70, units = 'cm', res = 300)
pNetAll
dev.off()
pNetAll <- vis_temporal_static(cons_tree,
type = 'ttree',
x_axis = 't_inf_est',
network_shape = 'rectangle',
node_color = 'child',
edge_linetype = 'observed',
node_label = 'id',
edge_color = 'school',
# edge_alpha = 'support',
root_order = 't_inf_est',
# node_order = 't_inf_est',
position_dodge = T,
rank_contact = 'from',
unlinked_pos = 'top',
# igraph_type = 'fr',
# lineend = 'square',
# annot = F,
arrow_size = 0,
# editor = T,
edge_width = 1,
node_size = 20,
# font_size = 15,
col_pal = c('Adult' = 'grey', 'Child' = 'white','Household' = 'grey', 'School' = 'black')
# x_axis = 't_inf_est',
# network_shape = 'rectangle',
# node_color = 'child',
# col_pal = c('Adult' = 'grey', 'Child' = 'white'),
# edge_linetype = 'observed',
# arrow_size = 0.1,
# node_size = 10
) + xlab('Estimated time of infection') + ylab('') +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = seq(as.Date('2020-10-01'),as.Date('2021-03-19'), 14))
pNetAll
jpeg('network_all_0606.jpg',  width = 120, height = 70, units = 'cm', res = 300)
pNetAll
dev.off()
jpeg('network_all_0606.jpg',  width = 150, height = 100, units = 'cm', res = 300)
pNetAll
dev.off()
setwd('~/Sequencing/FINAL/Outbreaker/Simulations/')
ndatasets = 100
for(c in c(25,50,75,100)){
for(is in 1:ndatasets){
datID <- paste0('C:/Users/lucp9385/Documents/Sequencing/FINAL/Outbreaker/Simulations/Sims/2-2.5/CeBase/Compl',c,'/InfNetw_Sim',is,'.csv')
if(file.exists(datID)){
dat <- read.csv(datID, header = T)
dat <- dat[, -1]
## True attack rate
dat$Case <- ifelse(!is.na(dat$InfectionTime), 1, 0)
dat$InfDay <- floor(dat$InfectionTime) + 1
dat$PosDay <- floor(dat$DayPosTest) + 1
## Weekly true attack rate
dates.true <- plyr::count(dat$InfDay[!is.na(dat$InfDay)])
inc.true <- c()
for(i in 1:100){
if(i %in% dates.true$x){
inc.true[i] <- dates.true$freq[dates.true$x == i]
}else{
inc.true[i] <- 0
}
}
AR.true <- c()
for(j in seq(2,100,7)){
if(j == 100){
AR.true <- AR.true
}else if(j == 93){
# }else if(j == 89){
# AR.true <- c(AR.true, sum(inc.true[j:(j+8)])/dim(dat)[1])
AR.true <- c(AR.true, sum(inc.true[j:(j+7)])/dim(dat)[1])
}else{
# AR.true <- c(AR.true, sum(inc.true[j:(j+6)])/dim(dat)[1])
AR.true <- c(AR.true, sum(inc.true[j:(j+6)])/dim(dat)[1])
}
}
inc.t <- c()
for(j in seq(2,100,7)){
if(j == 100){
inc.t <- inc.t
}else if(j == 93){
inc.t <- c(inc.t, sum(inc.true[j:(j+7)]))
}else{
inc.t <- c(inc.t, sum(inc.true[j:(j+6)]))
}
}
## Observed attack rate
data <- dat[dat$Compliance==1, ]
dates.obs <- plyr::count(data$PosDay[data$PosDay != 'Inf'])
inc.obs <- c()
for(i in 1:100){
if(i %in% dates.obs$x){
inc.obs[i] <- dates.obs$freq[dates.obs$x == i]
}else{
inc.obs[i] <- 0
}
}
AR.obs <- c()
for(j in seq(2,100,7)){
if(j == 100){
AR.obs <- AR.obs
}else if(j == 93){
AR.obs <- c(AR.obs, sum(inc.obs[j:(j+7)])/dim(data)[1])
}else{
AR.obs <- c(AR.obs, sum(inc.obs[j:(j+6)])/dim(data)[1])
}
}
inc.o <- c()
for(j in seq(2,100,7)){
if(j == 100){
inc.o <- inc.o
}else if(j == 93){
inc.o <- c(inc.o, sum(inc.obs[j:(j+7)])*(1/c*100))
}else{
inc.o <- c(inc.o, sum(inc.obs[j:(j+6)])*(1/c*100))
}
}
## Bias in attack rate
AR.bias <- (AR.obs - AR.true) / AR.true
mean.bias <- mean(AR.bias)
## Write output
for(k in 1:14){
write(c(c/100, is, k, AR.bias[k], AR.obs[k], AR.true[k], inc.o[k], inc.t[k]),
file = paste0("~/Sequencing/FINAL/Outbreaker/Simulations/AR_weekly/AR_Compl",c,"_week",k,"_net",is,".txt"), ncolumns = 8, append = F)
}
}
}
for(i in 1:ndatasets){
for(k in 1:14){
input.name = paste0("~/Sequencing/FINAL/Outbreaker/Simulations/AR_weekly/AR_Compl",c,"_week",k,"_net",i,".txt")
if(file.exists(input.name)){
input1 = read.table(file=input.name)
write.table(input1, file=paste0("AR_weekly_Compl",c,"_net_full.csv"), append=T, quote=F, row.names=F, col.names=F, sep=",")
}
}
}
}
i
c
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
=======
pkgbuild::compile_dll()
install.packages("devtools")
install.packages("pkgbuild")
pkgbuild::compile_dll()
Sys.getenv("BINPREF")
roxygen2::roxygenize()
install.packages("rcmdcheck")
pkgbuild::compile_dll()
writeLines(strsplit(Sys.getenv("PATH"), ";")[[1]])
writeLines(strsplit(Sys.getenv("PATH"), ";")[[1]])
pkgbuild::compile_dll()
.Last.error.trace
devtools::install()
pkgbuild::compile_dll()
.Last.error.trace
?example
example(soruce)
example(source)
roxygen2::roxygenize()
roxygen2::roxygenize(load_code = sourceDir)
roxygen2::roxygenize(load_code = sourceDir)
pkgbuild::compile_dll()
library(rstan)
?rstan_create_packge
library(rstantools)
?rstan_create_package
pkgbuild::compile_dll()
pkgbuild::compile_dll()
example(source)
roxygen2::roxygenize()
Sys.getenv("PATH")
Sys.getenv("PATH")
roxygen2::roxygenize()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"',
con = "~/.Renviron")
Sys.which("make")
pkgbuild::compile_dll()
devtools::install_github(“stan-dev/rstantools”, ref = " c3c59fb")
devtools::install_github(“stan-dev/rstantools”, ref = " c3c59fb")
library(rstantools)
?rstan_create_package
Sys.getenv("BINPREF")
Sys.getenv("BINPREF")
Sys.setenv("BINPREF" = C:/Rtools/mingw_64/bin/)
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
Sys.getenv("BINPREF")
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
Sys.getenv("BINPREF")
>>>>>>> 840f3a4f07f4595f95af47df511cfa45b1ce9420
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
Sys.getenv("BINPREF")
Sys.setenv(BINPREF = "C:/rtools40/mingw_64/bin/")
Sys.getenv("BINPREF")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("BINPREF")
Sys.getenv()
Sys.getenv("PATH")
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
install.packages(c("matrixStats", "R.utils", "remotes", "rlang", "roxygen2", "V8"))
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
.Last.error.trace
remotes::install_github("bgoodri/inline")
pkgbuild::compile_dll()
library(inline)
install.packages("inline")
pkgbuild::compile_dll()
devtools::check()
library(rstan)
example(stan_model,package="rstan",run.dontrun=T)
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
sessionInfo()
library(Rccp)
library(Rcpp)
Rcpp::compilerCheck
Rcpp::compilerCheck()
detach("package:Rcpp", unload = TRUE)
sessionInfo()
library(BH)
sessionInfo()
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
pkgbuild::compile_dll()
pkgbuild::compile_dll()
remove.packages("StanHeaders")
file.remove(".RData")
install.packages("StanHeaders")
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
Sys.getenv(PAT)
Sys.getenv("PATH")
Sys.getenv("BINPREF")
Sys.setenv(BINPREF = "C:/Rtools/mingw64/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("BINPREF")
pkgbuild::compile_dll()
sessionInfo()
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("StanHeaders")
sessionInfo()
library(rstan)
install.packages("rstan")
sessionInfo()
library(rstan)
sessionInfo()
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
Sys.getenv("BINPREF")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("BINPREF")
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
Sys.getenv("BINPREF")
# Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
install.packages("~/GitHub/BMABMDR_0.0.0.9000.tar.gz", repos = NULL, type = "source")
devtools::load_all()
roxygen2::roxygenize()
Sys.getenv("BINPREF")
setwd("~/GitHub/")
Sys.getenv("BINPREF")
# Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
install.packages("~/GitHub/BMABMDR_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("~/GitHub/BMABMDR_0.0.0.9000.tar.gz", repos = NULL, type = "source")
Sys.getenv("BINPREF")
?install.packages
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
new_path <- paste("C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/", old_path, sep=";")
new_path
Sys.setenv(PATH = new_path)
Sys.getenv("PATH")
install.packages("~/GitHub/BMABMDR_0.0.0.9000.tar.gz", repos = NULL, type = "source")
Sys.getenv("PATH")
Sys.getenv("BINPREF")
Sys.setenv(PATH = old_path)
Sys.getenv("PATH")
Sys.getenv("BINPREF")
Sys.getenv(PATHµ)
Sys.getenv(PATH)
Sys.getenv("PATH")
install.packages("~/GitHub/BMABMDR_0.0.0.9000.tar.gz", repos = NULL, type = "source")
old_path <- Sys.getenv("PATH")
old_path
old_path <- gsub("C:\\rtools40\\usr\\bin;", "", old_path)
old_path
old_path <- gsub("C:\\rtools40\\usr\\bin;", "", old_path, fixed = T)
old_path
new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path
Sys.setenv(PATH = new_path)
install.packages("~/GitHub/BMABMDR_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("~/GitHub/BMABMDR_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(BMABMDR)
?fun.alpha
?PREP_DATA_LN
rm(list=ls())
library(BMABMDR)
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
<<<<<<< HEAD
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
# devtools::reload()
devtools::build() # build source package
library("rPithon")
pithon.set.default.executable("C:/Python27/python.exe")
pithon.exec("a=1")
destdir <- getwd()
library(RSimpactCyan)
set.seed(12345)
cfg <- list()
cfg["mortality.normal.weibull.scale"]<-106 #From population pyramid for males (Belgium, 1980), http://www.btlas.com/pp/en/belgium/1980/
cfg["mortality.normal.weibull.shape"]<-5 #From population pyramid for males (Belgium, 1980), http://www.btlas.com/pp/en/belgium/1980/
cfg["mortality.normal.weibull.genderdiff"]<-0 #No females in the population
cfg["population.msm"]<-"yes"
cfg["debut.debutage"]<-45 #45 = simulation age, 15 = real age (default)
cfg["population.simtime"]<-45 #stabilization period of 10 years + 1980-2015
cfg["population.nummen"]<-10000 #wordt 10000, even op 100 gezet om te testen
cfg["population.numwomen"]<-0
cfg["population.maxevents"]<-cfg$population.simtime*cfg$population.nummen*4 #If 4 events happen per person per year, something's wrong.
cfg["population.eyecap.fraction"]<-0.2 #aangepast sinds vorige simulatie
cfg["formationmsm.hazard.agegap.baseline"]<- 2.8 #0.1 #aangepast sinds vorige simulatie
cfg["formationmsm.hazard.agegap.meanage"]<- -0.025 #toegevoegd test3
cfg["formationmsm.hazard.agegap.eagerness_sum"]<- 0.1 #toegevoegd test3
cfg["formationmsm.hazard.agegap.gap_agescale"]<-0.025 #toegevoegd test3
cfg["formationmsm.hazard.agegap.numrel_sum"]<- -0.2 # parameter SA Wim
cfg["formationmsm.hazard.agegap.numrel_diff"]<- -0.1 # parameter SA Wim
cfg["formationmsm.hazard.agegap.eagerness_diff"]<- -0.048 #parameter SA Wim
cfg["formationmsm.hazard.agegap.gap_factor"]<- 0 #parameter SA Wim
cfg["hivseed.time"]<-10 #stabilization period of 10 years
cfg["hivseed.type"]<-"amount"
cfg["hivseed.age.min"]<-45 #45 = simulation age, 15 = real age
cfg["hivseed.age.max"]<-80 #80 = simulation age, 50 = real age
cfg["hivseed.gender"]<-"male" #MSM
cfg["hivseed.amount"]<- 100 #wordt 100 #1% MSM with HIV in 1970
cfg["hsv2seed.time"]<-10 #stabilization period of 10 years
cfg["hsv2seed.type"]<-"amount"
cfg["hsv2seed.age.min"]<-45 #45 = simulation age, 15 = real age
cfg["hsv2seed.age.max"]<-80 #80 = simulation age, 50 = real age
cfg["hsv2seed.gender"]<-"male" #MSM
cfg["hsv2seed.amount"]<- 1100 #wordt 1100 #11% men with HSV2 in 1976 (Fleming et al, 1997)
cfg["hivtransmission.param.a"]<- -1.0352239 #see parameters Zambia
cfg["hivtransmission.param.b"]<- -89.339994 #see parameters Zambia
cfg["hivtransmission.param.c"]<- 0.4948478 #see parameters Zambia
cfg["hivtransmission.param.e1"]<- 0.4700036 #log(1.6) # RR=1.6 (Barnabas and Celum, 2012)
cfg["hivtransmission.param.e2"]<- 0.4700036 #log(1.6) # RR=1.6 (Barnabas and Celum, 2012)
cfg["hivtransmission.param.d1"]<- 0 #parameter SA Wim
cfg["hivtransmission.param.d2"]<- 0 #parameter SA Wim
cfg["hsv2transmission.hazard.d"]<- 0.76
cfg["person.hsv2.a.dist.type"]<-"fixed"
cfg["person.hsv2.a.dist.fixed.value"]<- -2.25 #corresponding with transmission rate 10% (Bryson et al.)
cfg["person.eagerness.man.msm.dist.type"]<-"gamma"
cfg["person.eagerness.man.msm.dist.gamma.a"]<- 0.23 #parameters SA Wim
cfg["person.eagerness.man.msm.dist.gamma.b"]<- 45 #parameters SA Wim
cfg["mortality.aids.survtime.C"]<-65 #results in survival time of 10-11 years for AIDS
cfg["mortality.aids.survtime.k"]<- -0.2 #results in survival time of 10-11 years for AIDS
cfg["person.survtime.logoffset.dist.type"]<-"normal"
cfg["person.survtime.logoffset.dist.normal.mu"]<-0
cfg["person.survtime.logoffset.dist.normal.sigma"]<-0.1
cfg["person.vsp.model.logdist2d.dist2d.binormalsymm.mean"]<- 4 #parameter SA Wim
cfg["person.vsp.model.logdist2d.dist2d.binormalsymm.rho"]<- 0.33 #parameter SA Wim
cfg["person.vsp.model.logdist2d.dist2d.binormalsymm.sigma"]<- 1 #parameter SA Wim
cfg["dissolutionmsm.alpha_4"]<- -0.05
cfg["dissolution.alpha_0"]<- -0.52 #parameter SA Wim
# no ART before 1994
cfg["diagnosis.baseline"]<- -1000000
# intervention events
# 1994
iv1<-list()
iv1["time"]=24
iv1["monitoring.cd4.threshold"]<-200
iv1["person.art.accept.threshold.dist.fixed.value"]<-0
# 1996
iv2<-list()
iv2["time"]=26
iv2["monitoring.cd4.threshold"]<-230
iv2["person.art.accept.threshold.dist.fixed.value"]<-0.1
# 1998
iv3<-list()
iv3["time"]=28
iv3["monitoring.cd4.threshold"]<-260
iv3["person.art.accept.threshold.dist.fixed.value"]<-0.2
#2000
iv4<-list()
iv4["time"]=30
iv4["monitoring.cd4.threshold"]<-290
iv4["person.art.accept.threshold.dist.fixed.value"]<-0.3
#2002
iv5<-list()
iv5["time"]=32
iv5["monitoring.cd4.threshold"]<-320
iv5["person.art.accept.threshold.dist.fixed.value"]<-0.4
#2004
iv6<-list()
iv6["time"]=34
iv6["monitoring.cd4.threshold"]<-350
iv6["person.art.accept.threshold.dist.fixed.value"]<-0.5
#2006
iv7<-list()
iv7["time"]=36
iv7["monitoring.cd4.threshold"]<-380
iv7["person.art.accept.threshold.dist.fixed.value"]<-0.6
#2008
iv8<-list()
iv8["time"]=38
iv8["monitoring.cd4.threshold"]<-410
iv8["person.art.accept.threshold.dist.fixed.value"]<-0.7
#2010
iv9<-list()
iv9["time"]=40
iv9["monitoring.cd4.threshold"]<-440
iv9["person.art.accept.threshold.dist.fixed.value"]<-0.8
#2012
iv10<-list()
iv10["time"]=42
iv10["monitoring.cd4.threshold"]<-470
iv10["person.art.accept.threshold.dist.fixed.value"]<-0.9
#2014
iv11<-list()
iv11["time"]=44
iv11["monitoring.cd4.threshold"]<-500
iv11["person.art.accept.threshold.dist.fixed.value"]<-1
iv <-list(iv1,iv2,iv3,iv4,iv5,iv6,iv7,iv8,iv9,iv10,iv11)
res <- simpact.run(cfg, file.path(destdir),intervention = iv)
?simpact.run
=======
library(BMADR)
library(BMABMDR)
?devtools::install
devtools::install
devtools::install()
getwd()
library(readr)
immunotoxicityData <- read_table2("C:/Users/lucp9544/Desktop/immunotoxicityData.txt")
View(immunotoxicityData)
?usethis::use_data
usethis::use_data(immunotoxicityData, name = 'immunotoxicityData')
?use_data_raw
usethis::use_data_raw(name = 'immunotoxicityData')
usethis::use_data(immunotoxicityData, overwrite = TRUE)
rm(list = ls())
load("C:/Users/lucp9544/Desktop/PhD/EFSA Project/BMABMDR/data/immunotoxicityData.rda")
head(immunotoxicityData)
1.34-2*0.36
1.34+2*0.36
10^-0.6
library(BMABMDR)
dim(immunotoxicityData)
names(immunotoxicityData)
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
remove.packages("cli", lib="~/R/win-library/4.0")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(BMABMDR)
?PREP_DATA_N
remove.packages("BMABMDR", lib="~/R/win-library/4.0")
library(BMABMDR)
?immunotoxicityData
?PREP_DATA_N
?PREP_DATA_N
detach(BMABMDR)
library(BMABMDR)
detach("package:BMABMDR", unload = TRUE)
library(readr)
LearningMemory <- read_table2("C:/Users/lucp9544/Desktop/LearningMemory.txt")
View(LearningMemory)
usethis::use_data(LearningMemory, overwrite = TRUE)
colnames(LearningMemory)
>>>>>>> 840f3a4f07f4595f95af47df511cfa45b1ce9420
