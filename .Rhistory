litter = simulated_data$litter)
plot(data.input$dose, data.input$response)
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
data_LN <- PREP_DATA_LN_C(data.input, q, prior.d = 'N11')
# preliminary tests
data_N$shapiro.msg; data_N$shapiro.p
data_LN$shapiro.msg; data_LN$shapiro.p
data_N$bartlett.msg; data_N$bartlett.p
data_LN$bartlett.msg; data_LN$bartlett.p
prior.weights = c(rep(1,4), rep(0,12))
FLBMD <- full.laplace_MAc(data_N, data_LN, prior.weights)
dose = c(0, 5, 15, 50, 100)
y = c(0, 4, 6, 5, 12)
n = c(20, 20, 20, 20, 20)
summ.data = data.frame(x = dose, y = y, n = n)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = c(rep(1,4), rep(1,4))
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_Q = PREP_DATA_QA(summ.data,
sumstats = T,
q = q)
FLBMD_Q = full.laplaceQ_MA(data_Q,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec)
warnings()
FLBMD_Q = full.laplaceQ_MA(data_Q,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec)
# plot output
pFLBMD_Q = plot.BMADRQ(FLBMD_Q, weight_type = "LP", include_data = T, all = F, title = '')
# plot prior vs posterior
plot_priorQ(FLBMD_Q, data_Q$data, "E4_Q")
clusterdata <- data.frame(
dose = c(rep(c(0, 0.2, 0.6, 6, 60, 120), c(26, 22, 24, 26, 19, 16))),
y = c(1,1,0,0,0,0,0,2,1,3,0,0,0,0,0,0, 0, 1,0,0,0,0,
2,0,1,0,3, 0,3,0,1,0,1,1,0,4,0,0,1, 0,  0,  0,  0,  2,  0,  0,  0,
0,  0,  0,  4,  0,  4,  0,  1,  0,  0,  0,  0,1,  3, 1,  0,  0,  5,
0,  0,  1,  5,  0,  1,  0,  0,  6,  0,  1,  1,  0, 2,  0,  0,  0,  1,
11,  0,  5,  5,  0,  3,  0,  0,  3,  0,  0,  0,  2,  5,  3,  6,  1,  1, 10,  3,
4,  2,  3,  2,  2,  2,  9,  3,  2,  1,  0,  1,  3,  2, 3,  3,  7,  0,
5,  3,  2,  6,  3,  1,  2,  6,  3,  3, 2,  2),
n = c(12,12,12,13,1, 13,10,14, 12, 12, 14, 13, 12, 11, 15, 14, 11, 11, 12, 11, 14, 12, 13, 13, 14, 13,
8, 14, 10, 13, 14, 12, 10, 10, 11, 10, 12, 12, 14, 14,  9,  8, 12,  9, 13,  9, 13, 12, 12, 13, 10,
13,  9, 11,  9, 10, 12, 14,  5,  9,  9,  8,  7, 13, 14, 12, 13, 15, 11, 11,  7, 14,  8,  9, 12,
6,  9,  9, 13, 10,  4,  8, 10, 11,  7, 10, 10,  7, 12,  7, 11, 14,  4,  7,  6,  2,  5,  9,  6,  1,
1, 10,  3,  4,  3,  5,  2,  4,  2,  9,  3,  6,  1,  4,  1, 10,  2, 3,  3,  7,  1,  5,  3,  2,  6,
8,  1,  2,  6,  3,  3,  2, 2),
liter = c(1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1)
)
clusterdataQ <- PREP_DATA_QA(data = clusterdata, sumstats = TRUE,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = TRUE)
pw <- c(rep(1, 2), rep(0, 6))
### Laplace Approximation
testbb_laplace <- full.laplaceQ_MA(data.Q = clusterdataQ, prior.weights = pw)
data.test <- read.csv('./data/test_data.csv', header = T, sep = ';')
summ.data <- data.frame(
x = data.test$Dose,
y = data.test$Mean,
s = data.test$SD,
n = data.test$N,
cov = data.test$group
)
q = 0.2
prior.weights = c(rep(1,4), rep(1,12))
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = T, extended.value = 3,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
class(FLBMD$MA)
warnings()
basic.plot(FLBMD, 'E4_N', increasing = F)
x=c(2,2,2)
if(x==2 & length(x)==3)x=3
x
x=2
x=c(2,2,2)
if(x[1]==2 & length(x)==3)x=3
if(x[1]==2 && length(x)==3)x=3
x
x=c(2,2,2)
if(x[1]==2 && length(x)==3)x=3
x
x=c(2,2,2)
if(x[1]==2 & length(x)==3)x=3
x
library(BMABMDR)
packageVersion('BMABMDR')
library(mc2d)
setwd('G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/OFT')
full_data <- read.csv('data_test_080823.csv', header = T, sep = ';')
dim(full_data); head(full_data)
str(full_data)
full_data$Dose <- as.numeric(gsub(",",".",full_data$Exp_conc))
full_data$Resp <- as.numeric(gsub(",",".",full_data$Av_Endp))
full_data$SD <- as.numeric(gsub(",",".",full_data$Stdev_Endp))
head(full_data)
table(full_data$Study.ID)
## Sampling specification
ndr = 30000
nrch = 3; nriter = 3000; wu = 1000; dl = 0.8; trd = 10; sd = 123
pvec = c(0.05,0.5,0.95)
id <- 4
data <- full_data[full_data$Study.ID == id, ]
summ.data <- data.frame(x = data$Dose,
y = data$Resp,
s = data$SD,
n = data$Num_animals_total)
q = 0.05
prior.weights = rep(1, 16)
par(mfrow=c(1,1))
plot(summ.data$x, summ.data$y)
data_N <- PREP_DATA_N(data = summ.data, sumstats = TRUE, sd = TRUE, extended = TRUE, q = q, prior.d = 'N11')
data_LN <- PREP_DATA_LN(data = summ.data, sumstats = TRUE, sd = TRUE, extended = TRUE, q = q, prior.d = 'N11')
SBMD <- sampling_MA(data.N = data_N, data.LN = data_LN, prior.weights = prior.weights, ndraws = ndr, nrchains = nrch, nriterations = nriter,
warmup = wu, delta = dl, treedepth = trd, seed = sd, pvec = pvec)
warnings()
SBMD$MA_bridge_sampling
SBMD$convergence
pSBMD <- plot.BMADR(SBMD, type = 'increasing', weight_type = 'BS', include_data = TRUE, all = FALSE, log = FALSE, title = '', conv = FALSE)
pSBMD$model_fit
pSBMD$MA_fit
full_post_bmd <- SBMD$MA_post_full_bs
full_post_bkg <- SBMD$bkg_post_bs
full_post_maxy <- SBMD$maxy_post_bs
par(mfrow=c(2,3))
hist(full_post_bmd)
hist(full_post_bkg)
hist(full_post_maxy)
qnr <- 1000
q.y.bmd <- quantile(SBMD$MA_post_full_bs, seq(0,1,1/qnr))
qdat_l <- q.y.bmd[1:qnr]
qdat_r <- q.y.bmd[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_bmd <- qdat_m
hist(q_post_bmd)
q.y.bkg <- quantile(SBMD$bkg_post_bs, seq(0,1,1/qnr))
qdat_l <- q.y.bkg[1:qnr]
qdat_r <- q.y.bkg[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_bkg <- qdat_m
hist(q_post_bkg)
q.y.maxy <- quantile(SBMD$maxy_post_bs, seq(0,1,1/qnr))
qdat_l <- q.y.maxy[1:qnr]
qdat_r <- q.y.maxy[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_maxy <- qdat_m
hist(q_post_maxy)
getmode <- function(v){
dx <- density(v)
dx$x[dx$y == max(dx$y)]
}
mod_pert <- rstan::stan_model("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/PERT_MODEL.stan")
data_quantiles <- list(N = length(q_post_bmd), y = q_post_bmd, min_obs = min(q_post_bmd), max_obs = max(q_post_bmd))
getmode(q_post_bmd)
list(shape = 1, mode = getmode(q_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc <- rstan::sampling(mod_pert, data = data_quantiles, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc))
est.shape <- median(as.matrix(fit.mcmc)[,1])
est.mode <- median(as.matrix(fit.mcmc)[,2])
est.shape
est.mode
par(mfrow = c(2,2))
hist(full_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
curve(dpert(x, min = min(q_post_bmd), mode = est.mode, max = max(q_post_bmd), shape = est.shape),
col = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2, lty = 1)
# hist(full_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
hist(q_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
curve(dpert(x, min = min(q_post_bmd), mode = est.mode, max = max(q_post_bmd), shape = est.shape),
col = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2, lty = 1)
par(mfrow = c(2,2))
# hist(full_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
hist(q_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
curve(dpert(x, min = min(q_post_bmd), mode = est.mode, max = max(q_post_bmd), shape = est.shape),
col = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2, lty = 1)
## Doesn't fit so good -> full posterior?
data_full_post <- list(N = length(full_post_bmd), y = full_post_bmd, min_obs = min(full_post_bmd), max_obs = max(full_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(full_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fitmcmc.full <- rstan::sampling(mod_pert, data = data_full_post, init = init_ll, chains = 3)
head(as.matrix(fitmcmc.full))
est.shape.full = median(as.matrix(fitmcmc.full)[,1])
est.mode.full = median(as.matrix(fitmcmc.full)[,2])
est.mode.full
curve(dpert(x, min = min(full_post_bmd), mode = est.mode.full, max = max(full_post_bmd), shape = est.shape.full),
col = 3, lty = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2)
legend('topright', c('1000 quantiles','full posterior'), lwd = c(2,2), lty = c(1,2), col = c(2,3))
data_quantiles_bkg <- list(N = length(q_post_bkg), y = q_post_bkg, min_obs = min(q_post_bkg), max_obs = max(q_post_bkg))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_bkg))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc.bkg <- rstan::sampling(mod_pert, data = data_quantiles_bkg, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.bkg))
est.shape.bkg <- median(as.matrix(fit.mcmc.bkg)[,1])
est.mode.bkg <- median(as.matrix(fit.mcmc.bkg)[,2])
hist(full_post_bkg, prob = T, breaks = 50, main = "", xlab = "Min. response")
curve(dpert(x, min = min(q_post_bkg), mode = est.mode.bkg, max = max(q_post_bkg), shape = est.shape.bkg),
col = 2, from = min(full_post_bkg), to = max(full_post_bkg), add = T, lwd = 2, lty = 1)
data_quantiles_maxy <- list(N = length(q_post_maxy), y = q_post_maxy, min_obs = min(q_post_maxy), max_obs = max(q_post_maxy))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_maxy))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc.maxy <- rstan::sampling(mod_pert, data = data_quantiles_maxy, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.maxy))
est.shape.maxy <- median(as.matrix(fit.mcmc.maxy)[,1])
est.mode.maxy <- median(as.matrix(fit.mcmc.maxy)[,2])
hist(full_post_maxy, prob = T, breaks = 50, main = "", xlab = 'Max. response')
curve(dpert(x, min = min(q_post_maxy), mode = est.mode.maxy, max = max(q_post_maxy), shape = est.shape.maxy),
col = 2, from = min(full_post_maxy), to = max(full_post_maxy), add = T, lwd = 2, lty = 1)
id <- 3
data <- full_data[full_data$Study.ID == id, ]
summ.data <- data.frame(x = data$Dose,
y = data$Resp,
s = data$SD,
n = data$Num_animals_total)
q = 0.05
prior.weights = rep(1, 16)
par(mfrow=c(1,1))
plot(summ.data$x, summ.data$y)
data_N <- PREP_DATA_N(data = summ.data, sumstats = TRUE, sd = TRUE, extended = TRUE, q = q, prior.d = 'N11')
data_LN <- PREP_DATA_LN(data = summ.data, sumstats = TRUE, sd = TRUE, extended = TRUE, q = q, prior.d = 'N11')
SBMD <- sampling_MA(data.N = data_N, data.LN = data_LN, prior.weights = prior.weights, ndraws = ndr, nrchains = nrch, nriterations = nriter,
warmup = wu, delta = dl, treedepth = trd, seed = sd, pvec = pvec)
SBMD$MA_bridge_sampling
SBMD$convergence
pSBMD <- plot.BMADR(SBMD, type = 'increasing', weight_type = 'BS', include_data = TRUE, all = FALSE, log = FALSE, title = '', conv = FALSE)
pSBMD$model_fit
pSBMD$MA_fit
full_post_bmd <- SBMD$MA_post_full_bs
full_post_bkg <- SBMD$bkg_post_bs
full_post_maxy <- SBMD$maxy_post_bs
par(mfrow=c(2,3))
hist(full_post_bmd)
hist(full_post_bkg)
hist(full_post_maxy)
qnr <- 1000
q.y.bmd <- quantile(SBMD$MA_post_full_bs, seq(0,1,1/qnr))
qdat_l <- q.y.bmd[1:qnr]
qdat_r <- q.y.bmd[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_bmd <- qdat_m
hist(q_post_bmd)
q.y.bkg <- quantile(SBMD$bkg_post_bs, seq(0,1,1/qnr))
qdat_l <- q.y.bkg[1:qnr]
qdat_r <- q.y.bkg[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_bkg <- qdat_m
hist(q_post_bkg)
q.y.maxy <- quantile(SBMD$maxy_post_bs, seq(0,1,1/qnr))
qdat_l <- q.y.maxy[1:qnr]
qdat_r <- q.y.maxy[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_maxy <- qdat_m
hist(q_post_maxy)
data_quantiles <- list(N = length(q_post_bmd), y = q_post_bmd, min_obs = min(q_post_bmd), max_obs = max(q_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc <- rstan::sampling(mod_pert, data = data_quantiles, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc))
est.shape <- median(as.matrix(fit.mcmc)[,1])
est.mode <- median(as.matrix(fit.mcmc)[,2])
par(mfrow = c(2,2))
# hist(full_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
hist(q_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
curve(dpert(x, min = min(q_post_bmd), mode = est.mode, max = max(q_post_bmd), shape = est.shape),
col = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2, lty = 1)
## Doesn't fit so good -> full posterior?
data_full_post <- list(N = length(full_post_bmd), y = full_post_bmd, min_obs = min(full_post_bmd), max_obs = max(full_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(full_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fitmcmc.full <- rstan::sampling(mod_pert, data = data_full_post, init = init_ll, chains = 3)
head(as.matrix(fitmcmc.full))
est.shape.full = median(as.matrix(fitmcmc.full)[,1])
est.mode.full = median(as.matrix(fitmcmc.full)[,2])
curve(dpert(x, min = min(full_post_bmd), mode = est.mode.full, max = max(full_post_bmd), shape = est.shape.full),
col = 3, lty = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2)
legend('topright', c('1000 quantiles','full posterior'), lwd = c(2,2), lty = c(1,2), col = c(2,3))
data_quantiles_bkg <- list(N = length(q_post_bkg), y = q_post_bkg, min_obs = min(q_post_bkg), max_obs = max(q_post_bkg))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_bkg))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc.bkg <- rstan::sampling(mod_pert, data = data_quantiles_bkg, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.bkg))
est.shape.bkg <- median(as.matrix(fit.mcmc.bkg)[,1])
est.mode.bkg <- median(as.matrix(fit.mcmc.bkg)[,2])
hist(full_post_bkg, prob = T, breaks = 50, main = "", xlab = "Min. response")
curve(dpert(x, min = min(q_post_bkg), mode = est.mode.bkg, max = max(q_post_bkg), shape = est.shape.bkg),
col = 2, from = min(full_post_bkg), to = max(full_post_bkg), add = T, lwd = 2, lty = 1)
##################################
### MAXY                       ###
data_quantiles_maxy <- list(N = length(q_post_maxy), y = q_post_maxy, min_obs = min(q_post_maxy), max_obs = max(q_post_maxy))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_maxy))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc.maxy <- rstan::sampling(mod_pert, data = data_quantiles_maxy, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.maxy))
est.shape.maxy <- median(as.matrix(fit.mcmc.maxy)[,1])
est.mode.maxy <- median(as.matrix(fit.mcmc.maxy)[,2])
hist(full_post_maxy, prob = T, breaks = 50, main = "", xlab = 'Max. response')
curve(dpert(x, min = min(q_post_maxy), mode = est.mode.maxy, max = max(q_post_maxy), shape = est.shape.maxy),
col = 2, from = min(full_post_maxy), to = max(full_post_maxy), add = T, lwd = 2, lty = 1)
39762973/1357033
337/1135
mod_pert <- rstan::stan_model("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/PERT_MODEL.stan")
data_quantiles <- list(N = length(q_post_bmd), y = q_post_bmd, min_obs = min(q_post_bmd), max_obs = max(q_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc <- rstan::sampling(mod_pert, data = data_quantiles, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc))
est.shape <- median(as.matrix(fit.mcmc)[,1])
est.mode <- median(as.matrix(fit.mcmc)[,2])
par(mfrow = c(2,2))
# hist(full_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
hist(q_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
curve(dpert(x, min = min(q_post_bmd), mode = est.mode, max = max(q_post_bmd), shape = est.shape),
col = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2, lty = 1)
mod_pert <- rstan::stan_model("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/PERT_MODEL.stan")
setwd("G:\\My Drive\\UHasselt\\Consultancy\\VLIR-project\\Vlir 2022\\Data instellingen")
getwd()
library(xlsx)
setwd("G:\\My Drive\\UHasselt\\Consultancy\\VLIR-project\\Vlir 2022\\VRAGEN/")
data <- read.xlsx('data_UG_2022.xls', header = T)
data <- read.xlsx('data_UG_2022.xls', sheetName='data_UG_2022', header = T)
head(data)
?read.xlsx
data <- read.xlsx('data_UG_2022.xls', sheetName="data_UG_2022", header = T)
data <- read.csv('data_UG_2022.csv', header = T, sep = ',')
head(data)
data <- data[data$Databron=="UG",]
dim(data)
summary(data$Bezet)
data$Volg[duplicated(data$Volg),]
data$Volg[duplicated(data$Volg)]
,
data[data$Volg=='eb9fd35a-a0',]
data$Volg[duplicated(data$Volg) & data$Bezet==100]
length(data$Volg[duplicated(data$Volg) & data$Bezet==100])
data[data$Volg=='0a0e0a61-b7',]
data[data$Volg=='8678f8f7-f9',]
data_dup <- data[duplicated(data$Volg) & data$Bezet==100,]
dim(data_dup)
length(unique(data_dup$Volg))
head(data_dup)
dim(data[!duplicated(data$Volg), ])
dim(data[duplicated(data$Volg), ])
data_dup <- data[duplicated(data$Volg), ]
length(unique(data_dup$Volg))
length(unique(data_dup$Volg[data_dup$Bezet==100]))
# data_dup <- data[duplicated(data$Volg) & data$Bezet==100,]
dim(data_dup)
length(unique(data_dup$Volg))
head(data_dup)
bezet_all <- c()
k <- 1
for(i in unique(data_dup$Volg)){
bezet_all[k] <- sum(data_dup$Bezet[data$Volg == i])
k <- k + 1
}
summary(bezet_all)
summary(data_dup$Bezet)
bezet_all
unique(data_dup$Volg)
length(unique(data_dup$Volg))
?duplicated
duplicated(data$Volg)
which(duplicated(data$Volg))
dup_volgs <- data$Volg[duplicated(data$Volg)]
dup_volgs
data_dup <- data[data$Volg %in% dup_volgs, ]
dim(data_dup)
data <- read.csv('data_UG_2022.csv', header = T, sep = ',')
head(data)
data <- data[data$Databron=="UG",]
dim(data)
summary(data$Bezet)
dim(data[!duplicated(data$Volg), ])
dim(data[duplicated(data$Volg), ])
length(data$Volg[duplicated(data$Volg) & data$Bezet==100])
data[data$Volg=='8678f8f7-f9',]
dup_volgs <- data$Volg[duplicated(data$Volg)]
data_dup <- data[data$Volg %in% dup_volgs, ]
dim(data_dup)
length(unique(data_dup$Volg[data_dup$Bezet==100]))
# data_dup <- data[duplicated(data$Volg) & data$Bezet==100,]
dim(data_dup)
length(unique(data_dup$Volg))
length(unique(data_dup$Volg[data_dup$Bezet==100]))
length(unique(data_dup$Volg))
head(data_dup)
bezet_all <- c()
k <- 1
for(i in unique(data_dup$Volg)){
bezet_all[k] <- sum(data_dup$Bezet[data$Volg == i])
k <- k + 1
}
summary(bezet_all)
unique(data_dup$Volg)
bezet_all
unique(data_dup$Volg)[69]
data_dup[data_dup$Volg=='5ae1fa21-96',]
sum(data_dup$Bezet[data$Volg == i])
data_dup$Bezet[data$Volg == i]
bezet_all <- c()
k <- 1
for(i in unique(data_dup$Volg)){
bezet_all[k] <- sum(data_dup$Bezet[data_dup$Volg == i])
k <- k + 1
}
summary(bezet_all)
sum(bezet_all>100)
sum(bezet_all[bezet_all>100])
sum(bezet_all[bezet_all>100])/100
sum(bezet_all[bezet_all>100])/100 - 157
7515.26-7480.47
library(pkgbuild)
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools43/mingw64/bin/")
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
Sys.getenv("PATH")
## Compile package and generate the documentation
rstan_config() # recompile stan models
# example(source)
# try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# # roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
Sys.getenv("PATH")
#worked with R 4.1.x:
new_path <- paste(old_path, "C:\\rtools43\\mingw32\\bin;C:\\rtools43\\mingw64\\bin", sep=";")
old_path <- Sys.getenv("PATH")
new_path <- gsub('rtools40', 'rtools43', old_path)
#worked with R 4.1.x:
new_path <- paste(old_path, "C:\\rtools43\\mingw32\\bin;C:\\rtools43\\mingw64\\bin", sep=";")
Sys.setenv(PATH = new_path)
Sys.getenv("PATH")
# example(source)
# try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# # roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
.Last.error
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
old_path
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
# example(source)
# try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# # roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
?install
devtools::install()
warnings()
devtools::build() # build source package
