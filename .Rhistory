theme(legend.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = seq(as.Date('2020-10-01'),as.Date('2021-03-19'), 14))
pNetAll
?vis_epicontacts
pNetAll <- vis_temporal_static(cons_tree,
x_axis = 't_inf_est',
network_shape = 'rectangle',
node_color = 'child',
edge_linetype = 'observed',
# edge_color = 'school',
# edge_alpha = 'support',
root_order = 't_inf_est',
# node_order = 't_inf_est',
position_dodge = T,
rank_contact = 'from',
unlinked_pos = 'top',
# igraph_type = 'fr',
# lineend = 'square',
# annot = F,
arrow_size = 0,
# editor = T,
edge_width = 1,
node_size = 10,
col_pal = c('Adult' = 'grey', 'Child' = 'white','Household' = 'grey', 'School' = 'black')
# x_axis = 't_inf_est',
# network_shape = 'rectangle',
# node_color = 'child',
# col_pal = c('Adult' = 'grey', 'Child' = 'white'),
# edge_linetype = 'observed',
# arrow_size = 0.1,
# node_size = 10
) + xlab('Estimated time of infection') + ylab('') +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = seq(as.Date('2020-10-01'),as.Date('2021-03-19'), 14))
pNetAll
jpeg('network_all_0606.jpg',  width = 120, height = 70, units = 'cm', res = 300)
pNetAll
dev.off()
class(cons_tree$linelist$t_inf_est)
length(cons_tree$linelist$t_inf_est)
length(unique(cons_tree$linelist$t_inf_est))
cons_tree
pNetAll <- vis_temporal_static(cons_tree,
x_axis = 't_inf_est',
network_shape = 'rectangle',
node_color = 'child',
edge_linetype = 'observed',
node_label = 'id',
# edge_color = 'school',
# edge_alpha = 'support',
root_order = 't_inf_est',
# node_order = 't_inf_est',
position_dodge = T,
rank_contact = 'from',
unlinked_pos = 'top',
# igraph_type = 'fr',
# lineend = 'square',
# annot = F,
arrow_size = 0,
# editor = T,
edge_width = 1,
node_size = 10,
col_pal = c('Adult' = 'grey', 'Child' = 'white','Household' = 'grey', 'School' = 'black')
# x_axis = 't_inf_est',
# network_shape = 'rectangle',
# node_color = 'child',
# col_pal = c('Adult' = 'grey', 'Child' = 'white'),
# edge_linetype = 'observed',
# arrow_size = 0.1,
# node_size = 10
) + xlab('Estimated time of infection') + ylab('') +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = seq(as.Date('2020-10-01'),as.Date('2021-03-19'), 14))
pNetAll
pNetAll <- vis_temporal_static(cons_tree,
x_axis = 't_inf_est',
network_shape = 'rectangle',
node_color = 'child',
edge_linetype = 'observed',
node_label = 'id',
# edge_color = 'school',
# edge_alpha = 'support',
root_order = 't_inf_est',
# node_order = 't_inf_est',
position_dodge = T,
rank_contact = 'from',
unlinked_pos = 'top',
# igraph_type = 'fr',
# lineend = 'square',
# annot = F,
arrow_size = 0,
# editor = T,
edge_width = 1,
node_size = 10,
node_label_size = 5,
col_pal = c('Adult' = 'grey', 'Child' = 'white','Household' = 'grey', 'School' = 'black')
# x_axis = 't_inf_est',
# network_shape = 'rectangle',
# node_color = 'child',
# col_pal = c('Adult' = 'grey', 'Child' = 'white'),
# edge_linetype = 'observed',
# arrow_size = 0.1,
# node_size = 10
) + xlab('Estimated time of infection') + ylab('') +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = seq(as.Date('2020-10-01'),as.Date('2021-03-19'), 14))
pNetAll
pNetAll <- vis_temporal_static(cons_tree,
x_axis = 't_inf_est',
network_shape = 'rectangle',
node_color = 'child',
edge_linetype = 'observed',
node_label = 'id',
# edge_color = 'school',
# edge_alpha = 'support',
root_order = 't_inf_est',
# node_order = 't_inf_est',
position_dodge = T,
rank_contact = 'from',
unlinked_pos = 'top',
# igraph_type = 'fr',
# lineend = 'square',
# annot = F,
arrow_size = 0,
# editor = T,
edge_width = 1,
node_size = 10,
font_size = 5,
col_pal = c('Adult' = 'grey', 'Child' = 'white','Household' = 'grey', 'School' = 'black')
# x_axis = 't_inf_est',
# network_shape = 'rectangle',
# node_color = 'child',
# col_pal = c('Adult' = 'grey', 'Child' = 'white'),
# edge_linetype = 'observed',
# arrow_size = 0.1,
# node_size = 10
) + xlab('Estimated time of infection') + ylab('') +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = seq(as.Date('2020-10-01'),as.Date('2021-03-19'), 14))
pNetAll
pNetAll <- vis_temporal_static(cons_tree,
x_axis = 't_inf_est',
network_shape = 'rectangle',
node_color = 'child',
edge_linetype = 'observed',
node_label = 'id',
# edge_color = 'school',
# edge_alpha = 'support',
root_order = 't_inf_est',
# node_order = 't_inf_est',
position_dodge = T,
rank_contact = 'from',
unlinked_pos = 'top',
# igraph_type = 'fr',
# lineend = 'square',
# annot = F,
arrow_size = 0,
# editor = T,
edge_width = 1,
node_size = 10,
font_size = 15,
col_pal = c('Adult' = 'grey', 'Child' = 'white','Household' = 'grey', 'School' = 'black')
# x_axis = 't_inf_est',
# network_shape = 'rectangle',
# node_color = 'child',
# col_pal = c('Adult' = 'grey', 'Child' = 'white'),
# edge_linetype = 'observed',
# arrow_size = 0.1,
# node_size = 10
) + xlab('Estimated time of infection') + ylab('') +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = seq(as.Date('2020-10-01'),as.Date('2021-03-19'), 14))
pNetAll
jpeg('network_all_0606.jpg',  width = 120, height = 70, units = 'cm', res = 300)
pNetAll
dev.off()
?vis_temporal_static
pNetAll <- vis_temporal_static(cons_tree,
type = 'ttree',
x_axis = 't_inf_est',
network_shape = 'rectangle',
node_color = 'child',
edge_linetype = 'observed',
node_label = 'id',
# edge_color = 'school',
# edge_alpha = 'support',
root_order = 't_inf_est',
# node_order = 't_inf_est',
position_dodge = T,
rank_contact = 'from',
unlinked_pos = 'top',
# igraph_type = 'fr',
# lineend = 'square',
# annot = F,
arrow_size = 0,
# editor = T,
edge_width = 1,
node_size = 10,
# font_size = 15,
col_pal = c('Adult' = 'grey', 'Child' = 'white','Household' = 'grey', 'School' = 'black')
# x_axis = 't_inf_est',
# network_shape = 'rectangle',
# node_color = 'child',
# col_pal = c('Adult' = 'grey', 'Child' = 'white'),
# edge_linetype = 'observed',
# arrow_size = 0.1,
# node_size = 10
) + xlab('Estimated time of infection') + ylab('') +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = seq(as.Date('2020-10-01'),as.Date('2021-03-19'), 14))
pNetAll
jpeg('network_all_0606.jpg',  width = 120, height = 70, units = 'cm', res = 300)
pNetAll
dev.off()
pNetAll <- vis_temporal_static(cons_tree,
type = 'ttree',
x_axis = 't_inf_est',
network_shape = 'rectangle',
node_color = 'child',
edge_linetype = 'observed',
node_label = 'id',
edge_color = 'school',
# edge_alpha = 'support',
root_order = 't_inf_est',
# node_order = 't_inf_est',
position_dodge = T,
rank_contact = 'from',
unlinked_pos = 'top',
# igraph_type = 'fr',
# lineend = 'square',
# annot = F,
arrow_size = 0,
# editor = T,
edge_width = 1,
node_size = 20,
# font_size = 15,
col_pal = c('Adult' = 'grey', 'Child' = 'white','Household' = 'grey', 'School' = 'black')
# x_axis = 't_inf_est',
# network_shape = 'rectangle',
# node_color = 'child',
# col_pal = c('Adult' = 'grey', 'Child' = 'white'),
# edge_linetype = 'observed',
# arrow_size = 0.1,
# node_size = 10
) + xlab('Estimated time of infection') + ylab('') +
theme(legend.title = element_blank()) +
theme(legend.text = element_text(size = 20)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.title = element_text(size = 20)) +
scale_x_continuous(breaks = seq(as.Date('2020-10-01'),as.Date('2021-03-19'), 14))
pNetAll
jpeg('network_all_0606.jpg',  width = 120, height = 70, units = 'cm', res = 300)
pNetAll
dev.off()
jpeg('network_all_0606.jpg',  width = 150, height = 100, units = 'cm', res = 300)
pNetAll
dev.off()
setwd('~/Sequencing/FINAL/Outbreaker/Simulations/')
ndatasets = 100
for(c in c(25,50,75,100)){
for(is in 1:ndatasets){
datID <- paste0('C:/Users/lucp9385/Documents/Sequencing/FINAL/Outbreaker/Simulations/Sims/2-2.5/CeBase/Compl',c,'/InfNetw_Sim',is,'.csv')
if(file.exists(datID)){
dat <- read.csv(datID, header = T)
dat <- dat[, -1]
## True attack rate
dat$Case <- ifelse(!is.na(dat$InfectionTime), 1, 0)
dat$InfDay <- floor(dat$InfectionTime) + 1
dat$PosDay <- floor(dat$DayPosTest) + 1
## Weekly true attack rate
dates.true <- plyr::count(dat$InfDay[!is.na(dat$InfDay)])
inc.true <- c()
for(i in 1:100){
if(i %in% dates.true$x){
inc.true[i] <- dates.true$freq[dates.true$x == i]
}else{
inc.true[i] <- 0
}
}
AR.true <- c()
for(j in seq(2,100,7)){
if(j == 100){
AR.true <- AR.true
}else if(j == 93){
# }else if(j == 89){
# AR.true <- c(AR.true, sum(inc.true[j:(j+8)])/dim(dat)[1])
AR.true <- c(AR.true, sum(inc.true[j:(j+7)])/dim(dat)[1])
}else{
# AR.true <- c(AR.true, sum(inc.true[j:(j+6)])/dim(dat)[1])
AR.true <- c(AR.true, sum(inc.true[j:(j+6)])/dim(dat)[1])
}
}
inc.t <- c()
for(j in seq(2,100,7)){
if(j == 100){
inc.t <- inc.t
}else if(j == 93){
inc.t <- c(inc.t, sum(inc.true[j:(j+7)]))
}else{
inc.t <- c(inc.t, sum(inc.true[j:(j+6)]))
}
}
## Observed attack rate
data <- dat[dat$Compliance==1, ]
dates.obs <- plyr::count(data$PosDay[data$PosDay != 'Inf'])
inc.obs <- c()
for(i in 1:100){
if(i %in% dates.obs$x){
inc.obs[i] <- dates.obs$freq[dates.obs$x == i]
}else{
inc.obs[i] <- 0
}
}
AR.obs <- c()
for(j in seq(2,100,7)){
if(j == 100){
AR.obs <- AR.obs
}else if(j == 93){
AR.obs <- c(AR.obs, sum(inc.obs[j:(j+7)])/dim(data)[1])
}else{
AR.obs <- c(AR.obs, sum(inc.obs[j:(j+6)])/dim(data)[1])
}
}
inc.o <- c()
for(j in seq(2,100,7)){
if(j == 100){
inc.o <- inc.o
}else if(j == 93){
inc.o <- c(inc.o, sum(inc.obs[j:(j+7)])*(1/c*100))
}else{
inc.o <- c(inc.o, sum(inc.obs[j:(j+6)])*(1/c*100))
}
}
## Bias in attack rate
AR.bias <- (AR.obs - AR.true) / AR.true
mean.bias <- mean(AR.bias)
## Write output
for(k in 1:14){
write(c(c/100, is, k, AR.bias[k], AR.obs[k], AR.true[k], inc.o[k], inc.t[k]),
file = paste0("~/Sequencing/FINAL/Outbreaker/Simulations/AR_weekly/AR_Compl",c,"_week",k,"_net",is,".txt"), ncolumns = 8, append = F)
}
}
}
for(i in 1:ndatasets){
for(k in 1:14){
input.name = paste0("~/Sequencing/FINAL/Outbreaker/Simulations/AR_weekly/AR_Compl",c,"_week",k,"_net",i,".txt")
if(file.exists(input.name)){
input1 = read.table(file=input.name)
write.table(input1, file=paste0("AR_weekly_Compl",c,"_net_full.csv"), append=T, quote=F, row.names=F, col.names=F, sep=",")
}
}
}
}
i
c
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
rm(list=ls())
# install package from zip file
install.packages("~/GitHub/BMABMDR_0.0.0.9014.tar.gz", repos = NULL, type = "source")
library(BMABMDR)
library(gamlss)
## available models?
get_models('continuous')
get_models('quantal')
dose = c(0,6.25,12.5,25,50,100)
mean = c(10.87143,10.16669,10.81050,10.41179,12.38305,18.47681)
sd = c(1.804554,1.805939,3.858265,1.626007,2.045695,2.322449)
n = rep(10,6)
summ.data = data.frame(x = dose, y = mean, s = sd, n = n)
plot(summ.data$x, summ.data$y, type = 'l')
# Test for dose-response effect
anydoseresponseN(summ.data$x, summ.data$y, summ.data$s, summ.data$n) # normal distribution
anydoseresponseLN(summ.data$x, summ.data$y, summ.data$s, summ.data$n) # lognormal distribution
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = c(rep(0,4), rep(0,4), rep(1,8))
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_N = PREP_DATA_N(summ.data,
sumstats = T,
q = q,
prior.d = 'N11',
extended = T)
data_LN = PREP_DATA_LN(summ.data,
sumstats = T,
q = q,
prior.d = 'N11',
extended = T)
FLBMD=full.laplace_MA(data_N,
data_LN,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec,
plot=F)
# plot output
pFLBMD = plot.BMADR(FLBMD, weight_type = "LP", include_data = T, all = F, title = '')
pFLBMD$BMDs
?bartlett
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
rstan_config() # recompile stan models
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
# devtools::reload()
devtools::build() # build source package
