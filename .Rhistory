## lognormal distribution
### Convert arithmetic to geometric summary stats
summ.data.LN <- data.frame(x = summ.data[,1],
y = NtoLN(summ.data[,2], summ.data[,3])[1:length(summ.data[,1])],
s = NtoLN(summ.data[,2], summ.data[,3])[(length(summ.data[,1])+1):(2*length(summ.data[,1]))],
n = summ.data[,4]
)
b.Lognormal <- bartlett(sd = log(summ.data.LN[,3]), n = summ.data.LN[,4])
# Data for default analyses
data_N = do.call("PREP_DATA_N", argList)
data_LN = do.call("PREP_DATA_LN", argList)
## Data for sensitivity analysis
summ.data.LN.sens1 <- summ.data.LN
summ.data.LN.sens1$s <- min(summ.data.LN.sens1$s) # minimum geometric sd
argList$data <- summ.data.LN.sens1
argList <- append(argList, list(geom.stats = T)) # specify that geometric summary stats are given as input
data_LN_sens1 <- do.call("PREP_DATA_LN", argList)
summ.data.LN.sens2 <- summ.data.LN
summ.data.LN.sens2$s <- max(summ.data.LN.sens2$s) # maximum geometric sd
argList$data <- summ.data.LN.sens2
data_LN_sens2 <- do.call("PREP_DATA_LN", argList)
analysisData <- list(data = list(
default = list(data_N = data_N, data_LN = data_LN, prior.weights = c(rep(1,8), rep(1,8))),
defaultAdaptedWeights = list(data_N = data_N, data_LN = data_LN, prior.weights = c(rep(1,8), rep(0,8))),  # set weights to 0 for Lognormal
minVar = list(data_N = data_N, data_LN = data_LN_sens1, prior.weights = c(rep(1,8), rep(1,8))),
maxVar = list(data_N = data_N, data_LN = data_LN_sens2, prior.weights = c(rep(1,8), rep(1,8)))
), warning = NULL
)
# Fit models
argListFit <- list(
data.N = analysisData$data$minVar$data_N,
data.LN = analysisData$data$minVar$data_LN,
prior.weights = c(rep(0,8), rep(1,8)),
ndraws = 30000
)
fittedModels <- do.call("full.laplace_MA", argListFit)
modelSummary <- summary.BMADR(fittedModels, type = "continuous")
modelSummary$BMDWeights
round('Inf',4)
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
library(gamlss)
packageVersion('BMABMDR')
dataDir <- '~/GitHub/BMABMDR/tests/'
data.test <- read.csv(file.path(dataDir,'test_data.csv'), sep = ';')
data.test
load(file.path(dataDir, "das1.rda"))
# Load data
summ.data <- read.csv(file.path(dataDir,'examplecontinuouswithcovariate.csv'))
summ.data
data.input = data.frame(x = summ.data$Dose, y = summ.data$Response3, s = summ.data$SD, n = summ.data$N, cov = summ.data$Covariate)
pvec=c(0.05,0.5,0.95)
simsigma=1; q=0.1
prior.weights = rep(1,16)
FLBMD <- full.laplace_MA_Cov(
data = data.input,
sumstats = TRUE,
sd = TRUE, # option not used for Quantal data
q = q,
prior.d = 'N11'
)
FLBMD$MA
FLBMD$summary
# Plots
# for (i in seq_along(get_models(type = "continuous"))){
#   basic.plot(FLBMD, model_name = get_models("continuous")[i], increasing = F)
# }
pt <- basic.plot(FLBMD, model_name = 'E4_N', increasing = F)
pt
for (i in seq_along(get_models(type = "continuous"))){
basic.plot(FLBMD, model_name = get_models("continuous")[i], increasing = F)
}
warnings()
pt <- basic.plot(FLBMD, model_name = 'E4_N', increasing = T)
pt
# Plots
for (i in seq_along(get_models(type = "continuous"))){
basic.plot(FLBMD, model_name = get_models("continuous")[i], increasing = T)
}
# Plots
pt <- list()
k = 1
for (i in seq_along(get_models(type = "continuous"))){
pt[[k]] <- basic.plot(FLBMD, model_name = get_models("continuous")[i], increasing = T)
k = k+1
}
pt
dose = c(0, 5, 15, 50, 100)
y = c(0, 4, 6, 5, 12)
n = c(20, 20, 20, 20, 20)
summ.data = data.frame(x = dose, y = y, n = n)
# Test for dose-response effect (not optimal yet)
anydoseresponseQ(summ.data$x, summ.data$y, summ.data$n)
dose.a
data <- read.csv(file.path(dataDir, "example_quantal.csv"))
# Each covariate level should be present in each dose group
data.input <- data.frame(
dose = rep(data$dose, 2),
y = rep(data$response, 2),
n = rep(data$size, 2),
covariate = c(rep('Male', 5), rep('Female', 5))
)
# data.input$y[1:5] <- data.input$y[1:5] + 2
q = 0.1
anydoseresponseQ(data.input$dose, data.input$y, data.input$n, cluster = F)
# Fit without covariate
data.input.Q <- PREP_DATA_QA(data = data.input, q = q, sumstats = T)
modelFit <- full.laplaceQ_MA(data.input.Q, prior.weights = rep(1,8), pvec = c(0.05,0.5,0.95))
modelFit$MA
warnings()
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
data <- read.csv(file.path(dataDir, "example_quantal.csv"))
# Each covariate level should be present in each dose group
data.input <- data.frame(
dose = rep(data$dose, 2),
y = rep(data$response, 2),
n = rep(data$size, 2),
covariate = c(rep('Male', 5), rep('Female', 5))
)
# data.input$y[1:5] <- data.input$y[1:5] + 2
q = 0.1
anydoseresponseQ(data.input$dose, data.input$y, data.input$n, cluster = F)
# Fit without covariate
data.input.Q <- PREP_DATA_QA(data = data.input, q = q, sumstats = T)
modelFit <- full.laplaceQ_MA(data.input.Q, prior.weights = rep(1,8), pvec = c(0.05,0.5,0.95))
modelFit$MA
warnings()
modelFit = samplingQ_MA(data.input.Q, rep(1,8))
modelFit$MA_bridge_sampling
# Quantal data
dose = c(0, 5, 15, 50, 100)
y = c(0, 4, 6, 5, 12)
n = c(20, 20, 20, 20, 20)
summ.data = data.frame(x = dose, y = y, n = n)
anydoseresponseQ(summ.data$x, summ.data$y, summ.data$n)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = rep(1,8)
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_Q = PREP_DATA_QA(summ.data,
sumstats = T,
q = q)
FLBMD_Q = full.laplaceQ_MA(data_Q,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
FLBMD_Q = full.laplaceQ_MA(data_Q,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
FLBMD_Q = full.laplaceQ_MA(data_Q,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec)
# MA estimates
FLBMD_Q$MA
# model weights
round(FLBMD_Q$weights,4)
# model-specific fit
FLBMD_Q$E4_Q
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
FLBMD_Q$bf
# plot output
pFLBMD_Q = plot.BMADRQ(FLBMD_Q, weight_type = "LP", include_data = T, all = F, title = '')
pFLBMD_Q$BMDs
pFLBMD_Q$weights
pFLBMD_Q$model_fit
pFLBMD_Q$MA_fit
SBMD_Q = samplingQ_MA(data_Q,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec)
# MA estimates
SBMD_Q$MA_bridge_sampling
SBMD_Q$MA_laplace
# convergence & divergence
SBMD_Q$convergence
SBMD_Q$divergences*100 # percentage of iterations that were divergent
# plot output
pSBMD_Q = plot.BMADRQ(SBMD_Q, weight_type = "BS", include_data = T, all = F, title = '')
pSBMD_Q$BMDs
pSBMD_Q$weights
pSBMD_Q$model_fit
pSBMD_Q$MA_fit
# plot prior vs posterior
plot_priorQ(SBMD_Q, data_Q$data, "E4_Q")
data <- read.csv(file.path(dataDir, "example_clusteredQuantal.csv"))
orderedData <- data[,
c("dose", "y", "n", "litter")
]
anydoseresponseQ(orderedData$dose, orderedData$y, orderedData$n, cluster = T)
argListPrep <- list(
data = orderedData,
q = 0.1,
extended = TRUE,
cluster = TRUE
)
prepData <- do.call("PREP_DATA_QA", argListPrep)
# Fit models
argListFit <- list(
data.Q = prepData,
prior.weights = rep(1,8)
)
modelFit <- do.call("full.laplaceQ_MA", argListFit)
modelFit$MA
modelFit$gof_check
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
library(gamlss)
# Quantal data
dose = c(0, 5, 15, 50, 100)
y = c(0, 4, 6, 5, 12)
n = c(20, 20, 20, 20, 20)
summ.data = data.frame(x = dose, y = y, n = n)
anydoseresponseQ(summ.data$x, summ.data$y, summ.data$n)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = rep(1,8)
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_Q = PREP_DATA_QA(summ.data,
sumstats = T,
q = q)
FLBMD_Q = full.laplaceQ_MA(data_Q,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec)
# MA estimates
FLBMD_Q$MA
# model weights
round(FLBMD_Q$weights,4)
# model-specific fit
FLBMD_Q$E4_Q
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
FLBMD_Q$bf
# plot prior vs posterior
plot_priorQ(FLBMD_Q, data_Q$data, "E4_Q")
SBMD_Q = samplingQ_MA(data_Q,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec)
# MA estimates
SBMD_Q$MA_bridge_sampling
SBMD_Q$MA_laplace
dataDir <- '~/GitHub/BMABMDR/tests/'
data <- read.csv(file.path(dataDir, "example_clusteredQuantal.csv"))
orderedData <- data[,
c("dose", "y", "n", "litter")
]
anydoseresponseQ(orderedData$dose, orderedData$y, orderedData$n, cluster = T)
argListPrep <- list(
data = orderedData,
q = 0.1,
extended = TRUE,
cluster = TRUE
)
prepData <- do.call("PREP_DATA_QA", argListPrep)
# Fit models
argListFit <- list(
data.Q = prepData,
prior.weights = rep(1,8)
)
modelFit <- do.call("full.laplaceQ_MA", argListFit)
modelFit$MA
modelFit$gof_check
full.laplaceQ_MA
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
modelFit <- do.call("full.laplaceQ_MA", argListFit)
modelFit$MA
modelFit$gof_check
round(1/5.697845413541534534354,4)
round(1/0.000056456486486485464,4)
round(1/56598962531486113,4)
data.test <- read.csv(file.path(dataDir,'test_data.csv'), sep = ';')
summ.data <- data.frame(
x = data.test$Dose,
y = data.test$Mean,
s = data.test$SD,
n = data.test$N,
cov = data.test$group
)
q = 0.2
prior.weights = rep(1,16)
# Fit models
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = F,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$summary
# Plots
pt <- basic.plot(FLBMD, model_name = 'E4_N', increasing = T)
pt
pt <- basic.plot(FLBMD, model_name = 'E4_LN', increasing = T)
pt
load(file.path(dataDir, "das1.rda"))
data.test <- das1$data
ind.data <- data.frame(
x = data.test$Dose,
y = data.test$LDH,
#          s = data.test$SD,
#          n = data.test$N,
cov = data.test$sex
)
ind.data <- ind.data[which(!is.na(ind.data$y)),]
q = 0.05
prior.weights = rep(1,16)
# Fit models TODO: returns an error
FLBMD <- full.laplace_MA_Cov(
data = ind.data,
sumstats = FALSE,
sd = TRUE, # option not used for Quantal data
q = q,
prior.d = 'N11'
)
FLBMD$summary
FLBMD$summary
# Plots
pt <- basic.plot(FLBMD, model_name = 'E4_N', increasing = T)
pt
pt <- basic.plot(FLBMD, model_name = 'E4_LN', increasing = T)
pt
data <- read.csv(file.path(dataDir, "example_quantal.csv"))
# Each covariate level should be present in each dose group
data.input <- data.frame(
dose = rep(data$dose, 2),
y = rep(data$response, 2),
n = rep(data$size, 2),
covariate = c(rep('Male', 5), rep('Female', 5))
)
anydoseresponseQ(data.input$dose, data.input$y, data.input$n, cluster = FALSE, use.mcmc = FALSE)
q = 0.1
# Fit models TODO: returns an error
modelFit <- full.laplace_MA_Q_Cov(
data = data.input,
q = q
)
modelFit$summary
# Plots
pt <- basic.plotQ(modelFit, model_name = 'E4_Q')
pt
# Fit without covariate
data.input.Q <- PREP_DATA_QA(data = data.input, q = q, sumstats = T)
modelFit <- full.laplaceQ_MA(data.input.Q, prior.weights = rep(1,8), pvec = c(0.05,0.5,0.95))
modelFit$MA
modelFit$gof_check
load(file.path(file.path(dataDir, "das1.rda")))
indData <- na.omit(das1$data[, c("Dose", "LDH")]) #BW instead of LDH works
argListPrepData <- list(
data = indData,
sumstats = FALSE,
sd = TRUE,
q = 0.05,
extended = TRUE
)
data_N <- do.call("PREP_DATA_N", argListPrepData)
data_LN <-  do.call("PREP_DATA_LN", argListPrepData)
argListFit <- list(
data.N = data_N,
data.LN = data_LN,
prior.weights = rep(1,16)
)
modelFit <- do.call("full.laplace_MA", argListFit)
modelPlot <- plot.BMADR(
mod.obj = modelFit,
weight_type = "LP",
type = ifelse(argListFit$data.N$data$is_increasing == 1, "increasing", "decreasing"),
title = '', all = F
)
# Load data
summ.data <- read.csv(file.path(dataDir,'examplecontinuouswithcovariate.csv'))
# Subset data
summ.data <- summ.data[summ.data$Covariate == "Male", c("Dose", "Response3", "SD", "N")]
# Argument list
argList <- list(
data = summ.data,
sumstats = TRUE,
sd = TRUE,
q = 0.1
)
# Bartlett test
## normal distribution
b.Normal <- bartlett(sd = summ.data[,3], n = summ.data[,4])
## lognormal distribution
### Convert arithmetic to geometric summary stats
summ.data.LN <- data.frame(x = summ.data[,1],
y = NtoLN(summ.data[,2], summ.data[,3])[1:length(summ.data[,1])],
s = NtoLN(summ.data[,2], summ.data[,3])[(length(summ.data[,1])+1):(2*length(summ.data[,1]))],
n = summ.data[,4]
)
b.Lognormal <- bartlett(sd = log(summ.data.LN[,3]), n = summ.data.LN[,4])
# Data for default analyses
data_N = do.call("PREP_DATA_N", argList)
data_LN = do.call("PREP_DATA_LN", argList)
## Data for sensitivity analysis
summ.data.LN.sens1 <- summ.data.LN
summ.data.LN.sens1$s <- min(summ.data.LN.sens1$s) # minimum geometric sd
argList$data <- summ.data.LN.sens1
argList <- append(argList, list(geom.stats = T)) # specify that geometric summary stats are given as input
data_LN_sens1 <- do.call("PREP_DATA_LN", argList)
summ.data.LN.sens2 <- summ.data.LN
summ.data.LN.sens2$s <- max(summ.data.LN.sens2$s) # maximum geometric sd
argList$data <- summ.data.LN.sens2
data_LN_sens2 <- do.call("PREP_DATA_LN", argList)
analysisData <- list(data = list(
default = list(data_N = data_N, data_LN = data_LN, prior.weights = c(rep(1,8), rep(1,8))),
defaultAdaptedWeights = list(data_N = data_N, data_LN = data_LN, prior.weights = c(rep(1,8), rep(0,8))),  # set weights to 0 for Lognormal
minVar = list(data_N = data_N, data_LN = data_LN_sens1, prior.weights = c(rep(1,8), rep(1,8))),
maxVar = list(data_N = data_N, data_LN = data_LN_sens2, prior.weights = c(rep(1,8), rep(1,8)))
), warning = NULL
)
# Fit models
argListFit <- list(
data.N = analysisData$data$minVar$data_N,
data.LN = analysisData$data$minVar$data_LN,
prior.weights = c(rep(0,8), rep(1,8)),
ndraws = 30000
)
fittedModels <- do.call("full.laplace_MA", argListFit)
modelSummary <- summary.BMADR(fittedModels, type = "continuous")
modelSummary$BMDWeights
