rm(list=ls())
install.packages("~/GitHub/BMABMDR_0.0.0.9010.tar.gz", repos = NULL, type = "source")
rm(list=ls())
library(BMABMDR)
library(gamlss)
dose = c(0,6.25,12.5,25,50,100)
mean = c(10.87143,10.16669,10.81050,10.41179,12.38305,18.47681)
sd = c(1.804554,1.805939,3.858265,1.626007,2.045695,2.322449)
n = rep(10,6)
summ.data = data.frame(x = dose, y = mean, s = sd, n = n)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = c(rep(1,8), rep(1,8))
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_N = PREP_DATA_N(summ.data,
sumstats = T,
q = q)
data_LN = PREP_DATA_LN(summ.data,
sumstats = T,
q = q)
FLBMD=full.laplace_MA(data_N,
data_LN,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec,
plot=F)
treedepth = 15
delta = 0.8
nrchains = 3
nriterations = 3000
warmup = 1000
FLBMD=full.laplace_MA(data_N,
data_LN,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec,
plot=F)
devtools::load_all()
setwd('./BMABMDR/')
devtools::load_all()
FLBMD=full.laplace_MA(data_N,
data_LN,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec,
plot=F)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
library('rstantools')
library('usethis')
library('roxygen2')
rstan_config() # recompile stan models
pkgbuild::compile_dll()
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
devtools::install()
.Last.error.trace
Sys.getenv("PATH")
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
# devtools::reload()
devtools::build() # build source package
install.packages("~/GitHub/BMABMDR_0.0.0.9010.tar.gz", repos = NULL, type = "source")
rm(list=ls())
library(BMABMDR)
library(gamlss)
dose = c(0,6.25,12.5,25,50,100)
mean = c(10.87143,10.16669,10.81050,10.41179,12.38305,18.47681)
sd = c(1.804554,1.805939,3.858265,1.626007,2.045695,2.322449)
n = rep(10,6)
summ.data = data.frame(x = dose, y = mean, s = sd, n = n)
# Test for dose-response effect
anydoseresponseN(summ.data$x, summ.data$y, summ.data$s, summ.data$n) # normal distribution
anydoseresponseLN(summ.data$x, summ.data$y, summ.data$s, summ.data$n) # lognormal distribution
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = c(rep(1,8), rep(1,8))
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_N = PREP_DATA_N(summ.data,
sumstats = T,
q = q)
data_LN = PREP_DATA_LN(summ.data,
sumstats = T,
q = q)
FLBMD=full.laplace_MA(data_N,
data_LN,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec,
plot=F)
# MA estimates
FLBMD$MA
# model weights
round(FLBMD$weights,4)
# model-specific fit
FLBMD$E4_N
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
FLBMD$bf
# BIC values best fit vs saturated model
FLBMD$BIC.bestfit
FLBMD$BIC.SM
# plot output
pFLBMD = plot.BMADR(FLBMD, weight_type = "LP", include_data = T, all = F)
# plot output
pFLBMD = plot.BMADR(FLBMD, weight_type = "LP", include_data = T, all = F, title = '')
pFLBMD$BMDs
pFLBMD$weights
pFLBMD$model_fit_N
pFLBMD$model_fit_LN
pFLBMD$model_fit
pFLBMD$MA_fit
# plot prior vs posterior
plot_prior(FLBMD, data_N$data, "E4_N", parms = T)
plot_prior(FLBMD, data_N$data, "E4_N", parms = F)
plot_prior(FLBMD, data_N$data, "P4_N", parms = T)
plot_prior(FLBMD, data_LN$data, "L4_LN", parms = T)
SBMD = sampling_MA(data_N, data_LN,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec,
plot=F)
warnings()
# MA estimates
SBMD$MA_bridge_sampling
SBMD$MA_laplace
# convergence & divergence
SBMD$convergence
SBMD$divergences*100 # percentage of iterations that were divergent
# model-specific fit
SBMD$E4_N
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
SBMD$bf
# BIC values best fit vs saturated model
SBMD$BIC.bestfit
SBMD$BIC.SM
# plot output
pSBMD = plot.BMADR(SBMD, weight_type = "BS", include_data = T, all = F)
# plot output
pSBMD = plot.BMADR(SBMD, weight_type = "BS", include_data = T, all = F, title = '')
pSBMD$BMDs
pSBMD$weights
pSBMD$model_fit_N
pSBMD$model_fit_LN
pSBMD$model_fit
pSBMD$MA_fit
# plot prior vs posterior
plot_prior(SBMD, data_N$data, "E4_N", parms = T)
setwd("~/BBMD/QUANTAL DR")
rm(list=ls())
library(fitdistrplus)
library(gamlss)         # needed for starting values for the log(BMD) parameter
library(mvtnorm)        # for the evaluation of the prior in the laplace approximation
library(rstan)          # stan
#library(cmdstanr)       #cmdstan
rstan_options(auto_write = TRUE)
library(bbmle)          # for the mle2 function, for the ML method
library(AICcmodavg)     # for model averaging the ML estimates
library(bridgesampling) # for determining the marginal likelihoods with bridgesampling
library(numDeriv)       # for calculating the hessian
library(truncdist)
library(tidyverse)
library(RColorBrewer)
library(documair)
setwd("~/BBMD/QUANTAL DR")
source("FUNs.R")
# source("STANMODELS.R")
# save.image("WS_STAN_2501Q.RData")
load("WS_STAN_2501Q.RData")
#load("WS_STAN_0911Q.RData")
source("anydoseresponseQ.R")
source("fun_Data_QA.R")
#source("BMAMETHODSQ_MA.R")
source('fun_Laplace_QA.R')
source('fun_Sampling_QA.R')
source("FUNs.R")
source("LL.R")
#source("fun_MaxLik_MA.R")
source("DRM.R")
source("simData.R")
source("fct_mcmc.R")
source("fct_optim.R")
source("../Diagnostics/diagnostics.R")
source("../Plotting/plottingfunctions.R")
source("output.R")
source("classes.R")
source("plot_prior.R")
source('fun_modelTestQ.R')
### simulate some data
set.seed(1989)
BMD.true = 16/100
sim_data <- sim_DRQ_data(DRM = "Hill", DRM_par = c(0.1, BMD.true, 0),
n = c(20, 20, 20, 20, 20),
dose = c(0, 5, 15, 50, 100), q = 0.1)
summ.data <- data.frame(dose = sim_data$dose.a*100,
y = sim_data$y.a,
n = sim_data$n.a)
summ.data
rm(list=ls())
library(BMABMDR)
library(gamlss)
dose = c(0, 5, 15, 50, 100)
y = c(0, 4, 6, 5, 12)
n = c(20, 20, 20, 20, 20)
summ.data = data.frame(x = dose, y = mean, n = n)
summ.data = data.frame(x = dose, y = y, n = n)
summ.data
# Test for dose-response effect
anydoseresponseQ(summ.data$x, summ.data$y, summ.data$n)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = rep(1,8)
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_Q = PREP_DATA_QA(summ.data,
sumstats = T,
q = q)
full.laplaceQ_MA(data.Q = testData_Q, prior.weights = pw)
full.laplaceQ_MA(data.Q = data_Q, prior.weights = pw)
full.laplaceQ_MA(data.Q = data_Q, prior.weights = prior.weights)
FLBMD_Q = full.laplaceQ_MA(data_Q,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec,
plot=F)
FLBMD_Q = full.laplaceQ_MA(data_Q,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec)
# MA estimates
FLBMD_Q$MA
# model weights
round(FLBMD_Q$weights,4)
# model-specific fit
FLBMD_Q$E4_Q
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
FLBMD_Q$bf
# BIC values best fit vs saturated model
FLBMD_Q$BIC.bestfit
FLBMD_Q$BIC.SM
# MA estimates
FLBMD_Q$MA
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
FLBMD_Q$bf
# plot output
pFLBMD_Q = plot.BMADR(FLBMD_Q, weight_type = "LP", include_data = T, all = F)
# plot output
pFLBMD_Q = plot.BMADRQ(FLBMD_Q, weight_type = "LP", include_data = T, all = F)
# plot output
pFLBMD_Q = plot.BMADRQ(FLBMD_Q, weight_type = "LP", include_data = T, all = F, title = '')
pFLBMD_Q$BMDs
pFLBMD_Q$weights
pFLBMD_Q$model_fit
pFLBMD_Q$MA_fit
# plot prior vs posterior
plot_priorQ(FLBMD_Q, data_Q$data, "E4_Q", parms = T)
# plot prior vs posterior
plot_priorQ(FLBMD_Q, data_Q$data, "E4_Q")
plot_priorQ(FLBMD_Q, data_Q$data, "E4_Q")
plot_priorQ(FLBMD_Q, data_Q$data, "P4_Q")
plot_priorQ(FLBMD_Q, data_Q$data, "L4_Q")
FLBMD_Q$L4_Q
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
# devtools::install()
install.packages("~/GitHub/BMABMDR_0.0.0.9010.tar.gz", repos = NULL, type = "source")
# devtools::install()
install.packages("~/GitHub/BMABMDR_0.0.0.9010.tar.gz", repos = NULL, type = "source")
