prior.d='N11'
extended = T
ndraws = 30000s
ndraws = 30000
seed = 123
pvec = c(0.05,0.50.95)
pvec = c(0.05,0.5,0.95)
data_NCOV_all <- PREP_DATA_NCOV(
data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended,
covariate = 'all'
)
data_NCOV_asigma2 <- PREP_DATA_NCOV(
data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended,
covariate = 'a_sigma2'
)
data_NCOV_dBMD <- PREP_DATA_NCOV(
data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended,
covariate = 'BMD_d'
)
data_N_noCOV <- PREP_DATA_N(data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended)
data_LNCOV_all <- PREP_DATA_LNCOV(
data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended,
covariate = 'all'
)
data_LNCOV_asigma2 <- PREP_DATA_LNCOV(
data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended,
covariate = 'a_sigma2'
)
data_LNCOV_dBMD <- PREP_DATA_LNCOV(
data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended,
covariate = 'BMD_d'
)
data_LN_noCOV <- PREP_DATA_LN(data = data,
sumstats = sumstats,
sd = sd,
q = q,
prior.d = prior.d,
extended = extended)
load('~/BBMD/FINAL CODE/WS_STAN_CONT.RData')
load('~/BBMD/FINAL CODE/WS_STAN_CONT_COV.RData')
best.sub.which <- c()
best.sub.loglik <- c()
best.sub.weight <- c()
nModels = 16
if (!is.null(shiny::getDefaultReactiveDomain())){
shiny::incProgress(amount = 1/(nModels + 1), detail = names(get_models(type='continuous')[1]))
}
if(prior.weights[1] > 0){
print(1)
select_E4_N <- fun_cov_selection(model = mE4COV,
model_name = 'E4_N',
model.none = mE4,
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfE4_NI_Cov, llfE4_ND_Cov),
data_asigma2 = data_NCOV_asigma2,
data_dBMD = data_NCOV_dBMD,
data_all = data_NCOV_all,
data_none = data_N_noCOV,
prior.weightsCov = rep(1, 4), # weights for the 4 sub-models
pvec = pvec,
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
if(exists('select_E4_N') & !is.null(select_E4_N)){
best.sub.which <- c(best.sub.which, select_E4_N$best.submodel.name)
best.sub.loglik <- c(best.sub.loglik, select_E4_N$Weights$Loglik[select_E4_N$Weights$Covariate == select_E4_N$best.submodel.name])
best.sub.weight <- c(best.sub.weight, select_E4_N$Weights$Weights[select_E4_N$Weights$Covariate == select_E4_N$best.submodel.name])
BMD_E4_N <- getBMD(select_E4_N$best.submodel$theta_tilde, pvec, select_E4_N$best.submodel.name, 'E4_N')
}else{
best.sub.which <- c(best.sub.which, NA)
best.sub.loglik <- c(best.sub.loglik, NA)
BMD_E4_N <- c(NA,NA,NA)
best.sub.weight <- c(best.sub.weight, NA)
}
}else{
best.sub.which <- c(best.sub.which, NA)
best.sub.loglik <- c(best.sub.loglik, NA)
BMD_E4_N <- c(NA,NA,NA)
best.sub.weight <- c(best.sub.weight, NA)
}
select_E4_N
model = mE4COV
model_name = 'E4_N'
model.none = mE4
select_E4_N <- fun_cov_selection(model = mE4COV,
model_name = 'E4_N',
model.none = mE4,
loglik = ifelse(data_NCOV_all$data$data_type == 1; llfE4_NI_Cov; llfE4_ND_Cov);
data_asigma2 = data_NCOV_asigma2;
data_dBMD = data_NCOV_dBMD;
data_all = data_NCOV_all;
data_none = data_N_noCOV;
prior.weightsCov = rep(1; 4); # weights for the 4 sub-models
pvec = pvec;
ndraws = ndraws, td = data_NCOV_all$data$truncd, seed = seed)
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfE4_NI_Cov, llfE4_ND_Cov);
data_asigma2 = data_NCOV_asigma2;
data_dBMD = data_NCOV_dBMD;
data_all = data_NCOV_all;
data_none = data_N_noCOV;
prior.weightsCov = rep(1; 4); # weights for the 4 sub-models
pvec = pvec;
loglik = ifelse(data_NCOV_all$data$data_type == 1, llfE4_NI_Cov, llfE4_ND_Cov);
data_asigma2 = data_NCOV_asigma2;
data_dBMD = data_NCOV_dBMD;
data_all = data_NCOV_all;
data_none = data_N_noCOV;
prior.weightsCov = rep(1, 4); # weights for the 4 sub-models
pvec = pvec;
td = data_NCOV_all$data$truncd
# fit all four submodels
optMod_asigma2 <- fun_optimCov(model, data_asigma2$data,
data_asigma2$start, ndraws, seed, pvec)
optMod_asigma2[1]
opttest = c(NA,NA,NA)
opttest[1][1]
is.na(optMod_asigma2[1][[1]])
is.na(optMod_asigma2[1][1])
optMod_asigma2[1][1]
if(is.na(optMod_asigma2[1][1])){
prior.weightsCov[1] <- 0
ll_asigma2 <- NA
}else if((ifelse(is.na(optMod_asigma2[[3]]),TRUE,(optMod_asigma2[[3]]!=0)) | length(optMod_asigma2)!=9 | ('Inf' %in% optMod_asigma2$theta_tilde))){
prior.weightsCov[1] <- 0
# warning('Difficulties fitting the Probit (Lognormal) model; prior weight was set to 0 and the model is not included in model averaging')
ll_asigma2 <- NA
}else{
ll_asigma2 <- loglik(pars = optMod_asigma2$par, x = data_asigma2$data$x, n = data_asigma2$data$n,
m = data_asigma2$data$m, s2 = data_asigma2$data$s2,
qval = data_asigma2$data$q, shift = data_asigma2$data$shift, covar = 'a_sigma2',
nlevels = data_asigma2$data$nlevels,
trt_ind = data_asigma2$data$trt_ind)
}
('Inf' %in% optMod_asigma2$theta_tilde)
optMod_dBMD <- fun_optimCov(model, data_dBMD$data,
data_dBMD$start, ndraws, seed, pvec)
if(is.na(optMod_dBMD[1][1])){
prior.weightsCov[2] <- 0
# warning('Difficulties fitting the Probit (Lognormal) model; prior weight was set to 0 and the model is not included in model averaging')
ll_dBMD <- NA
}else if((ifelse(is.na(optMod_dBMD[[3]]),TRUE,(optMod_dBMD[[3]]!=0)) | length(optMod_dBMD)!=9 | ('Inf' %in% optMod_dBMD$theta_tilde))){
prior.weightsCov[2] <- 0
# warning('Difficulties fitting the Probit (Lognormal) model; prior weight was set to 0 and the model is not included in model averaging')
ll_dBMD <- NA
}else{
ll_dBMD <- loglik(pars = optMod_dBMD$par, x = data_dBMD$data$x, n = data_dBMD$data$n,
m = data_dBMD$data$m, s2 = data_dBMD$data$s2,
qval = data_dBMD$data$q, shift = data_dBMD$data$shift, covar = 'BMD_d',
nlevels = data_dBMD$data$nlevels,
trt_ind = data_dBMD$data$trt_ind)
}
optMod_all <- fun_optimCov(model, data_all$data,
data_all$start, ndraws, seed, pvec)
if(is.na(optMod_all[1][1])){
prior.weightsCov[3] <- 0
# warning('Difficulties fitting the Probit (Lognormal) model; prior weight was set to 0 and the model is not included in model averaging')
ll_all <- NA
}else if((ifelse(is.na(optMod_all[[3]]),TRUE,(optMod_all[[3]]!=0)) | length(optMod_all)!=9 | ('Inf' %in% optMod_all$theta_tilde))){
prior.weightsCov[3] <- 0
# warning('Difficulties fitting the Probit (Lognormal) model; prior weight was set to 0 and the model is not included in model averaging')
ll_all <- NA
}else{
ll_all <- loglik(pars = optMod_all$par, x = data_all$data$x, n = data_all$data$n,
m = data_all$data$m, s2 = data_all$data$s2,
qval = data_all$data$q, shift = data_all$data$shift, covar = 'all',
nlevels = data_all$data$nlevels,
trt_ind = data_all$data$trt_ind)
}
optMod_none <- fun_optim(model.none, data_none$data,
data_none$start, ndraws, seed, pvec)
if(is.na(optMod_none[1][1])){
prior.weightsCov[4] <- 0
# warning('Difficulties fitting the Probit (Lognormal) model; prior weight was set to 0 and the model is not included in model averaging')
ll_none <- NA
}else if((ifelse(is.na(optMod_none[[3]]),TRUE,(optMod_none[[3]]!=0)) | length(optMod_none)!=9 | ('Inf' %in% optMod_none$theta_tilde))){
prior.weightsCov[4] <- 0
# warning('Difficulties fitting the Probit (Lognormal) model; prior weight was set to 0 and the model is not included in model averaging')
ll_none <- NA
}else{
ll_none <- loglik(pars = optMod_none$par, x = data_none$data$x, n = data_none$data$n,
m = data_none$data$m, s2 = data_none$data$s2,
qval = data_none$data$q, shift = data_none$data$shift, covar = 'none',
nlevels = 1,
trt_ind = data_none$data$trt_ind)
}
lls <- c(ll_asigma2, ll_dBMD, ll_all, ll_none)
if(sum(is.na(lls)) == 4){
# print(warning(paste0('Problems fitting model ', model_name, ', this model was excluded from the analysis.')))
warning(paste0('Problems fitting model ', model_name, ', this model was excluded from the analysis.'))
return(NULL)
}else{
max.ll = max(lls, na.rm = T)
if(is.na(lls[which((max.ll-lls[!is.na(lls)]) < 709)][1])){
lpw.sub <- rep(0, 4)
lpw.sub[which(lls == max.ll)] <- 1
}else{
minll <- min(lls[which((max.ll-lls[!is.na(lls)]) < 709)], na.rm = T)
# compute the weight of each model
if(prior.weightsCov[1] > 0){
if(grepl('QE4', model_name)){
w_asigma2 <- fun.w.QE4(optMod_asigma2, lld = ll_asigma2, min.ll = minll, nlevels = data_asigma2$data$nlevels,
dataMod = data_asigma2, covar = 'a_sigma2')
}else{
w_asigma2 <- fun.w(optMod_asigma2, lld = ll_asigma2, min.ll = minll, nlevels = data_asigma2$data$nlevels,
dataMod = data_asigma2, covar = 'a_sigma2')
}
}else{w_asigma2 <- 0}
if(prior.weightsCov[2] > 0){
if(grepl('QE4', model_name)){
w_dBMD <- fun.w.QE4(optMod_dBMD, lld = ll_dBMD, min.ll = minll, nlevels = data_dBMD$data$nlevels,
dataMod = data_dBMD, covar = 'BMD_d')
}else{
w_dBMD <- fun.w(optMod_dBMD, lld = ll_dBMD, min.ll = minll, nlevels = data_dBMD$data$nlevels,
dataMod = data_dBMD, covar = 'BMD_d')
}
}else{w_dBMD <- 0}
if(prior.weightsCov[3] > 0){
if(grepl('QE4', model_name)){
w_all <- fun.w.QE4(optMod_all, lld = ll_all, min.ll = minll, nlevels = data_all$data$nlevels,
dataMod = data_all, covar = 'all')
}else{
w_all <- fun.w(optMod_all, lld = ll_all, min.ll = minll, nlevels = data_all$data$nlevels,
dataMod = data_all, covar = 'all')
}
}else{w_all <- 0}
if(prior.weightsCov[4] > 0){
if(grepl('QE4', model_name)){
w_none <- fun.w.QE4(optMod_none, lld = ll_none, min.ll = minll, nlevels = 1,
dataMod = data_none, covar = 'none')
}else{
w_none <- fun.w(optMod_none, lld = ll_none, min.ll = minll, nlevels = 1,
dataMod = data_none, covar = 'none')
}
}else{w_none <- 0}
w <- c(w_asigma2, w_dBMD, w_all, w_none)
w <- ifelse(w == 'Inf' | is.na(w), 0, w)
prior.weightsCov = prior.weightsCov/sum(prior.weightsCov==1)
lpw.sub=(prior.weightsCov*w)/sum(prior.weightsCov*w)
}
if(max(lpw.sub) == lpw.sub[4]){
best.submodel <- optMod_none
best.submodel.name <- 'none'
}else if(max(lpw.sub) == lpw.sub[1]){
best.submodel <- optMod_asigma2
best.submodel.name <- 'a_sigma2'
}else if(max(lpw.sub) == lpw.sub[2]){
best.submodel <- optMod_dBMD
best.submodel.name <- 'BMD_d'
}else if(max(lpw.sub) == lpw.sub[3]){
best.submodel <- optMod_all
best.submodel.name <- 'all'
}
return(list(Weights = data.frame(Covariate = c('a_sigma2', 'BMD_d', 'all', 'none'), Loglik = lls,
# BIC = c(BIC.asigma2, BIC.dBMD, BIC.all, BIC.none)
Weights = lpw.sub),
a_sigma2 = optMod_asigma2,
BMD_d = optMod_dBMD,
all = optMod_all,
none = optMod_none,
best.submodel = best.submodel,
best.submodel.name = best.submodel.name
))
}
max.ll = max(lls, na.rm = T)
if(is.na(lls[which((max.ll-lls[!is.na(lls)]) < 709)][1])){
lpw.sub <- rep(0, 4)
lpw.sub[which(lls == max.ll)] <- 1
}else{
minll <- min(lls[which((max.ll-lls[!is.na(lls)]) < 709)], na.rm = T)
# compute the weight of each model
if(prior.weightsCov[1] > 0){
if(grepl('QE4', model_name)){
w_asigma2 <- fun.w.QE4(optMod_asigma2, lld = ll_asigma2, min.ll = minll, nlevels = data_asigma2$data$nlevels,
dataMod = data_asigma2, covar = 'a_sigma2')
}else{
w_asigma2 <- fun.w(optMod_asigma2, lld = ll_asigma2, min.ll = minll, nlevels = data_asigma2$data$nlevels,
dataMod = data_asigma2, covar = 'a_sigma2')
}
}else{w_asigma2 <- 0}
if(prior.weightsCov[2] > 0){
if(grepl('QE4', model_name)){
w_dBMD <- fun.w.QE4(optMod_dBMD, lld = ll_dBMD, min.ll = minll, nlevels = data_dBMD$data$nlevels,
dataMod = data_dBMD, covar = 'BMD_d')
}else{
w_dBMD <- fun.w(optMod_dBMD, lld = ll_dBMD, min.ll = minll, nlevels = data_dBMD$data$nlevels,
dataMod = data_dBMD, covar = 'BMD_d')
}
}else{w_dBMD <- 0}
if(prior.weightsCov[3] > 0){
if(grepl('QE4', model_name)){
w_all <- fun.w.QE4(optMod_all, lld = ll_all, min.ll = minll, nlevels = data_all$data$nlevels,
dataMod = data_all, covar = 'all')
}else{
w_all <- fun.w(optMod_all, lld = ll_all, min.ll = minll, nlevels = data_all$data$nlevels,
dataMod = data_all, covar = 'all')
}
}else{w_all <- 0}
if(prior.weightsCov[4] > 0){
if(grepl('QE4', model_name)){
w_none <- fun.w.QE4(optMod_none, lld = ll_none, min.ll = minll, nlevels = 1,
dataMod = data_none, covar = 'none')
}else{
w_none <- fun.w(optMod_none, lld = ll_none, min.ll = minll, nlevels = 1,
dataMod = data_none, covar = 'none')
}
}else{w_none <- 0}
w <- c(w_asigma2, w_dBMD, w_all, w_none)
w <- ifelse(w == 'Inf' | is.na(w), 0, w)
prior.weightsCov = prior.weightsCov/sum(prior.weightsCov==1)
lpw.sub=(prior.weightsCov*w)/sum(prior.weightsCov*w)
}
if(max(lpw.sub) == lpw.sub[4]){
best.submodel <- optMod_none
best.submodel.name <- 'none'
}else if(max(lpw.sub) == lpw.sub[1]){
best.submodel <- optMod_asigma2
best.submodel.name <- 'a_sigma2'
}else if(max(lpw.sub) == lpw.sub[2]){
best.submodel <- optMod_dBMD
best.submodel.name <- 'BMD_d'
}else if(max(lpw.sub) == lpw.sub[3]){
best.submodel <- optMod_all
best.submodel.name <- 'all'
}
lpw.sub
lls <- c(ll_asigma2, ll_dBMD, ll_all, ll_none)
lls
sum(is.na(lls))
max.ll = max(lls, na.rm = T)
is.na(lls[which((max.ll-lls[!is.na(lls)]) < 709)][1])
lls[which((max.ll-lls[!is.na(lls)]) < 709)][1]
minll <- min(lls[which((max.ll-lls[!is.na(lls)]) < 709)], na.rm = T)
minll
prior.weightsCov
prior.weightsCov = c(1,0,1,1)
lls <- c(ll_asigma2, ll_dBMD, ll_all, ll_none)
max.ll = max(lls, na.rm = T)
minll <- min(lls[which((max.ll-lls[!is.na(lls)]) < 709)], na.rm = T)
minll
# compute the weight of each model
if(prior.weightsCov[1] > 0){
if(grepl('QE4', model_name)){
w_asigma2 <- fun.w.QE4(optMod_asigma2, lld = ll_asigma2, min.ll = minll, nlevels = data_asigma2$data$nlevels,
dataMod = data_asigma2, covar = 'a_sigma2')
}else{
w_asigma2 <- fun.w(optMod_asigma2, lld = ll_asigma2, min.ll = minll, nlevels = data_asigma2$data$nlevels,
dataMod = data_asigma2, covar = 'a_sigma2')
}
}else{w_asigma2 <- 0}
if(prior.weightsCov[2] > 0){
if(grepl('QE4', model_name)){
w_dBMD <- fun.w.QE4(optMod_dBMD, lld = ll_dBMD, min.ll = minll, nlevels = data_dBMD$data$nlevels,
dataMod = data_dBMD, covar = 'BMD_d')
}else{
w_dBMD <- fun.w(optMod_dBMD, lld = ll_dBMD, min.ll = minll, nlevels = data_dBMD$data$nlevels,
dataMod = data_dBMD, covar = 'BMD_d')
}
}else{w_dBMD <- 0}
if(prior.weightsCov[3] > 0){
if(grepl('QE4', model_name)){
w_all <- fun.w.QE4(optMod_all, lld = ll_all, min.ll = minll, nlevels = data_all$data$nlevels,
dataMod = data_all, covar = 'all')
}else{
w_all <- fun.w(optMod_all, lld = ll_all, min.ll = minll, nlevels = data_all$data$nlevels,
dataMod = data_all, covar = 'all')
}
}else{w_all <- 0}
if(prior.weightsCov[4] > 0){
if(grepl('QE4', model_name)){
w_none <- fun.w.QE4(optMod_none, lld = ll_none, min.ll = minll, nlevels = 1,
dataMod = data_none, covar = 'none')
}else{
w_none <- fun.w(optMod_none, lld = ll_none, min.ll = minll, nlevels = 1,
dataMod = data_none, covar = 'none')
}
}else{w_none <- 0}
w <- c(w_asigma2, w_dBMD, w_all, w_none)
w
w <- ifelse(w == 'Inf' | is.na(w), 0, w)
prior.weightsCov = prior.weightsCov/sum(prior.weightsCov==1)
lpw.sub=(prior.weightsCov*w)/sum(prior.weightsCov*w)
lpw.sub
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
library(gamlss)
# data <- read.csv('~/BBMD/FINAL CODE/RatStudyCovariates.csv', header = T)
data <- read.csv('~/BBMD/FINAL CODE/RatStudy.csv', header = T)
data
summ.data <- data.frame(x = data$Dose,
y = data$MeanBW,
s = data$SdBW,
n = data$N,
cov = data$Sex)
prior.weights = c(rep(1,2), rep(0,6), rep(0,4), rep(0,4))
q = 0.05
prior.weights = c(rep(1,2), rep(0,6), rep(0,4), rep(0,4))
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = T,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
basic.plot(FLBMD, 'E4_N', increasing = F)
data <- read.csv('~/BBMD/FINAL CODE/RatStudyCovariates.csv', header = T)
# data <- read.csv('~/BBMD/FINAL CODE/RatStudy.csv', header = T)
data
summ.data <- data.frame(x = data$Dose,
y = data$MeanBW,
s = data$SdBW,
n = data$N,
cov = data$Sex)
summ.data
q = 0.05
prior.weights = c(rep(1,2), rep(0,6), rep(0,4), rep(0,4))
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = T,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
basic.plot(FLBMD, 'E4_N', increasing = F)
basic.plot(FLBMD, 'H4_LN', increasing = F)
# prior.weights = c(rep(1,2), rep(0,6), rep(0,4), rep(0,4))
# prior.weights = c(rep(1,7), rep(0,1), rep(1,6), rep(1,2))
prior.weights = rep(1,16)
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = T,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
basic.plot(FLBMD, 'E4_N', increasing = F)
basic.plot(FLBMD, 'H4_LN', increasing = F)
# data <- read.csv('~/BBMD/FINAL CODE/RatStudyCovariates.csv', header = T)
data <- read.csv('~/BBMD/FINAL CODE/RatStudy.csv', header = T)
data
summ.data <- data.frame(x = data$Dose,
y = data$MeanBW,
s = data$SdBW,
n = data$N,
cov = data$Sex)
summ.data
q = 0.05
# prior.weights = c(rep(1,2), rep(0,6), rep(0,4), rep(0,4))
# prior.weights = c(rep(1,7), rep(0,1), rep(1,6), rep(1,2))
prior.weights = rep(1,16)
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = T,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
basic.plot(FLBMD, 'E4_N', increasing = F)
basic.plot(FLBMD, 'H4_LN', increasing = F)
