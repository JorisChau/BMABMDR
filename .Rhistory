what = "predicted",
model_averaged = TRUE,
weight_type = weight_type)
preds$predicted$dgr <- dgr[(dgr > (lg10d[2]-((lg10d[2]-lg10d[1])/2)))]
preds$model_averaged$dgr <- dgr[(dgr > (lg10d[2]-((lg10d[2]-lg10d[1])/2)))]
preds$predicted$lg10pred <- log10(preds$predicted$predicted)
dgrprime <- dgr[(dgr <= (lg10d[2]-((lg10d[2]-lg10d[1])/2)))]
preds_min <- tidyr::nest(dplyr::group_by(dplyr::filter(preds$predicted, Dose == min(Dose)), Model))
as_per_model <- dplyr::select(par_med(mod.obj, type = 'quantal'), Model, a)
preds_min$data <- lapply(preds_min$data, function(x) data.frame(dgrprime = dgrprime,
Dose = 10^dgrprime,
predicted = x$predicted,
lg10predicted = x$lg10pred))
preds_min <- tidyr::unnest(preds_min, cols = c('data'))
preds_min <- merge(preds_min, as_per_model, by = 'Model', sort = FALSE)
preds_min2 <- data.frame(Dose = 10^dgrprime,
lg10d = dgrprime,
log10MA = rep(log10(preds$model_averaged$model_averaged[
preds$model_averaged$Dose==min(preds$model_averaged$Dose)]),
length(dgrprime)),
MA = rep(preds$model_averaged$model_averaged[
preds$model_averaged$Dose==min(preds$model_averaged$Dose)],
length(dgrprime)))
respBMD <- predict.BMADRQ(mod.obj,
what = "resp_at_BMD",
model_averaged = TRUE,
weight_type = weight_type)
respBMD$resp_at_BMD$lg10bmd <- log10(respBMD$resp_at_BMD$BMD)
BMDMixture <- BMDQmixture_extract(mod.obj, weight_type, conv=conv) # BMD values
BMDMixture$BMDMixture2 <- log10(BMDMixture$BMDMixture/mod.obj$max.dose)
gghst2 <- hist(BMDMixture$BMDMixture, breaks = sqrt(nrow(BMDMixture)), plot = FALSE) #hist on original scale
lais <- log10(gghst2$breaks) # log10 of the breaks
dlais <- abs(diff(lais)) # width of the interval on log scale
glais <- (gghst2$counts/dlais) # divide the original counts by the width on the log scale
glais2 <- glais/sum(glais) * nrow(BMDMixture) # normalise the new frequencies
BMDMixture2 <- data.frame(Model = unique(BMDMixture$Model),#rep(unique(BMDMixture$Model), length(gghst2$counts)),
# Dose = gghst2$mids, #midpoints
Dose = 10**lais[1:length(gghst2$counts)], #midpoints
y = gghst2$counts, #frequencies
y2 = glais2
)
# BMDMixture2 <- data.frame(Model = unique(BMDMixture$Model), # y = Density
#                           Dose10 = BMDMixtureD$x,
#                           Dose102 = 10^BMDMixtureD$x,
#                           y10 = BMDMixtureD$y,
#                           Dose = BMDMixtureD2$x,
#                           y = BMDMixtureD2$y
# )
#BMDMixture <- refactor(BMDMixture)
#print(BMDMixture)
#BMDs and Weights
respBMDBMDW <- merge(respBMD$resp_at_BMD, BMDW, by = c("Model", "BMD"), sort = FALSE)
respBMDBMDW <- refactor(respBMDBMDW, type)
pd <- position_dodge(0.5)
# dist_fills <- c("N" = "#EFC000FF", "LN" = "#0073C2FF")
# dist_names <- c("N" = "Normal", "LN" = "LogNormal")
#dist_fills <- c("#EFC000FF", "#0073C2FF")
#names(dist_fills) <- c("N","LN")
#dist_names <- c("Normal","LogNormal")
#names(dist_names) <- c("N","LN")
if(mod.obj$max.dose > 1){
respBMDBMDW$BMDU <- ifelse(((respBMDBMDW$BMDU > mod.obj$max.dose^2) &
((respBMDBMDW$BMDU/respBMDBMDW$BMD)/(respBMDBMDW$BMD/respBMDBMDW$BMDL)) > 10) |
respBMDBMDW$BMDU > 10*mod.obj$max.dose^2,
# mod.obj$max.dose^2,
2*(respBMDBMDW$BMD - respBMDBMDW$BMDL),
respBMDBMDW$BMDU)
}
#BMD plots
pBMDs <- ggplot(data = respBMDBMDW, aes(x = BMD, y = Model, group = Model)) +
geom_errorbarh(aes(xmin = BMDL, xmax = BMDU, y = Model),
linetype = "solid", show.legend = FALSE,
size = 3, height = 1.2, color = brewer.pal(8, "Set2")[8]) +
geom_point(aes(x = BMD, y = Model), fill = "#0073C2FF",
size = 7, color = 1, shape = 21) +
theme_minimal() +
labs(x = expression(BMD), y = "") +
labs(x="BMD on original scale") +
theme(strip.text = element_text(size = 15, face = "bold"),
axis.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 15, face = "bold"),
panel.spacing = unit(5, "lines"),
legend.position = "top",
legend.direction = "horizontal",
title = element_text(size = 15, face = "bold")) +
geom_errorbarh(data = BMDBMA[BMDBMA$Type == weight_type,],
aes(xmin = BMDL, xmax = BMDU, y = Model),
linetype = "solid", show.legend = FALSE,
size = 3, height = 1.2, color = brewer.pal(9, "Set1")[3]) +
geom_point(data = BMDBMA[BMDBMA$Type == weight_type,],
aes(x = BMD, y = Model),
size = 7, color = 1, shape = 21,
fill = brewer.pal(9, "Set1")[1]) +
#scale_x_log10() +
scale_y_discrete(limits = rev(c("Model Averaged", "Exp", "InvExp", "Hill",
"LogNormal", "Gamma",  "QuadExp", "Probit",
"Logistic")),
labels = rev(c("Model Averaged", "Exp(Q)", "InvExp(Q)", "Hill(Q)",
"LogNormal(Q)", "Gamma(Q)",  "QuadExp(Q)", "Probit(Q)",
"Logistic(Q)")))
pBMDs
mod.obj$convergence
respBMDBMDW
# only converged models?
if(conv == TRUE){
respBMDBMDW <- respBMDBMDW[respBMDBMDW$Converged == 1, ]
}
#BMD plots
pBMDs <- ggplot(data = respBMDBMDW, aes(x = BMD, y = Model, group = Model)) +
geom_errorbarh(aes(xmin = BMDL, xmax = BMDU, y = Model),
linetype = "solid", show.legend = FALSE,
size = 3, height = 1.2, color = brewer.pal(8, "Set2")[8]) +
geom_point(aes(x = BMD, y = Model), fill = "#0073C2FF",
size = 7, color = 1, shape = 21) +
theme_minimal() +
labs(x = expression(BMD), y = "") +
labs(x="BMD on original scale") +
theme(strip.text = element_text(size = 15, face = "bold"),
axis.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 15, face = "bold"),
panel.spacing = unit(5, "lines"),
legend.position = "top",
legend.direction = "horizontal",
title = element_text(size = 15, face = "bold")) +
geom_errorbarh(data = BMDBMA[BMDBMA$Type == weight_type,],
aes(xmin = BMDL, xmax = BMDU, y = Model),
linetype = "solid", show.legend = FALSE,
size = 3, height = 1.2, color = brewer.pal(9, "Set1")[3]) +
geom_point(data = BMDBMA[BMDBMA$Type == weight_type,],
aes(x = BMD, y = Model),
size = 7, color = 1, shape = 21,
fill = brewer.pal(9, "Set1")[1]) +
#scale_x_log10() +
scale_y_discrete(limits = rev(c("Model Averaged", "Exp", "InvExp", "Hill",
"LogNormal", "Gamma",  "QuadExp", "Probit",
"Logistic")),
labels = rev(c("Model Averaged", "Exp(Q)", "InvExp(Q)", "Hill(Q)",
"LogNormal(Q)", "Gamma(Q)",  "QuadExp(Q)", "Probit(Q)",
"Logistic(Q)")))
pBMDs
mod.obj$convergence
BMDW
#Weights plot
needed_data <- tidyr::separate(BMDW,
col = "Model", sep = "_",
into = c("Model", "Distribution"))
# only converged models?
if(conv == TRUE){
BMDW <- BMDW[BMDW$Converged == 1, ]
}
needed_data <- tidyr::separate(BMDW,
col = "Model", sep = "_",
into = c("Model", "Distribution"))
if(weight_type == "LP") {
pWeights <- ggpubr::ggdotchart(
needed_data, x = "Model", y = "LP_Weights",
group = "Distribution", color = "#0073C2FF",
add = "segment", position = position_dodge(0.3),
sorting = "descending", size = 3, dot.size = 7) +
labs(x = "", y = "Weight",
title = "") +
theme_minimal() +
theme(strip.text = element_text(size = 15, face = "bold"),
axis.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 15, face = "bold"),
panel.spacing = unit(5, "lines"),
legend.position = "top",
legend.direction = "horizontal",
title = element_text(size = 15, face = "bold")) +
scale_x_discrete(
limits = c("E4", "IE4", "H4", "LN4", "G4", "QE4", "P4", "L4"),
labels = c("Exp", "InvExp", "Hill", "LogNormal", "Gamma",
"QuadExp", "Probit", "Logistic")
)
} else {
pWeights <- ggpubr::ggdotchart(
needed_data, x = "Model", y = "BS_Weights",
group = "Distribution", color = "#0073C2FF",
add = "segment", position = position_dodge(0.3),
sorting = "descending", size = 3, dot.size = 7) +
labs(x = "", y = "Weight", title = "") +
theme_minimal() +
theme(strip.text = element_text(size = 15, face = "bold"),
axis.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 15, face = "bold"),
panel.spacing = unit(5, "lines"),
legend.position = "top",
legend.direction = "horizontal",
title = element_text(size = 15, face = "bold")) +
scale_x_discrete(
limits = c("E4", "IE4", "H4", "LN4", "G4", "QE4", "P4", "L4"),
labels = c("Exp", "InvExp", "Hill", "LogNormal", "Gamma",
"QuadExp", "Probit", "Logistic")
)
}
pWeights
#Prediction plot
mods_fills <- c("Model-averaged BMD" = "coral")
#print(BMDBMA)
if(is.BMADRQ2(mod.obj)[3]==2) {
BMDBMA$Response <- c(sum(respBMDBMDW$resp_at_BMD*respBMDBMDW$BS_Weights),
sum(respBMDBMDW$resp_at_BMD*respBMDBMDW$LP_Weights))
} else if(is.BMADRQ2(mod.obj)[2]==2) {
BMDBMA$Response <- sum(respBMDBMDW$resp_at_BMD*respBMDBMDW$LP_Weights)
} else {
pts <- ggpubr::ggarrange(pBMDs, pWeights, nrow = 1, ncol = 2)
return(pts)
stop("cannot compute model averaged response at BMD. Please check the inputs.")
}
preds2 <- tidyr::separate(preds$predicted,
col = "Model", sep = "_",
into = c("Model", "Distribution"))
preds_min <- tidyr::separate(preds_min,
col = "Model", sep = "_",
into = c("Model", "Distribution"))
lty <- c("Q" = "solid")
md_cls <- RColorBrewer::brewer.pal(8, "Dark2")
names(md_cls) <-  c("E4", "IE4", "H4",
"LN4", "G4", "QE4",
"P4", "L4")
mod_names = c("Exp", "InvExp", "Hill", "LogNormal", "Gamma",
"QuadExp", "Probit", "Logistic")
names(mod_names) = c("E4", "IE4", "H4",
"LN4", "G4", "QE4",
"P4", "L4")
if(min(mod.obj$data$dose) == 0){
plot.labs = dose*mod.obj$max.dose
}else{
plot.labs = c(0, dose*mod.obj$max.dose)
}
names(mod.obj$convergence) <- unname(get_models('quantal'))
if(conv == TRUE){
converged.mods <- names(mod.obj$convergence[mod.obj$convergence==1])
mod.obj$models_included <- mod.obj$models_included[which(mod.obj$models_included %in% converged.mods)]
}
converged.mods
mod.obj$models_included
pplot <- ggplot(data = preds2[paste0(preds2$Model,"_Q") %in% mod.obj$models_included,],
aes(x = Dose*mod.obj$max.dose, y = predicted, group = Model,
color = Model)) +
geom_line(#alpha = 0.6,
size = 1,
show.legend = TRUE) +
labs(color = "Model",  x = expression(dose),
y = expression(p(y==1)), title = "", caption = "red dot and horizontal green bar indicate the model-averaged BMD and its 95%CI") +
geom_segment(data = preds_min, mapping = aes(x = Dose[1]*mod.obj$max.dose, y = a,
xend = max(Dose*mod.obj$max.dose),
yend = predicted,
group = interaction(Model, Distribution),
color = Model),
linetype = "dotted", alpha = 0.6,
size = 0.8, inherit.aes = FALSE, show.legend = FALSE) +
geom_errorbarh(data = dplyr::filter(BMDBMA, Type == weight_type),
aes(xmin = BMDL, xmax = BMDU,
y = Response,
group = Model),
linetype = "solid", show.legend = FALSE,
size = 2, height = 0.03, inherit.aes = FALSE,
color = brewer.pal(9, "Set1")[3]) +
geom_point(data = dplyr::filter(BMDBMA, Type == weight_type),
aes(x = BMD, y = Response, group = Model),
size = 5, shape = 19,
color = brewer.pal(9, "Set1")[1],
show.legend = FALSE,
inherit.aes = FALSE) +
coord_cartesian(xlim = c(min(preds_min$Dose*mod.obj$max.dose),
2*mod.obj$max.dose)) +
scale_color_manual(values = md_cls,
# labels = c("Exp", "InvExp", "Hill", "LogNormal", "Gamma",
# "QuadExp", "Probit", "Logistic")
labels = mod_names[names(mod_names)%in%unique(preds2$Model)]) +
# scale_x_continuous(trans = 'log10', labels = scales::comma,
#                   breaks = orig_ptdata$dose2[2:length(orig_ptdata$dose2)]*mod.obj$max.dose) +
scale_x_continuous(trans = 'log10', labels = plot.labs,
breaks = ddd*mod.obj$max.dose) +
theme_minimal() +
theme(strip.text = element_text(size = 15, face = "bold"),
axis.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.text = element_text(size = 8),
legend.title = element_text(size = 12, face = "bold"),
panel.spacing = unit(5, "lines"),
legend.position = "top",
legend.direction = "horizontal",
title = element_text(size = 15, face = "bold"))
cmax <- max(preds$model_averaged$model_averaged)
cmin <- min(preds$model_averaged$model_averaged)
ylim.prim <- c(cmin, cmax)
# ylim.sec <- c(min(BMDMixture2$y2), max(BMDMixture2$y2))
ylim.sec <- c(min(BMDMixture2$y), max(BMDMixture2$y))
b <- diff(ylim.prim)/diff(ylim.sec)
a <- ylim.prim[1] - b*ylim.sec[1]
# BMDMixture2$yres = a + BMDMixture2$y2*b
BMDMixture2$yres = a + BMDMixture2$y*b
dplot <- ggplot(data = preds$model_averaged, aes(x = Dose*mod.obj$max.dose, y = model_averaged,
group = 1)) +
geom_line(show.legend = FALSE, linetype = "dashed", size = 3) +
#geom_col(data = BMDMixture2, aes(x = Dose, y = yres, fill = Model), alpha = 0.6,
#         inherit.aes = FALSE, color = NA) +
#geom_histogram(data = BMDMixture,
#               aes(x = BMDMixture, y = ..density.., fill = Model),
#               color = NA, alpha = 0.5, inherit.aes = FALSE, bins = sqrt(nrow(BMDMixture))) +
geom_ribbon(data = BMDMixture2, aes(x = Dose,
y = yres,
ymin = min(yres), ymax = yres, fill = Model),
color=NA, alpha = 0.5) +
#geom_area(data = BMDMixture, aes(x = Dose,
#                                 y = yres, fill = Model),
#            color=NA, alpha = 0.5) +
geom_segment(data = preds_min2, mapping = aes(x = Dose[1]*mod.obj$max.dose, y = MA,
xend = max(Dose*mod.obj$max.dose),
yend = preds$model_averaged$model_averaged[1]
# group = interaction(Model, Distribution),
# color = Model
),
linetype = "dotted",
size = 3, inherit.aes = FALSE, show.legend = FALSE) +
geom_errorbarh(data = dplyr::filter(BMDBMA, Type == weight_type),
aes(xmin = BMDL, xmax = BMDU,
y = respBMD$model_averaged$model_averaged_response,#min(preds$model_averaged$model_averaged),
group = Model),
linetype = "solid", show.legend = FALSE,
size = 2, height = 0.01*mean(mod.obj$data$y), inherit.aes = FALSE,
color = brewer.pal(9, "Set1")[3]) +
geom_point(data = dplyr::filter(BMDBMA, Type == weight_type),
aes(x = BMD,
y = respBMD$model_averaged$model_averaged_response,#min(preds$model_averaged$model_averaged),
group = Model),
size = 5, shape = 19,
color = brewer.pal(9, "Set1")[1],
show.legend = FALSE,
inherit.aes = FALSE)  +
scale_y_continuous(expression(p(y==1)),
sec.axis = sec_axis(#~.*1.2,
# ~ ((. /max(BMDMixture$y)) *(cmax*1.2)),
~ (. - a)/b,
name = "Rescaled Density",
labels = scales::comma)
) +
labs(x = expression(dose), caption = "red dot and horizontal green bar indicate the model-averaged BMD and its 95%CI") +
theme_minimal() +
coord_cartesian(xlim = c(min(preds_min$Dose*mod.obj$max.dose),
2*mod.obj$max.dose),
ylim = c(min(BMDMixture2$yres), max(BMDMixture2$yres)) ) +
# scale_x_continuous(trans = 'log10', labels = scales::comma,
#                    breaks = orig_ptdata$dose2[2:length(orig_ptdata$dose2)]*mod.obj$max.dose) +
# scale_x_continuous(trans = 'log10', labels = dose*mod.obj$max.dose,
#                    breaks = ddd*mod.obj$max.dose) +
scale_x_continuous(trans = 'log10', labels = plot.labs,
breaks = ddd*mod.obj$max.dose) +
theme(strip.text = element_text(size = 15, face = "bold"),
axis.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.text = element_text(size = 7),
legend.title = element_text(size = 15, face = "bold"),
panel.spacing = unit(5, "lines"),
legend.position = "top",
legend.direction = "horizontal"#,
# title = element_text(size = 15, face = "bold")
) +
scale_fill_manual(values = unname(mods_fills), name = NULL)#, labels = c(""))
pplot
dplot
mod.obj$convergence
# example(source)
# try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# # roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
plot.BMADRQ(test_sampling, weight_type = 'BS', all = FALSE,
title = '', conv=T)
plot.BMADRQ(test_sampling, weight_type = 'BS', all = FALSE,
title = '', conv=F)
test_sampling <- samplingQ_MA(data.Q, prior.weights = c(1,1,1,1,0,1,1,1))
test_sampling$convergence
test_sampling <- samplingQ_MA(data.Q, prior.weights = c(0,0,0,0,1,1,1,1))
library('rstantools')
library('usethis')
library('roxygen2')
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
####################################################################################
####################################################################################
### Instructions for publishing a package on CRAN: https://r-pkgs.org/release.html
# https://cran.r-project.org/web/packages/rstantools/vignettes/minimal-rstan-package.html
## Compile package and generate the documentation
rstan_config() # recompile stan models
# example(source)
# try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# # roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
dose = c(1.6,3,5.5,12.3,25.9)
y = c(48,48,19,29,33)
n = c(2288,2093,907,909,691)
plot(dose,y/n)
summ.data = data.frame(x = dose, y = y, n = n)
data.Q = PREP_DATA_QA(data = summ.data, sumstats = TRUE,
q = 0.005, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = FALSE)
test_sampling <- samplingQ_MA(data.Q, prior.weights = c(0,0,0,0,1,1,1,1))
plot.BMADRQ(test_sampling, weight_type = 'BS', all = FALSE,
title = '', conv=F)
test_sampling <- samplingQ_MA(data.Q, prior.weights = c(rep(1,4), rep(0,4)))
print.BMADR(test_sampling, 'quantal')
dose = c(0, 5, 15, 50, 100)
y = c(0, 4, 6, 5, 12)
n = c(20, 20, 20, 20, 20)
summ.data = data.frame(x = dose, y = y, n = n)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = rep(1,8)
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_Q = PREP_DATA_QA(summ.data,
sumstats = T,
q = q)
SBMD_Q = samplingQ_MA(data_Q,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec)
# convergence & divergence
SBMD_Q$convergence
prior.weights=c(1,1,1,1,0,0,0,0)
SBMD_Q = samplingQ_MA(data_Q,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec)
# convergence & divergence
SBMD_Q$convergence
# plot output
pSBMD_Q = plot.BMADRQ(SBMD_Q, weight_type = "BS", include_data = T, all = F, title = '', conv = TRUE)
pSBMD_Q$BMDs
pSBMD_Q$weights
pSBMD_Q$model_fit
pSBMD_Q$MA_fit
prior.weights=c(1,1,rep(0,6))
SBMD_Q = samplingQ_MA(data_Q,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec)
# convergence & divergence
SBMD_Q$convergence
# plot output
pSBMD_Q = plot.BMADRQ(SBMD_Q, weight_type = "BS", include_data = T, all = F, title = '', conv = TRUE)
pSBMD_Q$BMDs
pSBMD_Q$weights
pSBMD_Q$model_fit
pSBMD_Q$MA_fit
# plot output
pSBMD_Q = plot.BMADRQ(SBMD_Q, weight_type = "BS", include_data = T, all = F, title = '', conv = FALSE)
pSBMD_Q$BMDs
pSBMD_Q$weights
pSBMD_Q$model_fit
prior.weights=c(1,1,1,1,0,0,0,0)
SBMD_Q = samplingQ_MA(data_Q,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec)
# convergence & divergence
SBMD_Q$convergence
# plot output
pSBMD_Q = plot.BMADRQ(SBMD_Q, weight_type = "BS", include_data = T, all = F, title = '', conv = FALSE)
pSBMD_Q$BMDs
pSBMD_Q$weights
pSBMD_Q$model_fit
pSBMD_Q$MA_fit
# plot output
pSBMD_Q = plot.BMADRQ(SBMD_Q, weight_type = "BS", include_data = T, all = F, title = '', conv = TRUE)
pSBMD_Q$BMDs
pSBMD_Q$weights
pSBMD_Q$model_fit
pSBMD_Q$MA_fit
