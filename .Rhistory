n.a2[iu]=sum(doses==dose.a2[iu])
sex2[iu]=2
}
summ.data = data.frame(x = c(dose.a1, dose.a2), y = c(mean.a1, mean.a2), s = c(sd.a1, sd.a2),
n = c(n.a1, n.a2), sex = c(sex1, sex2))
lines(summ.data$x[summ.data$sex==1], summ.data$y[summ.data$sex==1], lty = 2, lwd = 2)
lines(summ.data$x[summ.data$sex==2], summ.data$y[summ.data$sex==2], col = 2, lwd = 2)
# legend('topright', c('a = 5.3, BMD = 0.12, d = 1, sigma = 1', 'a = 10.6, BMD = 0.08, d = 1.5, sigma = 0.8'), col = c(1,2), pch = c(1,2), bty = 'n')
legend('topright', c('a = 5.3, BMD = 0.12, d = 1, sigma = 1', 'a = 5.3, BMD = 0.08, d = 1.5, sigma = 1'), col = c(1,2), pch = c(1,2), bty = 'n')
prior.weights = rep(1,16)
FLBMD <- full.laplace_MA_Cov(
data = summ.data,
sumstats = TRUE,
sd = TRUE, # option not used for Quantal data
q = q,
prior.d = 'N11'
)
FLBMD$MA
FLBMD$summary
# Plots
for (i in seq_along(get_models(type = "continuous"))){
basic.plot(FLBMD, model_name = get_models("continuous")[i], increasing = F)
}
dataDir <- '~/GitHub/BMABMDR/tests/'
load(file.path(dataDir, "das1.rda"))
data.test <- das1$data
ind.data <- data.frame(
x = data.test$Dose,
y = data.test$LDH,
#          s = data.test$SD,
#          n = data.test$N,
cov = data.test$sex
)
ind.data <- ind.data[which(!is.na(ind.data$y)),]
q = 0.05
prior.weights = rep(1,16)
FLBMD <- full.laplace_MA_Cov(
data = ind.data,
sumstats = FALSE,
sd = TRUE, # option not used for Quantal data
q = q,
prior.d = 'N11'
)
FLBMD$MA
FLBMD$summary
# Plots
for (i in seq_along(get_models(type = "continuous"))){
basic.plot(FLBMD, model_name = get_models("continuous")[i], increasing = T)
}
data <- read.csv(file.path(dataDir, "example_quantal.csv"))
# Each covariate level should be present in each dose group
data.input <- data.frame(
dose = rep(data$dose, 2),
y = rep(data$response, 2),
n = rep(data$size, 2),
covariate = c(rep('Male', 5), rep('Female', 5))
)
q = 0.1
anydoseresponseQ(data.input$dose, data.input$y, data.input$n)
# Fit without covariate
data.input.Q <- PREP_DATA_QA(data = data.input, q = q, sumstats = T)
modelFit <- full.laplaceQ_MA(data.input.Q, prior.weights = rep(1,8), pvec = c(0.05,0.5,0.95))
modelFit$MA
modelFit$summary
# Fit with covariate
modelFit <- full.laplace_MA_Q_Cov(
data = data.input,
q = q
)
modelFit$summary
modelFit$MA
# Plots --> MODEL FIT?? covariate effects not reflected in fit
for (i in seq_along(get_models(type = "quantal"))) {
basic.plotQ(modelFit, model_name = get_models(type = "quantal")[i])
}
library(BMABMDR)
packageVersion('BMABMDR')
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
#### To test changes in R functions: run compile_dll() and roxygenize()
# devtools::reload()
# devtools::check()
devtools::build() # build source package
library(gamlss)
library(BMABMDR)
packageVersion('BMABMDR')
dataDir = '~/GitHub/BMABMDR/tests/'
load(file.path(file.path(dataDir, "das1.rda")))
indData <- na.omit(das1$data[, c("Dose", "LDH")]) #BW instead of LDH works
argListPrepData <- list(
data = indData,
sumstats = FALSE,
sd = TRUE,
q = 0.05,
extended = TRUE
)
data_N <- do.call("PREP_DATA_N", argListPrepData)
data_LN <-  do.call("PREP_DATA_LN", argListPrepData)
argListFit <- list(
data.N = data_N,
data.LN = data_LN,
prior.weights = rep(1,16)
)
modelFit <- do.call("full.laplace_MA", argListFit)
modelPlot <- plot.BMADR(
mod.obj = modelFit,
weight_type = "LP",
type = ifelse(argListFit$data.N$data$is_increasing == 1, "increasing", "decreasing"),
title = '', all = F
)
modelPlot$BMDs
modelPlot$model_fit
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
rm(list=ls())
library(gamlss)         # needed for starting values for the log(BMD) parameter
library(mvtnorm)        # for the evaluation of the prior in the laplace approximation
library(truncnorm)
library(rstan)          # stan
rstan_options(auto_write = TRUE)
library(bbmle)          # for the mle2 function, for the ML method
library(AICcmodavg)     # for model averaging the ML estimates
library(bridgesampling) # for determining the marginal likelihoods with bridgesampling
library(numDeriv)       # for calculating the hessian
# library(truncdist)
# library(cmdstanr)
library(mc2d)           # for PERT distribution
library(ggpubr)
library(ggplot2)
library(RColorBrewer)
library(bayesplot)
library(posterior)
library(dplyr)
#############
setwd("~/BBMD/FINAL CODE/")
load('WS_STAN_CONT.RData')
load('WS_STAN_CONT_CLUST.RData')
load('WS_STAN_CONT_COV.RData')
load('WS_STAN_Q.RData')
load('WS_STAN_Q_COV.RData')
# Required other developed R code
source('anydoseresponse.R')
source('DRM.R')
source('FUNs.R')
source('fun_Data.R')
source('fun_Laplace.R')
source('fun_Sampling.R')
source('fct_mcmc.R')
source('fct_optim.R')
source('output.R')
source('classes.R')
source('fun_modelTest.R')
source('fun_cov_selection.R')
source('plot_model_fit.R')
source('plot_prior.R')
source('plottingfunctions.R')
source('LL.R')
source('diagnostics.R')
source('getBMD.R')
#####################################
dataDir <- '~/GitHub/BMABMDR/tests/'
dataDir <- '~/BBMD/FINAL CODE/TESTING/'
setwd('~/BBMD/FINAL CODE/TESTING/')
# ind.data <- ind.data[which(!is.na(ind.data$y)),]
# q = 0.05
# prior.weights = rep(1,16)
# FLBMD <- full.laplace_MA_Cov(
#   data = ind.data,
#   sumstats = FALSE,
#   sd = TRUE, # option not used for Quantal data
#   q = q,
#   prior.d = 'N11'
# )
data = read.csv('examplecontinuouswithcovariate (2).csv', header = T)
head(data)
summ.data <- data.frame(x = data$Dose,
y = data$Response3,
s = data$SD,
n = data$N,
cov = data$Covariate)
summ.data
FLBMD <- full.laplace_MA_Cov(
data = summ.data,
sumstats = TRUE,
sd = TRUE,
q = 0.05,
prior.d = 'N11'
)
FLBMD$MA
FLBMD$summary
# Plots
for (i in seq_along(get_models(type = "continuous"))){
basic.plot(FLBMD, model_name = get_models("continuous")[i], increasing = T)
}
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
packageVersion('BMABMDR')
dataDir <- '~/GitHub/BMABMDR/tests/'
load(file.path(dataDir, "das1.rda"))
data.test <- das1$data
ind.data <- data.frame(
x = data.test$Dose,
y = data.test$LDH,
#          s = data.test$SD,
#          n = data.test$N,
cov = data.test$sex
)
ind.data <- ind.data[which(!is.na(ind.data$y)),]
q = 0.05
prior.weights = rep(1,16)
FLBMD <- full.laplace_MA_Cov(
data = ind.data,
sumstats = FALSE,
sd = TRUE, # option not used for Quantal data
q = q,
prior.d = 'N11'
)
library(gamlss)
FLBMD <- full.laplace_MA_Cov(
data = ind.data,
sumstats = FALSE,
sd = TRUE, # option not used for Quantal data
q = q,
prior.d = 'N11'
)
FLBMD$MA
FLBMD$summary
# Plots
# for (i in seq_along(get_models(type = "continuous"))){
#   basic.plot(FLBMD, model_name = get_models("continuous")[i], increasing = T)
# }
basic.plot(FLBMD, model_name = 'E4_N', increasing = T)
data <- read.csv(file.path(dataDir, "example_quantal.csv"))
# Each covariate level should be present in each dose group
data.input <- data.frame(
dose = rep(data$dose, 2),
y = rep(data$response, 2),
n = rep(data$size, 2),
covariate = c(rep('Male', 5), rep('Female', 5))
)
q = 0.1
# Fit without covariate
data.input.Q <- PREP_DATA_QA(data = data.input, q = q, sumstats = T)
modelFit <- full.laplaceQ_MA(data.input.Q, prior.weights = rep(1,8), pvec = c(0.05,0.5,0.95))
modelFit$MA
modelFit$summary
modelFit
# Fit with covariate
modelFit <- full.laplace_MA_Q_Cov(
data = data.input,
q = q
)
modelFit$summary
modelFit$MA
# Plots --> MODEL FIT?? covariate effects not reflected in fit
# for (i in seq_along(get_models(type = "quantal"))) {
#   basic.plotQ(modelFit, model_name = get_models(type = "quantal")[i])
# }
basic.plotQ(modelFit, 'E4_Q')
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
setwd("C:/Users/lucp9385/Downloads")
data = read.csv('example_clusteredQuantal (1).csv')
orderedData <- data[,
c("dose", "y", "n", "litter")
]
argListPrep <- list(
data = orderedData,
q = 0.1,
extended = TRUE,
cluster = TRUE
)
prepData <- do.call("PREP_DATA_QA", argListPrep)
library(gamlss)
prepData <- do.call("PREP_DATA_QA", argListPrep)
# Fit models
argListFit <- list(
data.Q = prepData,
prior.weights = rep(1,8)
)
modelFit <- do.call("full.laplaceQ_MA", argListFit)
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
rm(list=ls())
library(gamlss)         # needed for starting values for the log(BMD) parameter
library(mvtnorm)        # for the evaluation of the prior in the laplace approximation
library(truncnorm)
library(rstan)          # stan
rstan_options(auto_write = TRUE)
library(bbmle)          # for the mle2 function, for the ML method
library(AICcmodavg)     # for model averaging the ML estimates
library(bridgesampling) # for determining the marginal likelihoods with bridgesampling
library(numDeriv)       # for calculating the hessian
# library(truncdist)
# library(cmdstanr)
library(mc2d)           # for PERT distribution
library(ggpubr)
library(ggplot2)
library(RColorBrewer)
library(bayesplot)
library(posterior)
library(dplyr)
#############
setwd("~/BBMD/FINAL CODE/")
load('WS_STAN_CONT.RData')
load('WS_STAN_CONT_CLUST.RData')
load('WS_STAN_CONT_COV.RData')
load('WS_STAN_Q.RData')
load('WS_STAN_Q_COV.RData')
# Required other developed R code
source('anydoseresponse.R')
source('DRM.R')
source('FUNs.R')
source('fun_Data.R')
source('fun_Laplace.R')
source('fun_Sampling.R')
source('fct_mcmc.R')
source('fct_optim.R')
source('output.R')
source('classes.R')
source('fun_modelTest.R')
source('fun_cov_selection.R')
source('plot_model_fit.R')
source('plot_prior.R')
source('plottingfunctions.R')
source('LL.R')
source('diagnostics.R')
source('getBMD.R')
setwd('~/BBMD/FINAL CODE/TESTING/')
data = read.csv('example_quantal (1).csv')
# Each covariate level should be present in each dose group
data.input <- data.frame(
dose = rep(data$dose, 2),
y = rep(data$response, 2),
n = rep(data$size, 2),
covariate = c(rep('Male', 5), rep('Female', 5))
)
data.input
q = 0.1
# Fit with covariate
modelFit <- full.laplace_MA_Q_Cov(
data = data.input,
q = q
)
# Fit without covariate
data.input.Q <- PREP_DATA_QA(data = data.input, q = q, sumstats = T)
modelFit <- full.laplaceQ_MA(data.input.Q, prior.weights = rep(1,8), pvec = c(0.05,0.5,0.95))
data.input.Q$data$N
data.input.Q$data$x
mSM_Q
source('~/BBMD/FINAL CODE/fun_modelTest.R')
modelFit <- full.laplaceQ_MA(data.input.Q, prior.weights = rep(1,8), pvec = c(0.05,0.5,0.95))
source('~/BBMD/FINAL CODE/fun_modelTest.R')
warnings()
modelFit <- full.laplaceQ_MA(data.input.Q, prior.weights = rep(1,8), pvec = c(0.05,0.5,0.95))
anydoseresponseQ(data.input$dose, data.input$y, data.input$n)
data.Q = data.input.Q
N = data.Q$data$N
if(length(data.Q$data$x) != length(unique(data.Q$data$x))){
dose = sort(unique(data.Q$data$x))
N = length(dose)
y=rep(NA,N)
n=rep(NA,N)
for (iu in (1:N)){
y[iu] = sum(data.Q$data$y[data.Q$data$x == dose[iu]])
n[iu] = sum(data.Q$data$n[data.Q$data$x == dose[iu]])
}
y.a = y
dose.a = dose
n.a = n
}
y.a
n.a
dose.a
N <- length(data.Q$data$x)
Ndose <- length(unique(dose.a))
N
Ndose
priorSM = list(
priormu = c(max(c(y.a[1]/n.a[1], 1/(5*n.a[1]))), 0.0),
priorlb = ifelse(y.a[1] != 0, max(c(prop.test(y.a[1], n.a[1])$conf.int[1]/2, 1/(10*n.a[1]))),
.Machine$double.xmin),
priorub = min(c(3*prop.test(y.a[1], n.a[1])$conf.int[2]/2, 1 - 1/(10*n.a[1])))
)
svSM = list(par = c(max(c(y.a[1]/n.a[1], 1/(5*n.a[1]))),
diff(y.a/n.a)
))
data.modstanSM = list(N=N,Ndose=Ndose,n=n.a,y=y.a, yint=y.a, nint=n.a,
priormu = priorSM$priormu,
priorlb=priorSM$priorlb, priorub=priorSM$priorub,
is_bin=1, is_betabin = 0, priorgama = 4, eps = .Machine$double.xmin
)
svSM
data.modstanSM
stanmodels$mSM_q
optSM = optimizing(stanmodels$mSM_Q, data = data.modstanSM,
seed=as.integer(seed), draws = ndraws,
init = svSM, hessian=TRUE)
