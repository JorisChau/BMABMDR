data_quantiles <- list(N = length(q_post_bmd), y = q_post_bmd, min_obs = min(q_post_bmd), max_obs = max(q_post_bmd), mode_obs = getmode(q_post_bmd))
fit.mcmc3 <- rstan::sampling(mod_pert, data = data_quantiles, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc3))
est.shape3 <- median(as.matrix(fit.mcmc3)[,1])
curve(dpert(x, min = min(q_post_bmd), mode = getmode(q_post_bmd), max = max(q_post_bmd), shape = est.shape3),
col = 4, from = 0, to = 0.25, add = T, lwd = 2, lty = 3)
### PLOT ALL FITS ###
par(mfrow = c(1,1))
hist(full_post_bmd, prob = T, xlab = "BMD", ylab = "Density", main = '')
curve(dpert(x, min = min(full_post_bmd), mode = getmode(full_post_bmd), max = max(full_post_bmd), shape = est.shape), col = 2,
from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2)
curve(dpert(x, min = min(s_post_bmd), mode = getmode(s_post_bmd), max = max(s_post_bmd), shape = est.shape2), col = 3, lty = 2,
from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2)
curve(dpert(x, min = min(q_post_bmd), mode = getmode(q_post_bmd), max = max(q_post_bmd), shape = est.shape3), col = 4, lty = 3,
from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2)
legend('topright', c('Full posterior', 'Sample N = 1000', '1000 quantiles'), col = c(2,3,4), lwd = c(2,2,2), lty = c(1,2,3))
data_full_post_bkg <- list(N = length(full_post_bkg), y = full_post_bkg, min_obs = min(full_post_bkg), max_obs = max(full_post_bkg), mode_obs = getmode(full_post_bkg))
initf2 <- function(chain_id = 1){
list(shape = 1)
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fitmcmc.bkg <- rstan::sampling(mod_pert, data = data_full_post_bkg, init = init_ll, chains = 3)
head(as.matrix(fitmcmc.bkg))
est.shape.bkg = median(as.matrix(fitmcmc.bkg)[,1])
par(mfrow = c(1,1))
hist(full_post_bkg, prob = T, xlab = "Background", ylab = "Density", main = "")
curve(dpert(x, min = min(full_post_bkg), mode = getmode(full_post_bkg), max = max(full_post_bkg), shape = est.shape.bkg),
col = 3, from = 0, to = 0.25, add = T, lwd = 2)
data_sample_bkg <- list(N = length(s_post_bkg), y = s_post_bkg, min_obs = min(s_post_bkg), max_obs = max(s_post_bkg), mode_obs = getmode(s_post_bkg))
fit.mcmc.bkg2 <- rstan::sampling(mod_pert, data = data_sample_bkg, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.bkg2))
est.shape.bkg2 <- median(as.matrix(fit.mcmc.bkg2)[,1])
curve(dpert(x, min = min(s_post_bkg), mode = getmode(s_post_bkg), max = max(s_post_bkg), shape = est.shape.bkg2),
col = 2, from = 0, to = 0.25, add = T, lwd = 2, lty = 2)
data_quantiles_bkg <- list(N = length(q_post_bkg), y = q_post_bkg, min_obs = min(q_post_bkg), max_obs = max(q_post_bkg), mode_obs = getmode(q_post_bkg))
fit.mcmc.bkg3 <- rstan::sampling(mod_pert, data = data_quantiles_bkg, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.bkg3))
est.shape.bkg3 <- median(as.matrix(fit.mcmc.bkg3)[,1])
curve(dpert(x, min = min(q_post_bkg), mode = getmode(q_post_bkg), max = max(q_post_bkg), shape = est.shape.bkg3),
col = 4, from = 0, to = 0.25, add = T, lwd = 2, lty = 3)
### PLOT ALL FITS ###
par(mfrow = c(1,1))
hist(full_post_bkg, prob = T, xlab = "Background", ylab = "Density", main = '')
curve(dpert(x, min = min(full_post_bkg), mode = getmode(full_post_bkg), max = max(full_post_bkg), shape = est.shape.bkg), col = 2,
from = min(full_post_bkg), to = max(full_post_bkg), add = T, lwd = 2)
curve(dpert(x, min = min(s_post_bkg), mode = getmode(s_post_bkg), max = max(s_post_bkg), shape = est.shape.bkg2), col = 3, lty = 2,
from = min(full_post_bkg), to = max(full_post_bkg), add = T, lwd = 2)
curve(dpert(x, min = min(q_post_bkg), mode = getmode(q_post_bkg), max = max(q_post_bkg), shape = est.shape.bkg3), col = 4, lty = 3,
from = min(full_post_bkg), to = max(full_post_bkg), add = T, lwd = 2)
legend('topright', c('Full posterior', 'Sample N = 1000', '1000 quantiles'), col = c(2,3,4), lwd = c(2,2,2), lty = c(1,2,3))
save.image("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/WS_test_bmd.RData")
library(BMABMDR)
packageVersion('BMABMDR')
library(mc2d)
setwd('G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS')
full_data <- read.csv('data_test_080823.csv', header = T, sep = ';')
dim(full_data); head(full_data)
str(full_data)
full_data$Dose <- as.numeric(gsub(",",".",full_data$Exp_conc))
full_data$Resp <- as.numeric(gsub(",",".",full_data$Av_Endp))
full_data$SD <- as.numeric(gsub(",",".",full_data$Stdev_Endp))
## Sampling specification
ndr = 30000
nrch = 3; nriter = 3000; wu = 1000; dl = 0.8; trd = 10; sd = 123
pvec = c(0.05,0.5,0.95)
id <- 2
data <- full_data[full_data$Study.ID == id, ]
summ.data <- data.frame(x = data$Dose,
y = data$Num_animals_Endp,
n = data$Num_animals_total)
q = 0.1
prior.weights = rep(1, 8)
plot(summ.data$x, summ.data$y/summ.data$n)
data_Q <- PREP_DATA_QA(data = summ.data, sumstats = TRUE, extended = TRUE, q = q, cluster = FALSE)
# FLBMD_Q <- full.laplaceQ_MA(data.Q = data_Q, prior.weights = prior.weights)
SBMD_Q <- samplingQ_MA(data.Q = data_Q, prior.weights = prior.weights, ndraws = ndr, nrchains = nrch, nriterations = nriter,
warmup = wu, delta = dl, treedepth = trd, seed = sd, pvec = pvec)
full_post_bmd <- SBMD_Q$MA_post_full_bs
full_post_bkg <- SBMD_Q$bkg_post_bs
par(mfrow=c(3,2))
hist(full_post_bmd)
hist(full_post_bkg)
s_post_bmd <- sample(SBMD_Q$MA_post_full_bs, size = 1000, replace = F)
s_post_bkg <- sample(SBMD_Q$bkg_post_bs, size = 1000, replace = F)
hist(s_post_bmd)
hist(s_post_bkg)
qnr <- 1000
q.y.bmd <- quantile(SBMD_Q$MA_post_full_bs, seq(0,1,1/qnr))
qdat_l <- q.y.bmd[1:qnr]
qdat_r <- q.y.bmd[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_bmd <- qdat_m
hist(q_post_bmd)
q.y.bkg <- quantile(SBMD_Q$bkg_post_bs, seq(0,1,1/qnr))
qdat_l <- q.y.bkg[1:qnr]
qdat_r <- q.y.bkg[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_bkg <- qdat_m
hist(q_post_bkg)
#############################
### FIT PERT DISTRIBUTION ###
## Estimate shape only
setwd("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS")
getmode <- function(v){
dx <- density(v)
dx$x[dx$y == max(dx$y)]
}
mod_pert <- rstan::stan_model("pert.stan")
##################################
### BMD: fit to full posterior ###
data_full_post <- list(N = length(full_post_bmd), y = full_post_bmd, min_obs = min(full_post_bmd), max_obs = max(full_post_bmd), mode_obs = getmode(full_post_bmd))
# opt <- rstan::optimizing(mod_pert, data = data_full_post, draws = 30000)
# opt$par
initf2 <- function(chain_id = 1){
list(shape = 1)
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fitmcmc <- rstan::sampling(mod_pert, data = data_full_post, init = init_ll, chains = 3)
head(as.matrix(fitmcmc))
est.shape = median(as.matrix(fitmcmc)[,1])
par(mfrow = c(1,1))
hist(full_post_bmd, prob = T, xlab = "BMD", ylab = "Density", main = "")
curve(dpert(x, min = min(full_post_bmd), mode = getmode(full_post_bmd), max = max(full_post_bmd), shape = est.shape),
col = 3, from = 0, to = 0.25, add = T, lwd = 2)
dim(as.matrix(fit.mcmc))
dim(as.matrix(fitmcmc))
length(full_post_bmd)
curve(dpert(x, min = min(full_post_bmd), mode = getmode(full_post_bmd), max = max(full_post_bmd), shape = est.shape),
col = 3, from = 0, to = 4000, add = T, lwd = 2)
data_sample <- list(N = length(s_post_bmd), y = s_post_bmd, min_obs = min(s_post_bmd), max_obs = max(s_post_bmd), mode_obs = getmode(s_post_bmd))
fit.mcmc2 <- rstan::sampling(mod_pert, data = data_sample, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc2))
est.shape2 <- median(as.matrix(fit.mcmc2)[,1])
curve(dpert(x, min = min(s_post_bmd), mode = getmode(s_post_bmd), max = max(s_post_bmd), shape = est.shape2),
col = 2, from = 0, to = 0.25, add = T, lwd = 2, lty = 2)
data_quantiles <- list(N = length(q_post_bmd), y = q_post_bmd, min_obs = min(q_post_bmd), max_obs = max(q_post_bmd), mode_obs = getmode(q_post_bmd))
fit.mcmc3 <- rstan::sampling(mod_pert, data = data_quantiles, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc3))
est.shape3 <- median(as.matrix(fit.mcmc3)[,1])
curve(dpert(x, min = min(q_post_bmd), mode = getmode(q_post_bmd), max = max(q_post_bmd), shape = est.shape3),
col = 4, from = 0, to = 0.25, add = T, lwd = 2, lty = 3)
### PLOT ALL FITS ###
par(mfrow = c(1,1))
hist(full_post_bmd, prob = T, xlab = "BMD", ylab = "Density", main = '')
curve(dpert(x, min = min(full_post_bmd), mode = getmode(full_post_bmd), max = max(full_post_bmd), shape = est.shape), col = 2,
from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2)
curve(dpert(x, min = min(s_post_bmd), mode = getmode(s_post_bmd), max = max(s_post_bmd), shape = est.shape2), col = 3, lty = 2,
from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2)
curve(dpert(x, min = min(q_post_bmd), mode = getmode(q_post_bmd), max = max(q_post_bmd), shape = est.shape3), col = 4, lty = 3,
from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2)
legend('topright', c('Full posterior', 'Sample N = 1000', '1000 quantiles'), col = c(2,3,4), lwd = c(2,2,2), lty = c(1,2,3))
getmode(full_post_bmd)
data_full_post_bkg <- list(N = length(full_post_bkg), y = full_post_bkg, min_obs = min(full_post_bkg), max_obs = max(full_post_bkg), mode_obs = getmode(full_post_bkg))
initf2 <- function(chain_id = 1){
list(shape = 1)
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fitmcmc.bkg <- rstan::sampling(mod_pert, data = data_full_post_bkg, init = init_ll, chains = 3)
head(as.matrix(fitmcmc.bkg))
est.shape.bkg = median(as.matrix(fitmcmc.bkg)[,1])
par(mfrow = c(1,1))
hist(full_post_bkg, prob = T, xlab = "Background", ylab = "Density", main = "")
curve(dpert(x, min = min(full_post_bkg), mode = getmode(full_post_bkg), max = max(full_post_bkg), shape = est.shape.bkg),
col = 3, from = 0, to = 0.25, add = T, lwd = 2)
data_sample_bkg <- list(N = length(s_post_bkg), y = s_post_bkg, min_obs = min(s_post_bkg), max_obs = max(s_post_bkg), mode_obs = getmode(s_post_bkg))
fit.mcmc.bkg2 <- rstan::sampling(mod_pert, data = data_sample_bkg, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.bkg2))
est.shape.bkg2 <- median(as.matrix(fit.mcmc.bkg2)[,1])
curve(dpert(x, min = min(s_post_bkg), mode = getmode(s_post_bkg), max = max(s_post_bkg), shape = est.shape.bkg2),
col = 2, from = 0, to = 0.25, add = T, lwd = 2, lty = 2)
data_quantiles_bkg <- list(N = length(q_post_bkg), y = q_post_bkg, min_obs = min(q_post_bkg), max_obs = max(q_post_bkg), mode_obs = getmode(q_post_bkg))
fit.mcmc.bkg3 <- rstan::sampling(mod_pert, data = data_quantiles_bkg, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.bkg3))
est.shape.bkg3 <- median(as.matrix(fit.mcmc.bkg3)[,1])
curve(dpert(x, min = min(q_post_bkg), mode = getmode(q_post_bkg), max = max(q_post_bkg), shape = est.shape.bkg3),
col = 4, from = 0, to = 0.25, add = T, lwd = 2, lty = 3)
### PLOT ALL FITS ###
par(mfrow = c(1,1))
hist(full_post_bkg, prob = T, xlab = "Background", ylab = "Density", main = '')
curve(dpert(x, min = min(full_post_bkg), mode = getmode(full_post_bkg), max = max(full_post_bkg), shape = est.shape.bkg), col = 2,
from = min(full_post_bkg), to = max(full_post_bkg), add = T, lwd = 2)
curve(dpert(x, min = min(s_post_bkg), mode = getmode(s_post_bkg), max = max(s_post_bkg), shape = est.shape.bkg2), col = 3, lty = 2,
from = min(full_post_bkg), to = max(full_post_bkg), add = T, lwd = 2)
curve(dpert(x, min = min(q_post_bkg), mode = getmode(q_post_bkg), max = max(q_post_bkg), shape = est.shape.bkg3), col = 4, lty = 3,
from = min(full_post_bkg), to = max(full_post_bkg), add = T, lwd = 2)
legend('topright', c('Full posterior', 'Sample N = 1000', '1000 quantiles'), col = c(2,3,4), lwd = c(2,2,2), lty = c(1,2,3))
save.image("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/WS_SBMDQ_fit.RData")
library('rstantools')
library('usethis')
library('roxygen2')
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
####################################################################################
####################################################################################
### Instructions for publishing a package on CRAN: https://r-pkgs.org/release.html
# https://cran.r-project.org/web/packages/rstantools/vignettes/minimal-rstan-package.html
## Compile package and generate the documentation
rstan_config() # recompile stan models
# example(source)
# try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# # roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
load("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/WS_SBMDQ_fit.RData")
library('rstantools')
library('usethis')
library('roxygen2')
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
####################################################################################
####################################################################################
### Instructions for publishing a package on CRAN: https://r-pkgs.org/release.html
# https://cran.r-project.org/web/packages/rstantools/vignettes/minimal-rstan-package.html
## Compile package and generate the documentation
rstan_config() # recompile stan models
# example(source)
# try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# # roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
packageVersion('BMABMDR')
library(mc2d)
load("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/WS_SBMDQ_fit.RData")
SBMD_Q$MA_bridge_sampling
hist(q_post_bkg)
hist(q_post_bmd)
######################################################################################################
## Model that estimates shape + mode
mod_pert2 <- stan_model("pert_v2.stan") ## y-min or max-y can result in 0 --> log(0) --> add 0.0001?
initf2 <- function(chain_id = 1){
list(shape = 0.0001, mode = getmode(y.new))
}
setwd("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS")
######################################################################################################
## Model that estimates shape + mode
mod_pert2 <- stan_model("pert_v2.stan") ## y-min or max-y can result in 0 --> log(0) --> add 0.0001?
initf2 <- function(chain_id = 1){
list(shape = 0.0001, mode = getmode(y.new))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
data_full_post <- list(N = length(full_post_bmd), y = full_post_bmd, min_obs = min(full_post_bmd), max_obs = max(full_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(full_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fitmcmc <- rstan::sampling(mod_pert2, data = data_full_post, init = init_ll, chains = 3)
head(as.matrix(fitmcmc))
est.shape = median(as.matrix(fitmcmc)[,1])
est.mode = median(as.matrix(fitmcmc)[,2])
par(mfrow = c(1,1))
hist(full_post_bmd, prob = T, xlab = "BMD", ylab = "Density", main = "")
curve(dpert(x, min = min(full_post_bmd), mode = est.mode, max = max(full_post_bmd), shape = est.shape),
col = 3, from = 0, to = 4000, add = T, lwd = 2)
data_sample <- list(N = length(s_post_bmd), y = s_post_bmd, min_obs = min(s_post_bmd), max_obs = max(s_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(s_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc2 <- rstan::sampling(mod_pert2, data = data_sample, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc2))
est.shape2 <- median(as.matrix(fit.mcmc2)[,1])
est.mode2 <- median(as.matrix(fit.mcmc2)[,2])
curve(dpert(x, min = min(s_post_bmd), mode = est.mode2, max = max(s_post_bmd), shape = est.shape2),
col = 2, from = 0, to = 4000, add = T, lwd = 2, lty = 2)
data_quantiles <- list(N = length(q_post_bmd), y = q_post_bmd, min_obs = min(q_post_bmd), max_obs = max(q_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc3 <- rstan::sampling(mod_pert2, data = data_quantiles, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc3))
est.shape3 <- median(as.matrix(fit.mcmc3)[,1])
est.mode3 <- median(as.matrix(fit.mcmc3)[,2])
curve(dpert(x, min = min(q_post_bmd), mode = est.mode3, max = max(q_post_bmd), shape = est.shape3),
col = 4, from = 0, to = 4000, add = T, lwd = 2, lty = 3)
### PLOT ALL FITS ###
par(mfrow = c(1,1))
hist(full_post_bmd, prob = T, xlab = "BMD", ylab = "Density", main = '')
curve(dpert(x, min = min(full_post_bmd), mode = est.mode, max = max(full_post_bmd), shape = est.shape), col = 2,
from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2)
curve(dpert(x, min = min(s_post_bmd), mode = est.mode2, max = max(s_post_bmd), shape = est.shape2), col = 3, lty = 2,
from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2)
curve(dpert(x, min = min(q_post_bmd), mode = est.mode3, max = max(q_post_bmd), shape = est.shape3), col = 4, lty = 3,
from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2)
legend('topright', c('Full posterior', 'Sample N = 1000', '1000 quantiles'), col = c(2,3,4), lwd = c(2,2,2), lty = c(1,2,3))
est.mode3
save.image("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/WS_SBMDQ_fit_m+s.RData")
data_full_post <- list(N = length(full_post_bmd), y = full_post_bmd, min_obs = min(full_post_bmd), max_obs = max(full_post_bmd), mode_obs = getmode(full_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1)
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fitmcmc <- rstan::sampling(mod_pert, data = data_full_post, init = init_ll, chains = 3)
getmode(full_post_bmd)
library('rstantools')
library('usethis')
library('roxygen2')
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
####################################################################################
####################################################################################
### Instructions for publishing a package on CRAN: https://r-pkgs.org/release.html
# https://cran.r-project.org/web/packages/rstantools/vignettes/minimal-rstan-package.html
## Compile package and generate the documentation
rstan_config() # recompile stan models
# example(source)
# try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# # roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
packageVersion('BMABMDR')
library(mc2d)
setwd('G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/OFT')
full_data <- read.csv('data_test_080823.csv', header = T, sep = ';')
dim(full_data); head(full_data)
str(full_data)
full_data$Dose <- as.numeric(gsub(",",".",full_data$Exp_conc))
full_data$Resp <- as.numeric(gsub(",",".",full_data$Av_Endp))
full_data$SD <- as.numeric(gsub(",",".",full_data$Stdev_Endp))
head(full_data)
## Sampling specification
ndr = 30000
nrch = 3; nriter = 3000; wu = 1000; dl = 0.8; trd = 10; sd = 123
pvec = c(0.05,0.5,0.95)
id <- 2
data <- full_data[full_data$Study.ID == id, ]
summ.data <- data.frame(x = data$Dose,
y = data$Num_animals_Endp,
n = data$Num_animals_total)
q = 0.1
prior.weights = rep(1, 8)
plot(summ.data$x, summ.data$y/summ.data$n)
data_Q <- PREP_DATA_QA(data = summ.data, sumstats = TRUE, extended = TRUE, q = q, cluster = FALSE)
# FLBMD_Q <- full.laplaceQ_MA(data.Q = data_Q, prior.weights = prior.weights)
SBMD_Q <- samplingQ_MA(data.Q = data_Q, prior.weights = prior.weights, ndraws = ndr, nrchains = nrch, nriterations = nriter,
warmup = wu, delta = dl, treedepth = trd, seed = sd, pvec = pvec)
full_post_bmd <- SBMD_Q$MA_post_full_bs
library(BMABMDR)
packageVersion('BMABMDR')
library(mc2d)
setwd('G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/OFT')
full_data <- read.csv('data_test_080823.csv', header = T, sep = ';')
dim(full_data); head(full_data)
str(full_data)
full_data$Dose <- as.numeric(gsub(",",".",full_data$Exp_conc))
full_data$Resp <- as.numeric(gsub(",",".",full_data$Av_Endp))
full_data$SD <- as.numeric(gsub(",",".",full_data$Stdev_Endp))
head(full_data)
table(full_data$Study.ID)
## Sampling specification
ndr = 30000
nrch = 3; nriter = 3000; wu = 1000; dl = 0.8; trd = 10; sd = 123
pvec = c(0.05,0.5,0.95)
id <- 4
data <- full_data[full_data$Study.ID == id, ]
summ.data <- data.frame(x = data$Dose,
y = data$Resp,
s = data$SD,
n = data$Num_animals_total)
q = 0.05
prior.weights = rep(1, 16)
par(mfrow=c(1,1))
plot(summ.data$x, summ.data$y)
data_N <- PREP_DATA_N(data = summ.data, sumstats = TRUE, sd = TRUE, extended = TRUE, q = q, prior.d = 'N11')
data_LN <- PREP_DATA_LN(data = summ.data, sumstats = TRUE, sd = TRUE, extended = TRUE, q = q, prior.d = 'N11')
SBMD <- sampling_MA(data.N = data_N, data.LN = data_LN, prior.weights = prior.weights, ndraws = ndr, nrchains = nrch, nriterations = nriter,
warmup = wu, delta = dl, treedepth = trd, seed = sd, pvec = pvec)
SBMD$MA_bridge_sampling
SBMD$convergence
pSBMD <- plot.BMADR(SBMD, type = 'increasing', weight_type = 'BS', include_data = TRUE, all = FALSE, log = FALSE, title = '', conv = FALSE)
pSBMD$model_fit
pSBMD$MA_fit
full_post_bmd <- SBMD$MA_post_full_bs
full_post_bkg <- SBMD$bkg_post_bs
full_post_maxy <- SBMD$maxy_post_bs
par(mfrow=c(2,3))
hist(full_post_bmd)
hist(full_post_bkg)
hist(full_post_maxy)
qnr <- 1000
q.y.bmd <- quantile(SBMD$MA_post_full_bs, seq(0,1,1/qnr))
qdat_l <- q.y.bmd[1:qnr]
qdat_r <- q.y.bmd[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_bmd <- qdat_m
hist(q_post_bmd)
q.y.bkg <- quantile(SBMD$bkg_post_bs, seq(0,1,1/qnr))
qdat_l <- q.y.bkg[1:qnr]
qdat_r <- q.y.bkg[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_bkg <- qdat_m
hist(q_post_bkg)
q.y.maxy <- quantile(SBMD$maxy_post_bs, seq(0,1,1/qnr))
qdat_l <- q.y.maxy[1:qnr]
qdat_r <- q.y.maxy[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_maxy <- qdat_m
hist(q_post_maxy)
getmode <- function(v){
dx <- density(v)
dx$x[dx$y == max(dx$y)]
}
mod_pert <- rstan::stan_model("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/PERT_MODEL.stan")
data_quantiles <- list(N = length(q_post_bmd), y = q_post_bmd, min_obs = min(q_post_bmd), max_obs = max(q_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc <- rstan::sampling(mod_pert, data = data_quantiles, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc))
est.shape <- median(as.matrix(fit.mcmc)[,1])
est.mode <- median(as.matrix(fit.mcmc)[,2])
par(mfrow = c(2,2))
hist(full_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
curve(dpert(x, min = min(q_post_bmd), mode = est.mode, max = max(q_post_bmd), shape = est.shape),
col = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2, lty = 1)
## Doesn't fit so good -> full posterior?
data_full_post <- list(N = length(full_post_bmd), y = full_post_bmd, min_obs = min(full_post_bmd), max_obs = max(full_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(full_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fitmcmc.full <- rstan::sampling(mod_pert, data = data_full_post, init = init_ll, chains = 3)
data_quantiles_bkg <- list(N = length(q_post_bkg), y = q_post_bkg, min_obs = min(q_post_bkg), max_obs = max(q_post_bkg))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_bkg))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc.bkg <- rstan::sampling(mod_pert, data = data_quantiles_bkg, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.bkg))
est.shape.bkg <- median(as.matrix(fit.mcmc.bkg)[,1])
est.mode.bkg <- median(as.matrix(fit.mcmc.bkg)[,2])
hist(full_post_bkg, prob = T, breaks = 50, main = "", xlab = "Min. response")
curve(dpert(x, min = min(q_post_bkg), mode = est.mode.bkg, max = max(q_post_bkg), shape = est.shape.bkg),
col = 2, from = min(full_post_bkg), to = max(full_post_bkg), add = T, lwd = 2, lty = 1)
data_quantiles_maxy <- list(N = length(q_post_maxy), y = q_post_maxy, min_obs = min(q_post_maxy), max_obs = max(q_post_maxy))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_maxy))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc.maxy <- rstan::sampling(mod_pert, data = data_quantiles_maxy, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.maxy))
est.shape.maxy <- median(as.matrix(fit.mcmc.maxy)[,1])
est.mode.maxy <- median(as.matrix(fit.mcmc.maxy)[,2])
hist(full_post_maxy, prob = T, breaks = 50, main = "", xlab = 'Max. response')
curve(dpert(x, min = min(q_post_maxy), mode = est.mode.maxy, max = max(q_post_maxy), shape = est.shape.maxy),
col = 2, from = min(full_post_maxy), to = max(full_post_maxy), add = T, lwd = 2, lty = 1)
