p <- ggtree(phyl) %<+% annot_data
p
phyl
class(df_tip_data)
class(annot_data)
?scale_size_continuous
p <- ggtree(phyl, as.Date = T) %<+% annot_data
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2()
p
p <- ggtree(phyl, mrsd = min(dates$date), as.Date = T) %<+% annot_data
p <- ggtree(phyl, mrsd = max(dates$date), as.Date = T) %<+% annot_data
p
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2()
max(dates$date)
p <- ggtree(phyl, mrsd = max(dates$date), as.Date = T)
p
p
p + geom_treescale()
p <- ggtree(phyl, mrsd = max(dates$date), as.Date = T) %<+% annot_data
p
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2()
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab()
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint()
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2()
?theme_tree2
max(dates$date)
# ggplot(phyl, aes(x, y)) + geom_tree(layout = 'circular') #+ theme_tree2() + geom_tiplab()
#
ggtree(phyl, mrsd = max(dates$date), aes(x, y)) + theme_tree2() + geom_tiplab(size = 3) #+ geom_rootedge()
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T) %<+% annot_data
p
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2()
# ggplot(phyl, aes(x, y)) + geom_tree(layout = 'circular') #+ theme_tree2() + geom_tiplab()
#
ggtree(phyl, mrsd = max(dates$date)) + theme_tree2() + geom_tiplab(size = 3) #+ geom_rootedge()
# ggplot(phyl, aes(x, y)) + geom_tree(layout = 'circular') #+ theme_tree2() + geom_tiplab()
#
ggtree(phyl, mrsd = max(dates$date), as.Date = T) + theme_tree2() + geom_tiplab(size = 3) #+ geom_rootedge()
ggplot(phyl) + geom_tree() + theme_tree() + geom_tiplab()
ggplot(phyl) + geom_tree(mrsd = max(dates$date)) + theme_tree() + geom_tiplab()
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T, ladderize = F) %<+% annot_data
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2()
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T, ladderize = T) %<+% annot_data
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2()
?geom_tree
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T, ladderize = F, layout = 'dendrogram') %<+% annot_data
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2()
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T, ladderize = F, layout = 'slanted') %<+% annot_data
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T, ladderize = F, layout = 'roundrect') %<+% annot_data
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2()
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T, ladderize = F, layout = 'circular') %<+% annot_data
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2()
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T, ladderize = F, layout = 'daylight') %<+% annot_data
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2()
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T, ladderize = F, layout = 'radial') %<+% annot_data
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2()
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T, ladderize = F, layout = 'rectangular') %<+% annot_data
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2()
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2() +
scale_x_ggtree()
?scale_x_ggtree
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2() +
scale_x_ggtree(breaks = c(1,2,3))
jpeg('time_tree.jpg', width = 20, height = 20, units = 'cm', res = 300)
dates$date
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2() +
scale_x_ggtree(breaks = c('2019-12-01', '2020-10-01', '2020-12-01', '2021-03-01'))
as.Date(c('2019-12-01', '2020-10-01', '2020-12-01', '2021-03-01'))
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
geom_tippoint() +
theme_tree2() +
scale_x_ggtree(breaks = as.Date(c('2019-12-01', '2020-10-01', '2020-12-01', '2021-03-01')))
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T, ladderize = F, layout = 'rectangular') %<+% annot_data
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
# geom_tippoint() +
theme_tree2() +
scale_x_ggtree(breaks = as.Date(c('2019-12-01', '2020-10-01', '2020-12-01', '2021-03-01')))
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T, ladderize = F, layout = 'rectangular') %<+% annot_data
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
# geom_tippoint() +
theme_tree2() #+
p
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
# geom_tippoint() +
theme_tree2() #+
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T, ladderize = F, layout = 'rectangular') %<+% annot_data
p
phyl
pij
class(dates$date)
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
# geom_tippoint() +
theme_tree2() +
scale_x_ggtree(breaks = dates$date)
?xlim_tree
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
# geom_tippoint() +
theme_tree2() +
xlim_tree(5)
p +
# geom_treescale() +
# geom_nodepoint() +
geom_tiplab() +
# geom_tippoint() +
theme_tree2() +
xlim_tree(dates$date)
p <- ggtree(phyl, mrsd = max(dates$date), aes(x, y), as.Date = T, ladderize = F, layout = 'rectangular') %<+% annot_data
p
library('rstantools')
library('usethis')
library('roxygen2')
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
# https://cran.r-project.org/web/packages/rstantools/vignettes/minimal-rstan-package.html
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
# devtools::reload()
# devtools::check()
devtools::build() # build source package
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
library(Rcpp)
roxygen2::roxygenize() # generate documentation
traceback()
library(devtools)
roxygen2::roxygenize() # generate documentation
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
?PREP_DATA_N_C
?reload
?check?
f
?check
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
Sys.getenv("PATH")
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
library('rstantools')
library('usethis')
library('roxygen2')
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
rstan_config() # recompile stan models
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
dev.tools::check()
devtools::check()
library(devtools)
install.packages(c("devtools", "roxygen2"))
install.packages(c("devtools", "roxygen2"))
install.packages(c("devtools", "roxygen2"))
install.packages(c("devtools", "roxygen2"))
install.packages(c("devtools", "roxygen2"))
install.packages(c("devtools", "roxygen2"))
install.packages(c("devtools", "roxygen2"))
install.packages('roxygen2')
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::check()
roxygen2::roxygenize() # generate documentation
install.packages('rlang')
install.packages("rlang")
install.packages("rlang")
roxygen2::roxygenize() # generate documentation
install.packages('rlang')
roxygen2::roxygenize() # generate documentation
devtools::check()
install.packages('fs')
devtools::check()
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
roxygen2::roxygenize() # generate documentation
devtools::check()
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
roxygen2::roxygenize() # generate documentation
roxygen2::roxygenize() # generate documentation
install.packages('cli')
install.packages("cli")
install.packages("cli")
roxygen2::roxygenize() # generate documentation
roxygen2::roxygenize() # generate documentation
library('rstantools')
library('usethis')
library('roxygen2')
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
roxygen2::roxygenize() # generate documentation
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
devtools::check()
670000/1500000
load("G:/My Drive/UHasselt/PhD/HIV/HIV Uganda (Rebecca Nsubuga)/UPDAT DEC 2020/INTERVENTION/UNCERTAINTY/unct_plot.RData")
# Incidence
for(s in 1:10){
if(s == 1){
plot(output_all[[s]][,"time"], output_all[[s]][,"IRtot"], type="l")
}else{
lines(output_all[[s]][,"time"], output_all[[s]][,"IRtot"], col = s)
}
}
# Prevalence
for(s in 1:10){
if(s == 1){
plot(output_all[[s]][,"time"], output_all[[s]][,"PRtot"], type="l")
}else{
lines(output_all[[s]][,"time"], output_all[[s]][,"PRtot"], col = s)
}
}
dim(parms)
dim(param)
