mod_H0_2 = brm(x | trials(n) ~ 1, data = thyd, family = binomial, save_all_pars = T)
mod_SM_2 = brm(x | trials(n) ~ dose, data = thyd, family = binomial, save_all_pars = T)
BF_brms_bridge_2 = bayes_factor(mod_SM_2, mod_H0_2)
BF_brms_bridge_2
BF_brms_bridge_2$bf
bridge_H0 <- bridgesampling::bridge_sampler(mod_H0_2, silent=T)
bridge_SM <- bridgesampling::bridge_sampler(mod_SM_2, silent=T)
bf=bridgesampling::bf(bridge_H0,bridge_SM)
bf
bf=bridgesampling::bf(bridge_SM,bridge_H0)
bf
bf$bf
bridge_H0$logml; bridge_SM$logml
llH0 = bridge_H0$logml; llSM = bridge_SM$logml # log marginal likelihoods
BIC.SM = N*log(sum(n)) - 2*llSM; BIC.SM
BIC.H0 = 1*log(sum(n)) - 2*llH0; BIC.H0
N = length(unique(thyd$dose))
n = thyd$n
BIC.SM = N*log(sum(n)) - 2*llSM; BIC.SM
BIC.H0 = 1*log(sum(n)) - 2*llH0; BIC.H0
bf = exp(-0.5 * (BIC.H0 - BIC.SM)); bf # > 10 so in favor of H0
1/bf
BIC.SM = N*log(sum(N)) - 2*llSM; BIC.SM
BIC.H0 = 1*log(sum(N)) - 2*llH0; BIC.H0
bf = exp(-0.5 * (BIC.H0 - BIC.SM)); bf # 0.58 so in favor of SM
1/bf
summ.data
dose = c(1.6,3,5.5,12.3,25.9)
y = c(48,48,19,29,33)
n = c(2288,2093,907,909,691)
plot(dose,y/n)
summ.data = data.frame(x = dose, y = y, n = n)
stancode(mod_H0_2)
?set_prior
summ.data
mod_H0_2 = brm(y | trials(n) ~ 1, data = summ.data, family = binomial, save_all_pars = T)
library('rstantools')
library('usethis')
library('roxygen2')
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
library(gamlss)
library(brms)
load("~/BBMD/FINAL CODE/TESTING/das6.rda")
deadpups2 <- data.frame(dose = das6$data$dose,
y = das6$data$dead_pups,
n = das6$data$nr_born,
zz = das6$data$zz)
deadpups2$zz = 1:nrow(deadpups2) ## litter indicator needed?
mod_clust_H0 = brms::brm(y | trials(n) ~ 1 + (1 | zz),
data = deadpups2,
family = binomial,
save_pars = save_pars(all = TRUE))
mod_clust_SM = brms::brm(y | trials(n) ~ as.factor(dose) + (1 | zz),
data = deadpups2,
family = binomial,
save_pars = save_pars(all = TRUE))
BF_brms_bridge_clust = brms::bayes_factor(mod_clust_SM, mod_clust_H0)
BF_brms_bridge_clust$bf; BF_brms_bridge_clust
anydoseresponseQ(deadpups2$dose, deadpups2$y, deadpups2$n, cluster = T)
1/0.694239
mod_clust_H0$fit$lp__
bridge_H0 <- bridgesampling::bridge_sampler(mod_clust_H0, silent=T)
bridge_SM <- bridgesampling::bridge_sampler(mod_clust_SM, silent=T)
bf=bridgesampling::bf(bridge_SM,bridge_H0)
bf
bridge_H0
bridge_SM
plot(deadpups2$dose, deadpups2$y/deadpups2$n)
unique(deadpups2$dose)
stancode(mod_clust_H0)
mod_clust_SM = brms::brm(y | trials(n) ~ as.factor(dose) + (1 | 1:nrow(deadpups2)),
data = deadpups2,
family = binomial,
save_pars = save_pars(all = TRUE))
1:nrow(deadpups2)
summary(mod_clust_H0)
summary(mod_clust_SM)
bridge_H0$logml
bridge_SM$logml
bf
library('rstantools')
library('usethis')
library('roxygen2')
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
library(gamlss)
load("~/BBMD/FINAL CODE/TESTING/das6.rda")
deadpups2 <- data.frame(dose = das6$data$dose,
y = das6$data$dead_pups,
n = das6$data$nr_born,
zz = das6$data$zz)
deadpups2$zz = 1:nrow(deadpups2) ## litter indicator needed?
mod_clust_H0 = brms::brm(y | trials(n) ~ 1 + (1 | zz),
data = deadpups2,
family = binomial(link='logit'),
save_pars = save_pars(all = TRUE))
mod_clust_SM = brms::brm(y | trials(n) ~ as.factor(dose) + (1 | zz), # random intercept
data = deadpups2,
family = binomial(link='logit'),
save_pars = save_pars(all = TRUE))
BF_brms_bridge_clust = brms::bayes_factor(mod_clust_SM, mod_clust_H0)
BF_brms_bridge_clust$bf; BF_brms_bridge_clust
bridge_H0 <- bridgesampling::bridge_sampler(mod_clust_H0, silent=T)
bridge_SM <- bridgesampling::bridge_sampler(mod_clust_SM, silent=T)
bf=bridgesampling::bf(bridge_SM,bridge_H0)
bf
anydoseresponseQ(deadpups2$dose, deadpups2$y, deadpups2$n, cluster = T)
llH0 = bridge_H0$logml; llSM = bridge_SM$logml
llH0
llSM
N = length(unique(deadpups2$dose))
N
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
anydoseresponseQ(deadpups2$dose, deadpups2$y, deadpups2$n, cluster = T)
dr = anydoseresponseQ(deadpups2$dose, deadpups2$y, deadpups2$n, cluster = T)
1/dr$bf
round(bf, 4)
round(bf$bf, 4)
bf$bf
BIC.H0 = - 2 * llH0 + (2 * log(sum(deadpups2$n))) # 2 parameters: a and rho
BIC.SM = - 2 * llSM + (length(unique(deadpups2$dose))+1 * log(sum(deadpups2$n)))
BIC.H0
BIC.SM
bf = exp(-0.5 * (BIC.H0 - BIC.SM))
bf
1/bf
library('rstantools')
library('usethis')
library('roxygen2')
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
library(gamlss)
library(BMABMDR)
data <- read.csv('~/BBMD/FINAL CODE/example_continuous.csv', header = T)
dim(data); head(data); tail(data)
dim(data); data
data_N <- PREP_DATA_N(data, q = 0.05)#, geom.stats = T)
data_LN <- PREP_DATA_LN(data, q = 0.05)#, geom.stats = T)
FLBMD <- full.laplace_MA(data_N, data_LN, seed = 123, prior.weights = c(rep(0,8),rep(1,8)))
FLBMD$MA
FLBMD$p.msg
print.BMADR(FLBMD, 'continuous')
pFLBMD <- plot.BMADR(FLBMD, type = 'increasing', weight_type = 'LP', all = FALSE, title = '', log = F)
pFLBMD$BMDs
pFLBMD$weights
pFLBMD$model_fit_N
pFLBMD$model_fit_LN
pFLBMD$model_fit
pFLBMD$MA_fit
pFLBMD$model_fit
load("~/BBMD/FINAL CODE/ViableEmbryos.csv", header = T)
data <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos.csv", header = T)
head(data)
dim(data)
head(data); tail(data); dim(data)
load("~/BBMD/FINAL CODE/TESTING/das6.rda")
data <- data.frame(dose = data$Dose,
y = data$NonViable,
n = data$EggsSet)
plot(data$dose, data$y/data$n)
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = TRUE,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = TRUE)
anydoseresponseQ(data$dose, data$y, data$n, cluster = T)
test_laplace <- full.laplaceQ_MA(data.Q = deadpupsQ, prior.weights = c(rep(1,6), 1, 1))
test_laplace <- full.laplaceQ_MA(data.Q = deadpupsQ, prior.weights = c(rep(1,4), 0, 1, 1, 1))
test_laplace <- full.laplaceQ_MA(data.Q = deadpupsQ, prior.weights = c(rep(1,4), rep(0,4)))
deadpupsQ$data
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = TRUE,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = TRUE, prior.d = 'EPA')
warnings()
test_laplace <- full.laplaceQ_MA(data.Q = deadpupsQ, prior.weights = c(rep(1,4), rep(1,4)))
print.BMADR(test_laplace, 'quantal')
test_laplace <- full.laplaceQ_MA(data.Q = deadpupsQ, prior.weights = c(rep(1,2), 0, 0, rep(0,4)))
load("~/BBMD/FINAL CODE/TESTING/das5.rda")
# # data.input <- das5$data[das5$data$sex==1,]
data.input <- das5$data
data.input <- data.frame(dose = data.input$dose,
response = data.input$foetalweight,
litter = data.input$number)
plot(data.input$dose, data.input$response)
plot(data.input$dose, data.input$response, xlab = 'dose', ylab = 'fetal weight')
library(dplyr)
data.plot <- data.input %>%
group_by(dose, litter) %>%
summarise(mresp = mean(response))
# plot(data.plot$dose/max(data.plot$dose), data.plot$mresp, xlab = 'Dose', ylab = 'Litter mean response')
points(data.plot$dose, data.plot$mresp, pch = 15, col = 2)
data.plot2 <- data.input %>%
group_by(dose) %>%
summarise(mresp = mean(response))
# plot(data.plot$dose/max(data.plot$dose), data.plot$mresp, xlab = 'Dose', ylab = 'Litter mean response')
points(data.plot2$dose, data.plot2$mresp, pch = 18, cex = 2, col = 3)
data.input.test.DR <- data.input
data.input.test.DR$litter <- 1
summarize.indiv.data(data.input, 'continuous', cluster = TRUE)
summarize.indiv.data(data.input, 'continuous', cluster = F)
library('rstantools')
library('usethis')
library('roxygen2')
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
data <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos.csv", header = T)
head(data); tail(data); dim(data)
data <- data.frame(dose = data$Dose,
y = data$NonViable,
n = data$EggsSet)
plot(data$dose, data$y/data$n)
# anydoseresponseQ(data$dose, data$y, data$n, cluster = T)
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = TRUE,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = TRUE, prior.d = 'EPA')
# anydoseresponseQ(data$dose, data$y, data$n, cluster = T)
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = TRUE,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = TRUE, prior.d = 'EPA')
library(gamlss)
# anydoseresponseQ(data$dose, data$y, data$n, cluster = T)
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = TRUE,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = TRUE, prior.d = 'EPA')
warnings()
data <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos.csv", header = T)
head(data); tail(data); dim(data)
data <- data.frame(dose = data$Dose,
y = data$NonViable,
n = data$EggsSet)
plot(data$dose, data$y/data$n)
# anydoseresponseQ(data$dose, data$y, data$n, cluster = T)
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = TRUE,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = TRUE, prior.d = 'EPA')
# anydoseresponseQ(data$dose, data$y, data$n, cluster = T)
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = TRUE,
q = 0.1,
cluster = TRUE)
data <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos.csv", header = T)
head(data); tail(data); dim(data)
# anydoseresponseQ(data$dose, data$y, data$n, cluster = T)
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
data <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos.csv", header = T)
head(data); tail(data); dim(data)
data <- data.frame(dose = data$Dose,
y = data$NonViable,
n = data$EggsSet)
plot(data$dose, data$y/data$n)
# anydoseresponseQ(data$dose, data$y, data$n, cluster = T)
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
packageVersion('BMABMDR')
head(data); tail(data); dim(data)
data <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos.csv", header = T)
head(data); tail(data); dim(data)
data <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos.csv", header = T)
head(data); tail(data); dim(data)
data <- data.frame(dose = data$Dose,
y = data$NonViable,
n = data$EggsSet)
plot(data$dose, data$y/data$n)
anydoseresponseQ(data$dose, data$y, data$n, cluster = T)
data <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos1.csv", header = T)
head(data); tail(data); dim(data)
data <- data.frame(dose = data$Dose,
y = data$NonViable,
n = data$EggsSet)
plot(data$dose, data$y/data$n)
anydoseresponseQ(data$dose, data$y, data$n, cluster = T)
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- full.laplaceQ_MA(data.Q = deadpupsQ, prior.weights = c(rep(1,4), rep(0,4)))
print.BMADR(test_laplace, 'quantal')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = 'dead pups data with clustering')
pQ$BMDs
pQ$weights
pQ$model_fit
pQ$model_fit2
pQ$MA_fit
pQ$model_fit
data
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = F,
q = 0.1, extended = T,
cluster = F)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
data <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos1.csv", header = T)
head(data); tail(data); dim(data)
data <- data.frame(dose = data$Dose,
y = data$NonViable,
n = data$EggsSet)
plot(data$dose, data$y/data$n)
anydoseresponseQ(data$dose, data$y, data$n, cluster = T)
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = F,
q = 0.1, extended = T,
cluster = F)
data
data
doses = data[, 1]
maxDose = max(doses)
# dose.a = sort(unique(doses))
# litter = data[,3]
# N = length(dose.a)
y.a = rep(NA, length(unique(doses)))
n.a = rep(NA, length(unique(doses)))
dose.a = rep(NA, length(unique(doses)))
ybin = data[, 2]
n = data[, 3]
id = 1
for(iu in unique(doses)){
y.a[id] = sum(ybin[doses == iu])
n.a[id] = sum(n[doses == iu])
dose.a[id] = unique(doses[doses == iu])
id = id + 1
}
N = length(dose.a)
dose.a = dose.a/maxDose
dose.a
y.a
n.a
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
data <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos1.csv", header = T)
head(data); tail(data); dim(data)
data <- data.frame(dose = data$Dose,
y = data$NonViable,
n = data$EggsSet)
plot(data$dose, data$y/data$n)
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = F,
q = 0.1, extended = T,
cluster = F)
test_laplace <- full.laplaceQ_MA(data.Q = deadpupsQ, prior.weights = c(rep(1,4), rep(0,4)))
print.BMADR(test_laplace, 'quantal')
test_laplace <- full.laplaceQ_MA(data.Q = deadpupsQ, prior.weights = c(rep(1,4), rep(1,4)))
print.BMADR(test_laplace, 'quantal')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = 'dead pups data with clustering')
pQ$BMDs
pQ$weights
pQ$model_fit
pQ$model_fit2
pQ$MA_fit
summary(test_laplace$BMDMixture)
quantile(test_laplace$BMDMixture, c(0.05,0.5,0.95))
hist(test_laplace$BMDMixture, breaks = 200)
abline(v=113.5, col = 2, lwd = 3)
abline(v=400, col = 2, lwd = 3)
load("~/BBMD/FINAL CODE/TESTING/das6.rda")
deadpups2 <- data.frame(dose = das6$data$dose,
y = das6$data$dead_pups,
n = das6$data$nr_born,
zz = das6$data$zz)
deadpupsQ <- PREP_DATA_QA(data = deadpups2, sumstats = TRUE,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = TRUE)
test_laplace <- full.laplaceQ_MA(data.Q = deadpupsQ, prior.weights = c(rep(1,6), 1, 1))
print.BMADR(test_laplace, 'quantal')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = 'dead pups data with clustering')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = 'dead pups data with clustering')
pQ$BMDs
pQ$weights
pQ$model_fit
data <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos.csv", header = T)
head(data); tail(data); dim(data)
data <- data.frame(dose = rep(data$Dose, each = 3),
y = rep(data$NonViable, each = 3),
n = rep(data$EggsSet, each = 3))
plot(data$dose, data$y/data$n)
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- full.laplaceQ_MA(data.Q = deadpupsQ, prior.weights = c(rep(1,2), 0, 0, rep(0,4)))
print.BMADR(test_laplace, 'quantal')
data <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos.csv", header = T)
head(data); tail(data); dim(data)
data <- data.frame(dose = data$Dose,
y = data$NonViable,
n = data$EggsSet)
plot(data$dose, data$y/data$n)
data = data[data$dose!=data$dose[2]]
data = data[data$dose!=data$dose[2],]
plot(data$dose, data$y/data$n)
deadpupsQ <- PREP_DATA_QA(data = data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- full.laplaceQ_MA(data.Q = deadpupsQ, prior.weights = c(rep(1,2), 0, 0, rep(0,4)))
