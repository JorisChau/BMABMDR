q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- BMABMDR::full.laplaceQ_MA(data.Q = dataQ, prior.weights = rep(1,8))
print.BMADR(test_laplace, 'quantal')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = '')
pQ$BMDs
pQ$weights
pQ$model_fit
pQ$model_fit2
pQ$MA_fit
nlitter = 5 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
sim.data = as.data.frame(sim.data.ys)
colnames(sim.data) = c('dose','y','n')
plot(sim.data$dose, sim.data$y/sim.data$n)
aggregate(sim.data$y/sim.data$n, by = list(sim.data$dose), mean)
points(sim.dose, sim.pi, col = 2, pch = 15)
dataQ <- BMABMDR::PREP_DATA_QA(data = sim.data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- BMABMDR::full.laplaceQ_MA(data.Q = dataQ, prior.weights = rep(1,8))
print.BMADR(test_laplace, 'quantal')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = '')
pQ$BMDs
pQ$weights
pQ$model_fit
pQ$model_fit2
pQ$MA_fit
test_laplace$E4_Q
sim.rho = 0.01
sim.dose = c(0,0.1,0.4,0.7,1)
sim.a = 0.05
sim.BMD = 0.15
sim.d = 0.05
sim.pi = DRM.E4_Q(par = c(sim.a, sim.BMD, sim.d), x = sim.dose, q = 0.1)
plot(sim.dose, sim.pi)
sim.alpha = sim.pi*((1/sim.rho)-1)
sim.beta = (1-sim.pi)*((1/sim.rho)-1)
nsim = 10 # number of observations per litter
nlitter = 5 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
plot(data.viable$dose/max(data.viable$dose), data.viable$y/data.viable$n)
data.viable <- read.csv("~/BBMD/FINAL CODE/ViableEmbryos.csv", header = T)
head(data.viable); tail(data.viable); dim(data.viable)
data.viable <- data.frame(dose = data.viable$Dose,
y = data.viable$NonViable,
n = data.viable$EggsSet)
plot(data.viable$dose/max(data.viable$dose), data.viable$y/data.viable$n)
sim.rho = 0.01
sim.dose = c(0,0.1,0.4,0.7,1)
sim.a = 0.03
sim.BMD = 0.05
sim.d = 1
sim.pi = DRM.E4_Q(par = c(sim.a, sim.BMD, sim.d), x = sim.dose, q = 0.1)
plot(sim.dose, sim.pi)
sim.d = 0.1
sim.pi = DRM.E4_Q(par = c(sim.a, sim.BMD, sim.d), x = sim.dose, q = 0.1)
plot(sim.dose, sim.pi)
sim.alpha = sim.pi*((1/sim.rho)-1)
sim.beta = (1-sim.pi)*((1/sim.rho)-1)
nsim = 10 # number of observations per litter
nlitter = 5 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
sim.data = as.data.frame(sim.data.ys)
colnames(sim.data) = c('dose','y','n')
plot(sim.data$dose, sim.data$y/sim.data$n)
aggregate(sim.data$y/sim.data$n, by = list(sim.data$dose), mean)
points(sim.dose, sim.pi, col = 2, pch = 15)
dataQ <- BMABMDR::PREP_DATA_QA(data = sim.data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
sim.rho = 0.05
sim.dose = c(0,0.1,0.4,0.7,1)
sim.a = 0.03
sim.BMD = 0.05
sim.d = 0.1
sim.pi = DRM.E4_Q(par = c(sim.a, sim.BMD, sim.d), x = sim.dose, q = 0.1)
plot(sim.dose, sim.pi)
sim.alpha = sim.pi*((1/sim.rho)-1)
sim.beta = (1-sim.pi)*((1/sim.rho)-1)
nsim = 10 # number of observations per litter
nlitter = 5 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
sim.data = as.data.frame(sim.data.ys)
colnames(sim.data) = c('dose','y','n')
plot(sim.data$dose, sim.data$y/sim.data$n)
aggregate(sim.data$y/sim.data$n, by = list(sim.data$dose), mean)
points(sim.dose, sim.pi, col = 2, pch = 15)
dataQ <- BMABMDR::PREP_DATA_QA(data = sim.data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- BMABMDR::full.laplaceQ_MA(data.Q = dataQ, prior.weights = rep(1,8))
print.BMADR(test_laplace, 'quantal')
sim.d = 0
sim.pi = DRM.E4_Q(par = c(sim.a, sim.BMD, sim.d), x = sim.dose, q = 0.1)
plot(sim.dose, sim.pi)
plot(data.viable$dose/max(data.viable$dose), data.viable$y/data.viable$n)
sim.rho = 0.5
sim.dose = c(0,0.1,0.4,0.7,1)
sim.a = 0.03
sim.BMD = 0.05
sim.d = 0
sim.pi = DRM.E4_Q(par = c(sim.a, sim.BMD, sim.d), x = sim.dose, q = 0.1)
plot(sim.dose, sim.pi)
sim.alpha = sim.pi*((1/sim.rho)-1)
sim.beta = (1-sim.pi)*((1/sim.rho)-1)
nsim = 10 # number of observations per litter
nlitter = 5 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
sim.data = as.data.frame(sim.data.ys)
colnames(sim.data) = c('dose','y','n')
plot(sim.data$dose, sim.data$y/sim.data$n)
aggregate(sim.data$y/sim.data$n, by = list(sim.data$dose), mean)
points(sim.dose, sim.pi, col = 2, pch = 15)
dataQ <- BMABMDR::PREP_DATA_QA(data = sim.data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- BMABMDR::full.laplaceQ_MA(data.Q = dataQ, prior.weights = rep(1,8))
print.BMADR(test_laplace, 'quantal')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = '')
pQ$BMDs
pQ$weights
pQ$model_fit
pQ$model_fit2
pQ$MA_fit
plot(data.viable$dose/max(data.viable$dose), data.viable$y/data.viable$n)
data.viable$y/data.viable$n
aggregate(data.viable$y/data.viable$n, by = list(data.viable$dose), mean)
data.viable$dose/max(data.viable$dose)
sim.dose = c(0, 0.041, 0.212, 1.00)
sim.rho = 0.5
sim.dose = c(0, 0.041, 0.212, 1.00)
sim.a = 0.038
sim.BMD = 0.05
sim.d = 0
# sim.pi = DRM.E4_Q(par = c(sim.a, sim.BMD, sim.d), x = sim.dose, q = 0.1)
sim.pi = c(0.038, 0.058, 0.079, 0.148)
plot(sim.dose, sim.pi)
sim.alpha = sim.pi*((1/sim.rho)-1)
sim.beta = (1-sim.pi)*((1/sim.rho)-1)
nsim = 10 # number of observations per litter
nlitter = 5 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
sim.data = as.data.frame(sim.data.ys)
colnames(sim.data) = c('dose','y','n')
plot(sim.data$dose, sim.data$y/sim.data$n)
aggregate(sim.data$y/sim.data$n, by = list(sim.data$dose), mean)
points(sim.dose, sim.pi, col = 2, pch = 15)
dataQ <- BMABMDR::PREP_DATA_QA(data = sim.data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- BMABMDR::full.laplaceQ_MA(data.Q = dataQ, prior.weights = rep(1,8))
print.BMADR(test_laplace, 'quantal')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = '')
pQ$BMDs
pQ$weights
pQ$model_fit
pQ$model_fit2
nsim = 100 # number of observations per litter
nlitter = 5 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
sim.data = as.data.frame(sim.data.ys)
colnames(sim.data) = c('dose','y','n')
plot(sim.data$dose, sim.data$y/sim.data$n)
aggregate(sim.data$y/sim.data$n, by = list(sim.data$dose), mean)
nsim = 20 # number of observations per litter
nlitter = 15 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
sim.data = as.data.frame(sim.data.ys)
colnames(sim.data) = c('dose','y','n')
plot(sim.data$dose, sim.data$y/sim.data$n)
aggregate(sim.data$y/sim.data$n, by = list(sim.data$dose), mean)
sum(sim.data$y == 1)
which(sim.data$y == 1)
sim.data$y[c(37,40,49)]
sim.data$y
nsim = 200 # number of observations per litter
nlitter = 15 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
sim.data = as.data.frame(sim.data.ys)
colnames(sim.data) = c('dose','y','n')
plot(sim.data$dose, sim.data$y/sim.data$n)
aggregate(sim.data$y/sim.data$n, by = list(sim.data$dose), mean)
points(sim.dose, sim.pi, col = 2, pch = 15)
dataQ <- BMABMDR::PREP_DATA_QA(data = sim.data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- BMABMDR::full.laplaceQ_MA(data.Q = dataQ, prior.weights = rep(1,8))
print.BMADR(test_laplace, 'quantal')
sim.rho = 0.1
sim.dose = c(0, 0.041, 0.212, 1.00)
sim.a = 0.038
sim.BMD = 0.05
sim.d = 0
# sim.pi = DRM.E4_Q(par = c(sim.a, sim.BMD, sim.d), x = sim.dose, q = 0.1)
sim.pi = c(0.038, 0.058, 0.079, 0.148)
plot(sim.dose, sim.pi)
sim.alpha = sim.pi*((1/sim.rho)-1)
sim.beta = (1-sim.pi)*((1/sim.rho)-1)
nsim = 20 # number of observations per litter
nlitter = 5 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
sim.data = as.data.frame(sim.data.ys)
colnames(sim.data) = c('dose','y','n')
plot(sim.data$dose, sim.data$y/sim.data$n)
aggregate(sim.data$y/sim.data$n, by = list(sim.data$dose), mean)
points(sim.dose, sim.pi, col = 2, pch = 15)
dataQ <- BMABMDR::PREP_DATA_QA(data = sim.data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- BMABMDR::full.laplaceQ_MA(data.Q = dataQ, prior.weights = rep(1,8))
print.BMADR(test_laplace, 'quantal')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = '')
pQ$BMDs
pQ$weights
pQ$model_fit
pQ$model_fit2
pQ$MA_fit
nsim = 200 # number of observations per litter
nlitter = 5 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
sim.data = as.data.frame(sim.data.ys)
colnames(sim.data) = c('dose','y','n')
plot(sim.data$dose, sim.data$y/sim.data$n)
aggregate(sim.data$y/sim.data$n, by = list(sim.data$dose), mean)
points(sim.dose, sim.pi, col = 2, pch = 15)
dataQ <- BMABMDR::PREP_DATA_QA(data = sim.data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- BMABMDR::full.laplaceQ_MA(data.Q = dataQ, prior.weights = rep(1,8))
print.BMADR(test_laplace, 'quantal')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = '')
pQ$BMDs
pQ$weights
pQ$model_fit
pQ$model_fit2
nsim = 2000 # number of observations per litter
nlitter = 5 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
sim.data = as.data.frame(sim.data.ys)
colnames(sim.data) = c('dose','y','n')
plot(sim.data$dose, sim.data$y/sim.data$n)
aggregate(sim.data$y/sim.data$n, by = list(sim.data$dose), mean)
points(sim.dose, sim.pi, col = 2, pch = 15)
dataQ <- BMABMDR::PREP_DATA_QA(data = sim.data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- BMABMDR::full.laplaceQ_MA(data.Q = dataQ, prior.weights = rep(1,8))
print.BMADR(test_laplace, 'quantal')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = '')
pQ$BMDs
pQ$weights
pQ$model_fit
pQ$model_fit2
plot(data.viable$dose/max(data.viable$dose), data.viable$y/data.viable$n)
data.viable
data.viable$y = data.viable$y * 10
data.viable$n = data.viable$n * 10
data.viable
plot(data.viable$dose/max(data.viable$dose), data.viable$y/data.viable$n)
viableQ <- PREP_DATA_QA(data = data.viable, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- full.laplaceQ_MA(data.Q = viableQ, prior.weights = rep(1,8))
print.BMADR(test_laplace, 'quantal')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = '')
pQ$BMDs
pQ$weights
pQ$model_fit
pQ$model_fit2
data.viable
test_laplace$E4_Q
sim.rho = 0.01
sim.dose = c(0, 0.041, 0.212, 1.00)
sim.a = 0.038
sim.BMD = 0.05
sim.d = 0
# sim.pi = DRM.E4_Q(par = c(sim.a, sim.BMD, sim.d), x = sim.dose, q = 0.1)
sim.pi = c(0.038, 0.058, 0.079, 0.148)
plot(sim.dose, sim.pi)
sim.alpha = sim.pi*((1/sim.rho)-1)
sim.beta = (1-sim.pi)*((1/sim.rho)-1)
nsim = 2000 # number of observations per litter
nlitter = 5 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
sim.data = as.data.frame(sim.data.ys)
colnames(sim.data) = c('dose','y','n')
plot(sim.data$dose, sim.data$y/sim.data$n)
aggregate(sim.data$y/sim.data$n, by = list(sim.data$dose), mean)
points(sim.dose, sim.pi, col = 2, pch = 15)
dataQ <- BMABMDR::PREP_DATA_QA(data = sim.data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- BMABMDR::full.laplaceQ_MA(data.Q = dataQ, prior.weights = rep(1,8))
print.BMADR(test_laplace, 'quantal')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = '')
pQ$BMDs
pQ$weights
pQ$model_fit
pQ$model_fit2
nsim = 20 # number of observations per litter
nlitter = 5 # number of litters per dose
sim.data.pis = matrix(NA, length(sim.dose), nlitter)
sim.data.ys = matrix(NA, nrow = length(sim.dose)*nlitter, ncol = 3)
k = 1
for(i in 1:length(sim.dose)){
for(j in 1:nlitter){
# simulate pi for each litter
sim.data.pis[i,j] <- rbeta(1, sim.alpha[i], sim.beta[i])
# simulate y's
sim.data.ys[k, ] <- c(sim.dose[i], rbinom(1, size = nsim, prob = sim.data.pis[i,j]), nsim)
k = k + 1
}
}
sim.data = as.data.frame(sim.data.ys)
colnames(sim.data) = c('dose','y','n')
plot(sim.data$dose, sim.data$y/sim.data$n)
aggregate(sim.data$y/sim.data$n, by = list(sim.data$dose), mean)
points(sim.dose, sim.pi, col = 2, pch = 15)
dataQ <- BMABMDR::PREP_DATA_QA(data = sim.data, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- BMABMDR::full.laplaceQ_MA(data.Q = dataQ, prior.weights = rep(1,8))
viableQ <- PREP_DATA_QA(data = data.viable, sumstats = TRUE,
q = 0.1, extended = T,
cluster = TRUE)
test_laplace <- full.laplaceQ_MA(data.Q = viableQ, prior.weights = rep(1,8))
print.BMADR(test_laplace, 'quantal')
pQ <- plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = '')
pQ$BMDs
pQ$weights
pQ$model_fit
library('rstantools')
library('usethis')
library('roxygen2')
# library(dplyr)
# ?rstan_create_package
# rstan_create_package('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR',
# roxygen=T, travis=T, license=T, auto_config=T)
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
# file.show('DESCRIPTION')
# file.show('Read-and-delete-me')
# file.remove('Read-and-delete-me')
## Save all Stan files in the 'inst/stan' subdirectory
# when installing the package these will be saved in the list 'stanmodels' that is used by R to function the package
## All functions to be used by R should be saved in the 'R/' directory
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
# Sys.setenv(BINPREF = "C:/rtools40/mingw$(WIN)/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
####################################################################################
####################################################################################
### Instructions for publishing a package on CRAN: https://r-pkgs.org/release.html
# https://cran.r-project.org/web/packages/rstantools/vignettes/minimal-rstan-package.html
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
