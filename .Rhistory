cnt = plyr::count(indiv.data$litter[indiv.data$dose==doses[i]])
obs = cnt$freq
if(length(obs) < maxNc){
obs = c(obs, rep(0, maxNc-length(obs)))
}
nij[i, ] = obs
}
y = matrix(0, nrow = nc, ncol = maxN)
for(i in 1:nc){
obs = indiv.data$response[indiv.data$cluster==cid[i]]
if(length(obs) < maxN){
obs = c(obs, rep(0, maxN-length(obs)))
}
y[i, ] = obs
}
datind <- data.frame(x = indiv.data$dose,
y = indiv.data$response)
obs.min = mean(indiv.data$response[indiv.data$dose==0])
obs.max = mean(indiv.data$response[indiv.data$dose==maxDose])
## Overall mean for test of flatness
means.all <- indiv.data %>%
group_by(dose) %>%
summarise(mresp = mean(response))
dose.a = unique(indiv.data$dose)
mean.a = c()
for(m in 1:length(dose.a)){
mean.a[m] <- means.all$mresp[means.all$dose == dose.a[m]]
}
min.min = 0.5*obs.min
mode.min = obs.min
max.min = 2*obs.min
min.max = 0.5*obs.max
max.max = obs.min*(1-q-0.01)
# max.max = obs.min
mode.max = obs.max
dose.a; mean.a
flatC(dose.a, mean.a, inc = F)
if(obs.min < obs.max){
# for a
min.min = 0.001
mode.min = obs.min
max.min = 2*obs.min
# for c
min.max = obs.min*(1.01+q)
max.max = 2*obs.max
mode.max = obs.max
if(flatC(dose.a, mean.a, inc=T) == F & is.null(maxy)){
mode.max = 3*obs.max
min.max  = obs.min*(1.01+q)
max.max = 2*mode.max
warning(
"The data do not contain information on the asymptote, and the default prior for fold change has been based on 3 times the observed maximum.
Please provide prior input on the maximum response by specifying 'maxy', if available."
)
}
## Check appropriateness of BMR value
if(obs.min*(1+q) > obs.max){
warning('The data do not contain values corresponding to the chosen BMR, lowering the specified value of q may be necessary.')
}
}else if(obs.min > obs.max){
min.min = 0.5*obs.min
mode.min = obs.min
max.min = 2*obs.min
min.max = 0.5*obs.max
max.max = obs.min*(1-q-0.01)
# max.max = obs.min
mode.max = obs.max
if(flatC(dose.a, mean.a, inc=F) == F & is.null(maxy)){
mode.max = 0.5*obs.max
min.max  = 0.1*obs.max
max.max = obs.min*(1-q-0.01)
# max.max = obs.min
warning(
"The data do not contain information on the asymptote, and the default prior for fold change has been based on half the observed maximum.
Please provide prior input on the maximum response by specifying 'maxy', if available."
)
}
## Check appropriateness of BMR value
if(obs.min*(1-q) < obs.max){
warning('The data do not contain values corresponding to the chosen BMR, lowering the specified value of q may be necessary.')
}
}
obs.min
obs.max
flatC(dose.a, mean.a, inc=T) == F & is.null(maxy)
flatC(dose.a, mean.a, inc=T)
means.all
unique(indiv.data$dose)
1:length(dose.a)
means.all$mresp[means.all$dose == dose.a[m]]
m
load('~/BBMD/FINAL CODE/TESTING/das5.rda')
data.input <- das5$data
data.input <- data.frame(dose = data.input$dose,
response = data.input$foetalweight,
litter = data.input$number)
data_N <- PREP_DATA_N_C(data.input, q = 0.1, prior.d = 'N11')
data_LN <- PREP_DATA_LN_C(data.input, q = 0.1, prior.d = 'N11')
data = data.input
## cluster (ij) = combination of dose (i) and litter (j)
library(dplyr)
indiv.data <- data.frame(dose = data[,1],
response = data[,2],
litter = data[,3])
indiv.data <- indiv.data %>%
dplyr::group_by(dose, litter) %>%
dplyr::arrange(by_group = dose) # order dose groups
indiv.data <- indiv.data %>%
dplyr::mutate(cluster = dplyr::cur_group_id(),
count = n())
dose.a = indiv.data$dose
maxDose = max(dose.a)
doses = unique(dose.a)
N = length(unique(dose.a)) # dose groups
n = c() # number of litters per dose group (vector of size N)
for(i in 1:N){
cnt = plyr::count(indiv.data$litter[indiv.data$dose==doses[i]])
n[i] = length(unique(cnt$x))
}
nc = length(unique(indiv.data$cluster)) # number of unique dose x litter combinations (i.e. clusters)
cid = unique(indiv.data$cluster) # cluster ids
maxN = max(indiv.data$count) # max number of obs per cluster
maxNc = max(n) # max number of litters per dose group
# nij = as.matrix(table(indiv.data$dose, indiv.data$litter))
nij = matrix(0, nrow = N, ncol = maxNc)
for(i in 1:N){
cnt = plyr::count(indiv.data$litter[indiv.data$dose==doses[i]])
obs = cnt$freq
if(length(obs) < maxNc){
obs = c(obs, rep(0, maxNc-length(obs)))
}
nij[i, ] = obs
}
y = matrix(0, nrow = nc, ncol = maxN)
for(i in 1:nc){
obs = indiv.data$response[indiv.data$cluster==cid[i]]
if(length(obs) < maxN){
obs = c(obs, rep(0, maxN-length(obs)))
}
y[i, ] = obs
}
datind <- data.frame(x = indiv.data$dose,
y = indiv.data$response)
obs.min = mean(indiv.data$response[indiv.data$dose==0])
obs.max = mean(indiv.data$response[indiv.data$dose==maxDose])
is_informative_BMD = 0
is_informative_a = 0
is_informative_c = 0
## Overall mean for test of flatness
means.all <- indiv.data %>%
group_by(dose) %>%
summarise(mresp = mean(response))
dose.a = unique(indiv.data$dose)
mean.a = c()
for(m in 1:length(dose.a)){
mean.a[m] <- means.all$mresp[means.all$dose == dose.a[m]]
}
dose.a
mean.a
if(obs.min < obs.max){
# for a
min.min = 0.001
mode.min = obs.min
max.min = 2*obs.min
# for c
min.max = obs.min*(1.01+q)
max.max = 2*obs.max
mode.max = obs.max
if(flatC(dose.a, mean.a, inc=T) == F & is.null(maxy)){
mode.max = 3*obs.max
min.max  = obs.min*(1.01+q)
max.max = 2*mode.max
warning(
"The data do not contain information on the asymptote, and the default prior for fold change has been based on 3 times the observed maximum.
Please provide prior input on the maximum response by specifying 'maxy', if available."
)
}
## Check appropriateness of BMR value
if(obs.min*(1+q) > obs.max){
warning('The data do not contain values corresponding to the chosen BMR, lowering the specified value of q may be necessary.')
}
}else if(obs.min > obs.max){
min.min = 0.5*obs.min
mode.min = obs.min
max.min = 2*obs.min
min.max = 0.5*obs.max
max.max = obs.min*(1-q-0.01)
# max.max = obs.min
mode.max = obs.max
if(flatC(dose.a, mean.a, inc=F) == F & is.null(maxy)){
mode.max = 0.5*obs.max
min.max  = 0.1*obs.max
max.max = obs.min*(1-q-0.01)
# max.max = obs.min
warning(
"The data do not contain information on the asymptote, and the default prior for fold change has been based on half the observed maximum.
Please provide prior input on the maximum response by specifying 'maxy', if available."
)
}
## Check appropriateness of BMR value
if(obs.min*(1-q) < obs.max){
warning('The data do not contain values corresponding to the chosen BMR, lowering the specified value of q may be necessary.')
}
}
flatC(dose.a, mean.a, inc=F)
#' Function for internal use
#'
#' @param dose value
#' @param mean value
#' @param inc logical variable to indicate if the dose-resonse curve is increasing or decreasing
#' @return .logical value indicating if the dose-response curve is flat or not
#'
#' @export flatC
#'
flatC = function(dose,mean,inc){ # To determine if DR curve flattens or not
flat=F
if(inc==TRUE){
# dat = data.frame(dose,mean)
datf=data.frame(yy=mean,xx=dose+0.0001)
fpfit=gamlss::gamlss(yy~fp(xx),family=NO,data=datf)
# maxdiff=max(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))
# lastdiff=(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))[length(dose)-1]
maxdiff=max((diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))
lastdiff=((diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))[length(dose)-1]
if (lastdiff/maxdiff<(0.5)) flat=T # flat if last incremental change smaller than 50% of the maximal change
return(flat)
}else if(inc==FALSE){
# dat = data.frame(dose,mean)
datf=data.frame(yy=mean,xx=dose+0.0001)
fpfit=gamlss::gamlss(yy~fp(xx),family=NO,data=datf)
# maxdiff=max(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))
# lastdiff=(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))[length(dose)-1]
maxdiff=max(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))
lastdiff=(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))[length(dose)-1]
if (lastdiff/maxdiff<(0.5)) flat=T # flat if last incremental change smaller than 50% of the maximal change
return(flat)
}
}
flatC
flat(dose.a, mean.a)
mean.a
flat(dose.a, mean.a, inc = F)
?devtools::reload
devtools::reload()
flatC
?flatC
BMABMDR::flatC
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
BMABMDR::flatC
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
data_N <- BMABMDR::PREP_DATA_N_C(data.input, q, prior.d = 'N11')
dose
mean
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
BMABMDR::flatC
flatC(dose.a, mean.a, inc = F)
BMABMDR::flatC(dose.a, mean.a, inc=FALSE)
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
dose.a
mean.a
length(dose.a)
length(mean.a)
# dat = data.frame(dose,mean)
datf=data.frame(yy=mean.a,xx=dose.a+0.0001)
datf
gamlss::gamlss(mean.a~fp(dose.a+0.0001), family=NO)
fpfit=gamlss::gamlss(mean.a~fp(dose.a+0.0001), family=NO)
# maxdiff=max(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))
# lastdiff=(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))[length(dose)-1]
maxdiff=max((diff(predict(fpfit),lag=1,differences=1))/diff(log(dose.a+0.0001),lag=1,differences=1))
lastdiff=((diff(predict(fpfit),lag=1,differences=1))/diff(log(dose.a+0.0001),lag=1,differences=1))[length(dose.a)-1]
lastdiff/maxdiff<(0.5)
#' Function for internal use
#'
#' @param dose value
#' @param mean value
#' @param inc logical variable to indicate if the dose-resonse curve is increasing or decreasing
#' @return .logical value indicating if the dose-response curve is flat or not
#'
#' @export flatC
#'
flatC = function(dose.a,mean.a,inc){ # To determine if DR curve flattens or not
flat=F
if(inc==TRUE){
# dat = data.frame(dose,mean)
# datf=data.frame(yy=mean.a,xx=dose.a+0.0001)
# fpfit=gamlss::gamlss(yy~fp(xx),family=NO,data=datf)
fpfit=gamlss::gamlss(mean.a~fp(dose.a+0.0001),family=NO)
# maxdiff=max(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))
# lastdiff=(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))[length(dose)-1]
maxdiff=max((diff(predict(fpfit),lag=1,differences=1))/diff(log(dose.a+0.0001),lag=1,differences=1))
lastdiff=((diff(predict(fpfit),lag=1,differences=1))/diff(log(dose.a+0.0001),lag=1,differences=1))[length(dose.a)-1]
if (lastdiff/maxdiff<(0.5)) flat=T # flat if last incremental change smaller than 50% of the maximal change
return(flat)
}else if(inc==FALSE){
# dat = data.frame(dose,mean)
# datf=data.frame(yy=mean.a,xx=dose.a+0.0001)
# fpfit=gamlss::gamlss(yy~fp(xx),family=NO,data=datf)
fpfit=gamlss::gamlss(mean.a~fp(dose.a+0.0001),family=NO)
# maxdiff=max(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))
# lastdiff=(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))[length(dose)-1]
maxdiff=max(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose.a+0.0001),lag=1,differences=1))
lastdiff=(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose.a+0.0001),lag=1,differences=1))[length(dose.a)-1]
if (lastdiff/maxdiff<(0.5)) flat=T # flat if last incremental change smaller than 50% of the maximal change
return(flat)
}
}
flatC(dose.a, mean.a, inc = F)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
gamlss::gamlss(mean.a ~ fp(dose.a + 1e-04), family = NO)
gamlss::gamlss(mean.a ~ fp(dose.a + 1e-04), family = NO())
dose.a
mean.a
flat(dose.a, mean.a)
flat(dose.a, mean.a, NA, inc = F)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
data_LN <- PREP_DATA_LN_C(data.input, q, prior.d = 'N11')
#### To test changes in R functions: run compile_dll() and roxygenize()
# devtools::reload()
# devtools::check()
devtools::build() # build source package
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/;")
Sys.setenv(PATH = "C:\\rtools40\\usr\\bin\\;")
install.packages("~/GitHub/BMABMDR_0.0.0.9023.tar.gz", repos = NULL, type = "source")
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
Sys.getenv("PATH")
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(BMABMDR)
PREP_DATA_NCOV
load('~/BBMD/FINAL CODE/TESTING/das1.rda')
data.test <- das1$data
ind.data <- data.frame(
x = data.test$Dose,
y = data.test$LDH,
#          s = data.test$SD,
#          n = data.test$N,
cov = data.test$sex
)
ind.data = ind.data[which(!is.na(ind.data$y)),]
q = 0.2
prior.weights = rep(1,16)
FLBMD <- full.laplace_MA_Cov(ind.data,
sumstats = FALSE,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = F,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
library(gamlss)
FLBMD <- full.laplace_MA_Cov(ind.data,
sumstats = FALSE,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = F,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
FLBMD$MA
FLBMD$summary
basic.plot(FLBMD, increasing = T)
#### To test changes in R functions: run compile_dll() and roxygenize()
# devtools::reload()
# devtools::check()
devtools::build() # build source package
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
warnings()
#### To test changes in R functions: run compile_dll() and roxygenize()
# devtools::reload()
# devtools::check()
devtools::build() # build source package
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
warnings()
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
warnings()
#### To test changes in R functions: run compile_dll() and roxygenize()
# devtools::reload()
# devtools::check()
devtools::build() # build source package
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
#### To test changes in R functions: run compile_dll() and roxygenize()
# devtools::reload()
# devtools::check()
devtools::build() # build source package
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/Rtools/mingw64/bin/"
# Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/;C:/rtools40/mingw32/bin/")
Sys.setenv(BINPREF = "C:/rtools40/mingw64/bin/")
Sys.getenv("PATH")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:\\Rtools\\usr\\bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\rtools40\\mingw32\\bin;C:\\rtools40\\mingw64\\bin", sep=";")
# # new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
rstan_config() # recompile stan models
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
# roxygen2::roxygenize(load_code = sourceDir) # generate documentation
pkgbuild::compile_dll()
roxygen2::roxygenize()
