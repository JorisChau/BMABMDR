)
clusterdataQ <- PREP_DATA_QA(data = clusterdata, sumstats = TRUE,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = TRUE)
pw <- c(rep(1, 2), rep(0, 6))
### Laplace Approximation
testbb_laplace <- full.laplaceQ_MA(data.Q = clusterdataQ, prior.weights = pw)
data.test <- read.csv('./data/test_data.csv', header = T, sep = ';')
summ.data <- data.frame(
x = data.test$Dose,
y = data.test$Mean,
s = data.test$SD,
n = data.test$N,
cov = data.test$group
)
q = 0.2
prior.weights = c(rep(1,4), rep(1,12))
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T, # option not used for Quantal data
q = q,
prior.d = 'N11',
extended = T, extended.value = 3,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
class(FLBMD$MA)
warnings()
basic.plot(FLBMD, 'E4_N', increasing = F)
x=c(2,2,2)
if(x==2 & length(x)==3)x=3
x
x=2
x=c(2,2,2)
if(x[1]==2 & length(x)==3)x=3
if(x[1]==2 && length(x)==3)x=3
x
x=c(2,2,2)
if(x[1]==2 && length(x)==3)x=3
x
x=c(2,2,2)
if(x[1]==2 & length(x)==3)x=3
x
library(BMABMDR)
packageVersion('BMABMDR')
library(mc2d)
setwd('G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/OFT')
full_data <- read.csv('data_test_080823.csv', header = T, sep = ';')
dim(full_data); head(full_data)
str(full_data)
full_data$Dose <- as.numeric(gsub(",",".",full_data$Exp_conc))
full_data$Resp <- as.numeric(gsub(",",".",full_data$Av_Endp))
full_data$SD <- as.numeric(gsub(",",".",full_data$Stdev_Endp))
head(full_data)
table(full_data$Study.ID)
## Sampling specification
ndr = 30000
nrch = 3; nriter = 3000; wu = 1000; dl = 0.8; trd = 10; sd = 123
pvec = c(0.05,0.5,0.95)
id <- 4
data <- full_data[full_data$Study.ID == id, ]
summ.data <- data.frame(x = data$Dose,
y = data$Resp,
s = data$SD,
n = data$Num_animals_total)
q = 0.05
prior.weights = rep(1, 16)
par(mfrow=c(1,1))
plot(summ.data$x, summ.data$y)
data_N <- PREP_DATA_N(data = summ.data, sumstats = TRUE, sd = TRUE, extended = TRUE, q = q, prior.d = 'N11')
data_LN <- PREP_DATA_LN(data = summ.data, sumstats = TRUE, sd = TRUE, extended = TRUE, q = q, prior.d = 'N11')
SBMD <- sampling_MA(data.N = data_N, data.LN = data_LN, prior.weights = prior.weights, ndraws = ndr, nrchains = nrch, nriterations = nriter,
warmup = wu, delta = dl, treedepth = trd, seed = sd, pvec = pvec)
warnings()
SBMD$MA_bridge_sampling
SBMD$convergence
pSBMD <- plot.BMADR(SBMD, type = 'increasing', weight_type = 'BS', include_data = TRUE, all = FALSE, log = FALSE, title = '', conv = FALSE)
pSBMD$model_fit
pSBMD$MA_fit
full_post_bmd <- SBMD$MA_post_full_bs
full_post_bkg <- SBMD$bkg_post_bs
full_post_maxy <- SBMD$maxy_post_bs
par(mfrow=c(2,3))
hist(full_post_bmd)
hist(full_post_bkg)
hist(full_post_maxy)
qnr <- 1000
q.y.bmd <- quantile(SBMD$MA_post_full_bs, seq(0,1,1/qnr))
qdat_l <- q.y.bmd[1:qnr]
qdat_r <- q.y.bmd[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_bmd <- qdat_m
hist(q_post_bmd)
q.y.bkg <- quantile(SBMD$bkg_post_bs, seq(0,1,1/qnr))
qdat_l <- q.y.bkg[1:qnr]
qdat_r <- q.y.bkg[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_bkg <- qdat_m
hist(q_post_bkg)
q.y.maxy <- quantile(SBMD$maxy_post_bs, seq(0,1,1/qnr))
qdat_l <- q.y.maxy[1:qnr]
qdat_r <- q.y.maxy[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_maxy <- qdat_m
hist(q_post_maxy)
getmode <- function(v){
dx <- density(v)
dx$x[dx$y == max(dx$y)]
}
mod_pert <- rstan::stan_model("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/PERT_MODEL.stan")
data_quantiles <- list(N = length(q_post_bmd), y = q_post_bmd, min_obs = min(q_post_bmd), max_obs = max(q_post_bmd))
getmode(q_post_bmd)
list(shape = 1, mode = getmode(q_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc <- rstan::sampling(mod_pert, data = data_quantiles, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc))
est.shape <- median(as.matrix(fit.mcmc)[,1])
est.mode <- median(as.matrix(fit.mcmc)[,2])
est.shape
est.mode
par(mfrow = c(2,2))
hist(full_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
curve(dpert(x, min = min(q_post_bmd), mode = est.mode, max = max(q_post_bmd), shape = est.shape),
col = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2, lty = 1)
# hist(full_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
hist(q_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
curve(dpert(x, min = min(q_post_bmd), mode = est.mode, max = max(q_post_bmd), shape = est.shape),
col = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2, lty = 1)
par(mfrow = c(2,2))
# hist(full_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
hist(q_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
curve(dpert(x, min = min(q_post_bmd), mode = est.mode, max = max(q_post_bmd), shape = est.shape),
col = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2, lty = 1)
## Doesn't fit so good -> full posterior?
data_full_post <- list(N = length(full_post_bmd), y = full_post_bmd, min_obs = min(full_post_bmd), max_obs = max(full_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(full_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fitmcmc.full <- rstan::sampling(mod_pert, data = data_full_post, init = init_ll, chains = 3)
head(as.matrix(fitmcmc.full))
est.shape.full = median(as.matrix(fitmcmc.full)[,1])
est.mode.full = median(as.matrix(fitmcmc.full)[,2])
est.mode.full
curve(dpert(x, min = min(full_post_bmd), mode = est.mode.full, max = max(full_post_bmd), shape = est.shape.full),
col = 3, lty = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2)
legend('topright', c('1000 quantiles','full posterior'), lwd = c(2,2), lty = c(1,2), col = c(2,3))
data_quantiles_bkg <- list(N = length(q_post_bkg), y = q_post_bkg, min_obs = min(q_post_bkg), max_obs = max(q_post_bkg))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_bkg))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc.bkg <- rstan::sampling(mod_pert, data = data_quantiles_bkg, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.bkg))
est.shape.bkg <- median(as.matrix(fit.mcmc.bkg)[,1])
est.mode.bkg <- median(as.matrix(fit.mcmc.bkg)[,2])
hist(full_post_bkg, prob = T, breaks = 50, main = "", xlab = "Min. response")
curve(dpert(x, min = min(q_post_bkg), mode = est.mode.bkg, max = max(q_post_bkg), shape = est.shape.bkg),
col = 2, from = min(full_post_bkg), to = max(full_post_bkg), add = T, lwd = 2, lty = 1)
data_quantiles_maxy <- list(N = length(q_post_maxy), y = q_post_maxy, min_obs = min(q_post_maxy), max_obs = max(q_post_maxy))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_maxy))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc.maxy <- rstan::sampling(mod_pert, data = data_quantiles_maxy, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.maxy))
est.shape.maxy <- median(as.matrix(fit.mcmc.maxy)[,1])
est.mode.maxy <- median(as.matrix(fit.mcmc.maxy)[,2])
hist(full_post_maxy, prob = T, breaks = 50, main = "", xlab = 'Max. response')
curve(dpert(x, min = min(q_post_maxy), mode = est.mode.maxy, max = max(q_post_maxy), shape = est.shape.maxy),
col = 2, from = min(full_post_maxy), to = max(full_post_maxy), add = T, lwd = 2, lty = 1)
id <- 3
data <- full_data[full_data$Study.ID == id, ]
summ.data <- data.frame(x = data$Dose,
y = data$Resp,
s = data$SD,
n = data$Num_animals_total)
q = 0.05
prior.weights = rep(1, 16)
par(mfrow=c(1,1))
plot(summ.data$x, summ.data$y)
data_N <- PREP_DATA_N(data = summ.data, sumstats = TRUE, sd = TRUE, extended = TRUE, q = q, prior.d = 'N11')
data_LN <- PREP_DATA_LN(data = summ.data, sumstats = TRUE, sd = TRUE, extended = TRUE, q = q, prior.d = 'N11')
SBMD <- sampling_MA(data.N = data_N, data.LN = data_LN, prior.weights = prior.weights, ndraws = ndr, nrchains = nrch, nriterations = nriter,
warmup = wu, delta = dl, treedepth = trd, seed = sd, pvec = pvec)
SBMD$MA_bridge_sampling
SBMD$convergence
pSBMD <- plot.BMADR(SBMD, type = 'increasing', weight_type = 'BS', include_data = TRUE, all = FALSE, log = FALSE, title = '', conv = FALSE)
pSBMD$model_fit
pSBMD$MA_fit
full_post_bmd <- SBMD$MA_post_full_bs
full_post_bkg <- SBMD$bkg_post_bs
full_post_maxy <- SBMD$maxy_post_bs
par(mfrow=c(2,3))
hist(full_post_bmd)
hist(full_post_bkg)
hist(full_post_maxy)
qnr <- 1000
q.y.bmd <- quantile(SBMD$MA_post_full_bs, seq(0,1,1/qnr))
qdat_l <- q.y.bmd[1:qnr]
qdat_r <- q.y.bmd[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_bmd <- qdat_m
hist(q_post_bmd)
q.y.bkg <- quantile(SBMD$bkg_post_bs, seq(0,1,1/qnr))
qdat_l <- q.y.bkg[1:qnr]
qdat_r <- q.y.bkg[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_bkg <- qdat_m
hist(q_post_bkg)
q.y.maxy <- quantile(SBMD$maxy_post_bs, seq(0,1,1/qnr))
qdat_l <- q.y.maxy[1:qnr]
qdat_r <- q.y.maxy[2:(qnr+1)]
qdat_m <- (qdat_l + qdat_r)/2
q_post_maxy <- qdat_m
hist(q_post_maxy)
data_quantiles <- list(N = length(q_post_bmd), y = q_post_bmd, min_obs = min(q_post_bmd), max_obs = max(q_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc <- rstan::sampling(mod_pert, data = data_quantiles, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc))
est.shape <- median(as.matrix(fit.mcmc)[,1])
est.mode <- median(as.matrix(fit.mcmc)[,2])
par(mfrow = c(2,2))
# hist(full_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
hist(q_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
curve(dpert(x, min = min(q_post_bmd), mode = est.mode, max = max(q_post_bmd), shape = est.shape),
col = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2, lty = 1)
## Doesn't fit so good -> full posterior?
data_full_post <- list(N = length(full_post_bmd), y = full_post_bmd, min_obs = min(full_post_bmd), max_obs = max(full_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(full_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fitmcmc.full <- rstan::sampling(mod_pert, data = data_full_post, init = init_ll, chains = 3)
head(as.matrix(fitmcmc.full))
est.shape.full = median(as.matrix(fitmcmc.full)[,1])
est.mode.full = median(as.matrix(fitmcmc.full)[,2])
curve(dpert(x, min = min(full_post_bmd), mode = est.mode.full, max = max(full_post_bmd), shape = est.shape.full),
col = 3, lty = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2)
legend('topright', c('1000 quantiles','full posterior'), lwd = c(2,2), lty = c(1,2), col = c(2,3))
data_quantiles_bkg <- list(N = length(q_post_bkg), y = q_post_bkg, min_obs = min(q_post_bkg), max_obs = max(q_post_bkg))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_bkg))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc.bkg <- rstan::sampling(mod_pert, data = data_quantiles_bkg, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.bkg))
est.shape.bkg <- median(as.matrix(fit.mcmc.bkg)[,1])
est.mode.bkg <- median(as.matrix(fit.mcmc.bkg)[,2])
hist(full_post_bkg, prob = T, breaks = 50, main = "", xlab = "Min. response")
curve(dpert(x, min = min(q_post_bkg), mode = est.mode.bkg, max = max(q_post_bkg), shape = est.shape.bkg),
col = 2, from = min(full_post_bkg), to = max(full_post_bkg), add = T, lwd = 2, lty = 1)
##################################
### MAXY                       ###
data_quantiles_maxy <- list(N = length(q_post_maxy), y = q_post_maxy, min_obs = min(q_post_maxy), max_obs = max(q_post_maxy))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_maxy))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc.maxy <- rstan::sampling(mod_pert, data = data_quantiles_maxy, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc.maxy))
est.shape.maxy <- median(as.matrix(fit.mcmc.maxy)[,1])
est.mode.maxy <- median(as.matrix(fit.mcmc.maxy)[,2])
hist(full_post_maxy, prob = T, breaks = 50, main = "", xlab = 'Max. response')
curve(dpert(x, min = min(q_post_maxy), mode = est.mode.maxy, max = max(q_post_maxy), shape = est.shape.maxy),
col = 2, from = min(full_post_maxy), to = max(full_post_maxy), add = T, lwd = 2, lty = 1)
39762973/1357033
337/1135
mod_pert <- rstan::stan_model("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/PERT_MODEL.stan")
data_quantiles <- list(N = length(q_post_bmd), y = q_post_bmd, min_obs = min(q_post_bmd), max_obs = max(q_post_bmd))
initf2 <- function(chain_id = 1){
list(shape = 1, mode = getmode(q_post_bmd))
}
init_ll <- lapply(1:3, function(id) initf2(chain_id = id))
fit.mcmc <- rstan::sampling(mod_pert, data = data_quantiles, init = init_ll, chains = 3)
head(as.matrix(fit.mcmc))
est.shape <- median(as.matrix(fit.mcmc)[,1])
est.mode <- median(as.matrix(fit.mcmc)[,2])
par(mfrow = c(2,2))
# hist(full_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
hist(q_post_bmd, prob = T, breaks = 50, main = "", xlab = 'BMD')
curve(dpert(x, min = min(q_post_bmd), mode = est.mode, max = max(q_post_bmd), shape = est.shape),
col = 2, from = min(full_post_bmd), to = max(full_post_bmd), add = T, lwd = 2, lty = 1)
mod_pert <- rstan::stan_model("G:/My Drive/UHasselt/Consultancy/EFSA/BMD INFPRIOR/TRYOUT ANALYSIS/PERT_MODEL.stan")
setwd("G:\\My Drive\\UHasselt\\Consultancy\\VLIR-project\\Vlir 2022\\Data instellingen")
getwd()
library(xlsx)
setwd("G:\\My Drive\\UHasselt\\Consultancy\\VLIR-project\\Vlir 2022\\VRAGEN/")
data <- read.xlsx('data_UG_2022.xls', header = T)
data <- read.xlsx('data_UG_2022.xls', sheetName='data_UG_2022', header = T)
head(data)
?read.xlsx
data <- read.xlsx('data_UG_2022.xls', sheetName="data_UG_2022", header = T)
data <- read.csv('data_UG_2022.csv', header = T, sep = ',')
head(data)
data <- data[data$Databron=="UG",]
dim(data)
summary(data$Bezet)
data$Volg[duplicated(data$Volg),]
data$Volg[duplicated(data$Volg)]
,
data[data$Volg=='eb9fd35a-a0',]
data$Volg[duplicated(data$Volg) & data$Bezet==100]
length(data$Volg[duplicated(data$Volg) & data$Bezet==100])
data[data$Volg=='0a0e0a61-b7',]
data[data$Volg=='8678f8f7-f9',]
data_dup <- data[duplicated(data$Volg) & data$Bezet==100,]
dim(data_dup)
length(unique(data_dup$Volg))
head(data_dup)
dim(data[!duplicated(data$Volg), ])
dim(data[duplicated(data$Volg), ])
data_dup <- data[duplicated(data$Volg), ]
length(unique(data_dup$Volg))
length(unique(data_dup$Volg[data_dup$Bezet==100]))
# data_dup <- data[duplicated(data$Volg) & data$Bezet==100,]
dim(data_dup)
length(unique(data_dup$Volg))
head(data_dup)
bezet_all <- c()
k <- 1
for(i in unique(data_dup$Volg)){
bezet_all[k] <- sum(data_dup$Bezet[data$Volg == i])
k <- k + 1
}
summary(bezet_all)
summary(data_dup$Bezet)
bezet_all
unique(data_dup$Volg)
length(unique(data_dup$Volg))
?duplicated
duplicated(data$Volg)
which(duplicated(data$Volg))
dup_volgs <- data$Volg[duplicated(data$Volg)]
dup_volgs
data_dup <- data[data$Volg %in% dup_volgs, ]
dim(data_dup)
data <- read.csv('data_UG_2022.csv', header = T, sep = ',')
head(data)
data <- data[data$Databron=="UG",]
dim(data)
summary(data$Bezet)
dim(data[!duplicated(data$Volg), ])
dim(data[duplicated(data$Volg), ])
length(data$Volg[duplicated(data$Volg) & data$Bezet==100])
data[data$Volg=='8678f8f7-f9',]
dup_volgs <- data$Volg[duplicated(data$Volg)]
data_dup <- data[data$Volg %in% dup_volgs, ]
dim(data_dup)
length(unique(data_dup$Volg[data_dup$Bezet==100]))
# data_dup <- data[duplicated(data$Volg) & data$Bezet==100,]
dim(data_dup)
length(unique(data_dup$Volg))
length(unique(data_dup$Volg[data_dup$Bezet==100]))
length(unique(data_dup$Volg))
head(data_dup)
bezet_all <- c()
k <- 1
for(i in unique(data_dup$Volg)){
bezet_all[k] <- sum(data_dup$Bezet[data$Volg == i])
k <- k + 1
}
summary(bezet_all)
unique(data_dup$Volg)
bezet_all
unique(data_dup$Volg)[69]
data_dup[data_dup$Volg=='5ae1fa21-96',]
sum(data_dup$Bezet[data$Volg == i])
data_dup$Bezet[data$Volg == i]
bezet_all <- c()
k <- 1
for(i in unique(data_dup$Volg)){
bezet_all[k] <- sum(data_dup$Bezet[data_dup$Volg == i])
k <- k + 1
}
summary(bezet_all)
sum(bezet_all>100)
sum(bezet_all[bezet_all>100])
sum(bezet_all[bezet_all>100])/100
sum(bezet_all[bezet_all>100])/100 - 157
7515.26-7480.47
library(pkgbuild)
350/1183
setwd("G:/My Drive/UHasselt/PhD/HIV/SIALON II/KBF_SialonII/SIMPACT_TEST/VSC scripts/FINAL ABC/v3 140423/FINAL STEP 1")
## Combined output
output <- read.csv('output_behav_g3_231023.csv', header = T, sep = ',')
dim(output)
head(output)
# save parameters
res.g3 <- as.matrix(output[, c(6:29)])
# Calculate new tolerances
dist1 <- output[, 3]
summary(dist1)
dist2 <- output[, 4]
summary(dist2)
dist3 <- output[, 5]
summary(dist3)
epsilon1 <- quantile(dist1, 0.8); epsilon1
epsilon2 <- quantile(dist2, 0.8); epsilon2
epsilon3 <- quantile(dist3, 0.8); epsilon3
# save epsilon
epsilon.g3 <- epsilon
## Normalize weights
w.new <- output[, 2]
summary(w.new)
weights.g3 <- w.new / sum(w.new)
summary(weights.g3)
## Calculate sigma -> weighted SD
library(Hmisc)
sigma.g3 <- sqrt(apply(res.g3, 2, wtd.var, weights = weights.g3, normwt = TRUE))
sigma.g3
load("params_step1_behav.RData")
res1 <- res.g1
out2 <- read.csv('output_behav_g2_091023.csv', header = T, sep = ',')
out2$V1[1000]
res2 <- out2[c(1:1000),c(6:29)]
out2_rej <- read.csv('output_behav_g2_rejected_091023.csv', header = T, sep = ',')
head(out2_rej)
dim(out2_rej)
out2_rej <- out2_rej[out2_rej$V1<out2$V1[1000],]
# 1000 / (1000+1891) particles accepted
res2_rej <- out2_rej[,c(6:29)]
out3 <- read.csv('output_behav_g3_231023.csv', header = T, sep = ',')
res3 <- out3[, c(6:29)]
n.gen <- 3
names <- c("Eag. mean hetero", "Eag. mean MSM", "Eag. SD hetero", "Eag. SD MSM", "Eag. rho", "Eag. woman a", "Eag. woman b",
"Diss. MSM", "Diss. hetero",
"Form. MSM base", "Form. MSM a12", "From. MSM a3", "Form. MSM a5", "Form. MSM a7",
"Form. hetero base", "Form. hetero a1", "Form. hetero a2", "Form. hetero a3", "Form. hetero a5", "Form. hetero a7",
"SexRole versatile", "SexRole receptive",
"Form. MSM a6", "Form. hetero a6")
par(mfrow = c(2,2))
for(i in 1:24){
plot(density(res1[,i])$x, density(res1[,i])$y, type = 'l', xlab = names[i], ylab = 'Density', ylim = c(0,1))
for(g in 2:n.gen){
res <- get(paste0('res',g))
lines(density(res[,i])$x, density(res[,i])$y, col = g)
# res_rej <- get(paste0('res',g,'_rej'))
# lines(density(res_rej[,i])$x, density(res_rej[,i])$y, col = g+1, lty = 2)
}
}
target.features <- c(
### Distribution of number of male partners (2016)
0.12,0.18,0.14,0.07,0.07,0.07,0.07,0.04,0.04,0.00,0.04,0.04,0.03,0.02,0.01,0.02,0.02,0.01,0.00,0.01,0.02,
### Distribution of number of female partners (2016)
0.91,0.06,0.01,0.01,0.00,0.00,0.00,0.00,0.00,0.00,0.01,
### Proportion of rels that are MSM
0.048 # CHECK!! https://bmcpublichealth.biomedcentral.com/articles/10.1186/1471-2458-13-919
)
dist <- dist1 + dist2 + dist3
## Best distance based on number of male partners ...
best.dist = dist[order(dist)][1:5]
best.ids = which(dist %in% best.dist)
best.parms1 = output[best.ids, c(6:29)]
best.stats1 = output[best.ids, c(30:86)]
par(mfrow = c(2,1))
plot(seq(0,20,1), target.features[1:21], type = 'l', xlab = 'Number of male partners in the last 6 months',
ylab = 'Proportion of Sialon II participants (N = 361)', col = 1,
ylim = c(0,0.5))
# for(i in 1:length(best.ids)){
#   lines(seq(0,20,1), best.stats1[i, 1:21], col = i+1, lwd = 1, lty = 3)
# }
lines(seq(0,20,1), best.stats1[1, 1:21], col = 2, lwd = 3, lty = 3)
lines(seq(0,20,1), best.stats1[2, 1:21], col = 3, lwd = 3, lty = 3)
lines(seq(0,20,1), best.stats1[3, 1:21], col = 4, lwd = 3, lty = 3)
lines(seq(0,20,1), best.stats1[4, 1:21], col = 5, lwd = 3, lty = 3)
lines(seq(0,20,1), best.stats1[5, 1:21], col = 6, lwd = 3, lty = 3)
plot(seq(0,10,1), target.features[22:32], type = 'l', xlab = 'Number of female partners in the last 6 months',
ylab = 'Proportion of Sialon II participants (N = 361)', col = 1,
ylim = c(0,1))
# for(i in 1:length(best.ids)){
#   lines(seq(0,10,1), best.stats1[i, 22:32], col = i+1, lwd = 1, lty = 3)
# }
lines(seq(0,10,1), best.stats1[1, 22:32], col = 2, lwd = 3, lty = 3)
lines(seq(0,10,1), best.stats1[2, 22:32], col = 3, lwd = 3, lty = 3)
lines(seq(0,10,1), best.stats1[3, 22:32], col = 4, lwd = 3, lty = 3)
lines(seq(0,10,1), best.stats1[4, 22:32], col = 5, lwd = 3, lty = 3)
lines(seq(0,10,1), best.stats1[5, 22:32], col = 6, lwd = 3, lty = 3)
par(mfrow = c(1,1))
plot(seq(0,5,1), target.features[1:6], type = 'l', xlab = 'Number of male partners in the last 6 months',
ylab = 'Proportion of Sialon II participants (N = 361)', col = 1,
ylim = c(0,0.35))
lines(seq(0,5,1), best.stats1[1, 1:6], col = 2, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[2, 1:6], col = 3, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[3, 1:6], col = 4, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[4, 1:6], col = 5, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[5, 1:6], col = 6, lwd = 3, lty = 3)
## Heterosexual partners
best.stats1[, 34:54]
plot(seq(0,5,1), best.stats1[1, 34:39], type = 'l', xlab = 'Number of heterosexual partners in the last 6 months',
ylab = 'Proportion of simulated population', col = 1,
ylim = c(0,0.8))
lines(seq(0,5,1), best.stats1[2, 34:39], col = 2, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[3, 34:39], col = 3, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[4, 34:39], col = 4, lwd = 3, lty = 3)
lines(seq(0,5,1), best.stats1[5, 34:39], col = 5, lwd = 3, lty = 3)
## Prop MSMW - MSMO - hetero
best.stats1[,33]
best.stats1[,55:57]
# Prop hetero with 0-1-2 partners in past 6m
best.stats1[,34:36]
# best fit?
best.stats1[1, c(1:6, 22:24, 33, 34:36)]
