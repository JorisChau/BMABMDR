### simulate some data
source('~/BBMD/FINAL CODE/ESTING/simDataQ.R')
### simulate some data
source('~/BBMD/FINAL CODE/TESTING/simDataQ.R')
set.seed(1989)
a1 = 0.1
a2 = 0.1
BMD1 = 0.29
BMD2 = 0.16
d1 = d2 = 1
q = 0.1
sim_data1 <- sim_DRQ_data(DRM = "Exponential", DRM_par = c(a1, BMD1, d1),
# n = c(20, 20, 20, 20, 20),
n = rep(20, 5),
dose = c(0, 5, 15, 50, 100), q = q)
sim_data1$sex = rep(1, 5)
sim_data2 <- sim_DRQ_data(DRM = "Exponential", DRM_par = c(a2, BMD2, d2),
# n = c(20, 20, 20, 20, 20),
n = rep(20, 5),
dose = c(0, 5, 15, 50, 100), q = q)
sim_data2$sex = rep(2, 5)
summ.data <- data.frame(dose = c(sim_data1$dose.a, sim_data2$dose.a),
y = c(sim_data1$y.a, sim_data2$y.a),
n = c(sim_data1$n.a, sim_data2$n.a),
sex = c(sim_data1$sex, sim_data2$sex))
par(mfrow=c(1,1))
plot(summ.data$dose[summ.data$sex==1], summ.data$y[summ.data$sex==1]/summ.data$n[summ.data$sex==1], type = 'l', ylim = c(0,1))
lines(summ.data$dose[summ.data$sex==2], summ.data$y[summ.data$sex==2]/summ.data$n[summ.data$sex==2], col = 2)
prior.weights = rep(1,8)
FLBMD <- full.laplace_MA_Q_Cov(summ.data,
sumstats = T,
q = q,
prior.d = 'N11',
extended = T,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
basic.plotQ(FLBMD)
source('~/BBMD/FINAL CODE/fun_Data.R')
load('~/BBMD/FINAL CODE/WS_STAN_CONT_CLUST.RData')
load("~/BBMD/TRYOUT CODE/NEW CONTINUOUS/CLUSTERED/das5.rda")
data.input <- das5$data
data.input <- data.frame(dose = data.input$dose,
response = data.input$foetalweight,
litter = data.input$number)
plot(data.input$dose, data.input$response, xlab = 'dose', ylab = 'fetal weight')
library(dplyr)
data.plot <- data.input %>%
group_by(dose, litter) %>%
summarise(mresp = mean(response))
points(data.plot$dose, data.plot$mresp, pch = 15, col = 2)
data.plot2 <- data.input %>%
group_by(dose) %>%
summarise(mresp = mean(response))
points(data.plot2$dose, data.plot2$mresp, pch = 18, cex = 2, col = 3)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
prior.weights = c(rep(1,8), rep(0,8))
q = 0.05
pvec = c(0.05,0.5,0.95)
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
?flatC
flatC
flat
flatC
#' Function for internal use
#'
#' @param dose value
#' @param mean value
#' @param inc logical variable to indicate if the dose-resonse curve is increasing or decreasing
#' @return .logical value indicating if the dose-response curve is flat or not
#'
#' @export flatC
#'
flatC = function(dose,mean,inc){ # To determine if DR curve flattens or not
flat=F
if(inc==TRUE){
dat = data.frame(dose,mean)
datf=data.frame(yy=mean,xx=dose+0.0001)
fpfit=gamlss::gamlss(yy~fp(xx),family=NO,data=datf)
# maxdiff=max(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))
# lastdiff=(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))[length(dose)-1]
maxdiff=max((diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))
lastdiff=((diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))[length(dose)-1]
if (lastdiff/maxdiff<(0.5)) flat=T # flat if last incremental change smaller than 50% of the maximal change
return(flat)
}else if(inc==FALSE){
dat = data.frame(dose,mean)
datf=data.frame(yy=mean,xx=dose+0.0001)
fpfit=gamlss::gamlss(yy~fp(xx),family=NO,data=datf)
# maxdiff=max(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))
# lastdiff=(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))[length(dose)-1]
maxdiff=max(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))
lastdiff=(abs(diff(predict(fpfit),lag=1,differences=1))/diff(log(dose+0.0001),lag=1,differences=1))[length(dose)-1]
if (lastdiff/maxdiff<(0.5)) flat=T # flat if last incremental change smaller than 50% of the maximal change
return(flat)
}
}
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
library(rstan)
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
data_LN <- PREP_DATA_LN_C(data.input, q, prior.d = 'N11')
FLBMD <- full.laplace_MAc(data_N, data_LN, prior.weights)
print(FLBMD)
print.BMADR(FLBMD)
summary.BMADR(FLBMD, clustered = T, type = 'continuous')
FLBMD$bf
FLBMD$MA
round(FLBMD$weights, 4)
plot_prior(FLBMD, data_N$data, 'E4_N', parms = T, clustered = T)
# plt <- plot.BMADR(FLBMD, type = 'decreasing', clustered = T, weight_type = 'LP', include_data = T, all = F, title = '')
plt <- plot.BMADR(FLBMD, type = 'decreasing', clustered = T, weight_type = 'LP', include_data = T, all = F, title = '')
plt$BMDs
plt$weights
plt$model_fit
plt$model_fit_N
plt$model_fit_LN
plt$MA_fit
rm(list=ls())
# install package from zip file
install.packages("~/GitHub/BMABMDR_0.0.0.9017.tar.gz", repos = NULL, type = "source")
## available models?
get_models('continuous')
get_models('quantal')
library(BMABMDR)
sessionInfo()
dose = c(0,6.25,12.5,25,50,100)
mean = c(10.87143,10.16669,10.81050,10.41179,12.38305,18.47681)
sd = c(1.804554,1.805939,3.858265,1.626007,2.045695,2.322449)
n = rep(10,6)
summ.data = data.frame(x = dose, y = mean, s = sd, n = n)
plot(summ.data$x, summ.data$y, type = 'l')
# Test for dose-response effect
anydoseresponseN(summ.data$x, summ.data$y, summ.data$s, summ.data$n) # normal distribution
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = c(rep(1,4), rep(1,4), rep(0,8))
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_N = PREP_DATA_N(summ.data,
sumstats = T,
q = q)
data_LN = PREP_DATA_LN(summ.data,
sumstats = T,
q = q)
?NO?
?
f
?NO
library(gamlss)
# uninformative
data_N = PREP_DATA_N(summ.data,
sumstats = T,
q = q)
data_LN = PREP_DATA_LN(summ.data,
sumstats = T,
q = q)
data_N$start
FLBMD=full.laplace_MA(data_N,
data_LN,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec,
plot=F)
# MA estimates
FLBMD$MA
# model weights
round(FLBMD$weights,4)
# model-specific fit
FLBMD$E4_N
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
FLBMD$bf
# output as dataframe/list
BMDWeights(FLBMD, 'continuous')
summary.BMADR(FLBMD)
summary.BMADR(FLBMD, type = 'continuous')
# plot output
pFLBMD = plot.BMADR(FLBMD, weight_type = "LP", include_data = T, all = F, title = '')
pFLBMD$BMDs
pFLBMD$weights
pFLBMD$model_fit_N
pFLBMD$model_fit_LN
pFLBMD$model_fit
pFLBMD$MA_fit
# plot prior vs posterior
plot_prior(FLBMD, data_N$data, "E4_N", parms = T)
plot_prior(FLBMD, data_N$data, "E4_N", parms = F)
plot_prior(FLBMD, data_N$data, "P4_N", parms = T)
plot_prior(FLBMD, data_LN$data, "L4_LN", parms = T)
SBMD = sampling_MA(data_N, data_LN,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec,
plot=F)
SBMD = sampling_MA(data_N, data_LN,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec)
prior.weights = c(rep(1,4), rep(0,4), rep(1,4), rep(0,4))
SBMD = sampling_MA(data_N, data_LN,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec)
# MA estimates
SBMD$MA_bridge_sampling
SBMD$MA_laplace
# convergence & divergence
SBMD$convergence
SBMD$divergences*100 # percentage of iterations that were divergent
# model-specific fit
SBMD$E4_N
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
SBMD$bf
# output as dataframe/list
BMDWeights(SBMD, 'continuous')
summary.BMADR(SBMD, 'continuous')
# plot output
pSBMD = plot.BMADR(SBMD, weight_type = "BS", include_data = T, all = F, title = '')
pSBMD$BMDs
pSBMD$weights
pSBMD$model_fit_N
pSBMD$model_fit_LN
pSBMD$model_fit
pSBMD$MA_fit
# plot prior vs posterior
plot_prior(SBMD, data_N$data, "E4_N", parms = T)
plot_prior(SBMD, data_LN$data, "P4_LN", parms = T)
# simulated data
par = c(10.58,0.38,1.91,2)
doses <- c(0,6.25,12.5,25,50,100)/100
dim = 10 # number of observations per litter
ngroup = 20 # number of litters per dose
covmat = matrix(0.8, nrow = dim, ncol = dim) # correlation of 0.5
diag(covmat) = 1
library(mvtnorm)
sd = 2.28
covmat2 = covmat*sd^2
means = DRM.E4_NI(par, doses, q)
sim_data = c()
for(i in 1){
datmat = c()
cnt = 1
for(j in 1:length(doses)){
for(k in 1:ngroup){
datmat = rbind(datmat,
cbind(rep(doses[j], dim), rep(cnt, dim),
## CHANGE MEANS !!!
as.vector(rmvnorm(1, mean = rep(means[j], dim), sigma = covmat2))
)
)
cnt = cnt+1
}
}
sim_data = rbind(sim_data, as.vector(datmat[,3]))
}
simulated_data = data.frame(dose = rep(doses, each = dim*ngroup),
litter = rep(c(1:(ngroup*length(doses))), each = dim),
resp = sim_data[1,])
data.input <- data.frame(dose = simulated_data$dose,
response = simulated_data$resp,
litter = simulated_data$litter)
plot(data.input$dose, data.input$response)
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
data_LN <- PREP_DATA_LN_C(data.input, q, prior.d = 'N11')
prior.weights = c(rep(1,16))
FLBMD <- full.laplace_MAc(data_N, data_LN, prior.weights)
# MA estimates
FLBMD$MA
# model weights
round(FLBMD$weights,4)
# model-specific fit
FLBMD$E4_N
# test whether best-fitting model fits wel (BF < 10 means equally well as saturated model; BF > 10 means best fit is better than saturated model)
FLBMD$bf
# output as dataframe/list
BMDWeights(FLBMD, 'continuous')
pFLBMD <- plot.BMADR(FLBMD, 'increasing', clustered = T, weight_type = 'LP', include_data = T, all = F, title = '')
pFLBMD$BMDs
pFLBMD$weights
pFLBMD$model_fit_N
pFLBMD$model_fit_LN
pFLBMD$model_fit
pFLBMD$MA_fit
dose = c(0, 5, 15, 50, 100)
y = c(0, 4, 6, 5, 12)
n = c(20, 20, 20, 20, 20)
summ.data = data.frame(x = dose, y = y, n = n)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
# prior model weights
prior.weights = rep(1,8)
# Test for dose-response effect (not optimal yet)
anydoseresponseQ(summ.data$x, summ.data$y, summ.data$n)
# bmr
q = 0.1
pvec = c(0.05,0.5,0.95)
# uninformative
data_Q = PREP_DATA_QA(summ.data,
sumstats = T,
q = q)
FLBMD_Q = full.laplaceQ_MA(data_Q,
prior.weights,
ndraws=ndr,
seed=123,
pvec=pvec)
# MA estimates
FLBMD_Q$MA
# model weights
round(FLBMD_Q$weights,4)
# model-specific fit
FLBMD_Q$E4_Q
# output as dataframe/list
BMDWeights(FLBMD_Q, 'quantal')
summary.BMADRQ(FLBMD_Q, 'quantal')
summary.BMADR(FLBMD_Q, 'quantal')
# plot output
pFLBMD_Q = plot.BMADRQ(FLBMD_Q, weight_type = "LP", include_data = T, all = F, title = '')
pFLBMD_Q$BMDs
pFLBMD_Q$weights
pFLBMD_Q$model_fit
pFLBMD_Q$MA_fit
# plot prior vs posterior
plot_priorQ(FLBMD_Q, data_Q$data, "E4_Q")
plot_priorQ(FLBMD_Q, data_Q$data, "P4_Q")
plot_priorQ(FLBMD_Q, data_Q$data, "L4_Q")
prior.weights = c(rep(1,4),0,0,0,0)
SBMD_Q = samplingQ_MA(data_Q,
prior.weights,
ndraws=ndr, nrchains=nrch,
nriterations=nriter, warmup=wu, delta=dl,
treedepth=trd, seed=sd, pvec=pvec)
# MA estimates
SBMD_Q$MA_bridge_sampling
SBMD_Q$MA_laplace
# convergence & divergence
SBMD_Q$convergence
SBMD_Q$divergences*100 # percentage of iterations that were divergent
# output as dataframe/list
BMDWeights(SBMD_Q, 'quantal')
summary.BMADR(SBMD_Q, 'quantal')
# plot output
pSBMD_Q = plot.BMADRQ(SBMD_Q, weight_type = "BS", include_data = T, all = F, title = '')
pSBMD_Q$BMDs
pSBMD_Q$weights
pSBMD_Q$model_fit
pSBMD_Q$MA_fit
# plot prior vs posterior
plot_priorQ(SBMD_Q, data_Q$data, "E4_Q")
clusterdata <- data.frame(
dose = c(rep(c(0, 0.2, 0.6, 6, 60, 120), c(26, 22, 24, 26, 19, 16))),
y = c(1,1,0,0,0,0,0,2,1,3,0,0,0,0,0,0, 0, 1,0,0,0,0,
2,0,1,0,3, 0,3,0,1,0,1,1,0,4,0,0,1, 0,  0,  0,  0,  2,  0,  0,  0,
0,  0,  0,  4,  0,  4,  0,  1,  0,  0,  0,  0,1,  3, 1,  0,  0,  5,
0,  0,  1,  5,  0,  1,  0,  0,  6,  0,  1,  1,  0, 2,  0,  0,  0,  1,
11,  0,  5,  5,  0,  3,  0,  0,  3,  0,  0,  0,  2,  5,  3,  6,  1,  1, 10,  3,
4,  2,  3,  2,  2,  2,  9,  3,  2,  1,  0,  1,  3,  2, 3,  3,  7,  0,
5,  3,  2,  6,  3,  1,  2,  6,  3,  3, 2,  2),
n = c(12,12,12,13,1, 13,10,14, 12, 12, 14, 13, 12, 11, 15, 14, 11, 11, 12, 11, 14, 12, 13, 13, 14, 13,
8, 14, 10, 13, 14, 12, 10, 10, 11, 10, 12, 12, 14, 14,  9,  8, 12,  9, 13,  9, 13, 12, 12, 13, 10,
13,  9, 11,  9, 10, 12, 14,  5,  9,  9,  8,  7, 13, 14, 12, 13, 15, 11, 11,  7, 14,  8,  9, 12,
6,  9,  9, 13, 10,  4,  8, 10, 11,  7, 10, 10,  7, 12,  7, 11, 14,  4,  7,  6,  2,  5,  9,  6,  1,
1, 10,  3,  4,  3,  5,  2,  4,  2,  9,  3,  6,  1,  4,  1, 10,  2, 3,  3,  7,  1,  5,  3,  2,  6,
8,  1,  2,  6,  3,  3,  2, 2),
liter = c(1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1)
)
clusterdataQ <- PREP_DATA_QA(data = clusterdata, sumstats = TRUE,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = TRUE)
pw <- rep(1, 8)
### Laplace Approximation
testbb_laplace <- full.laplaceQ_MA(data.Q = clusterdataQ, prior.weights = pw)
# MA estimates
testbb_laplace$MA
# model weights
round(testbb_laplace$weights,4)
# model-specific fit
testbb_laplace$E4_Q
# output as dataframe/list
BMDWeights(testbb_laplace, 'quantal')
summary.BMADR(testbb_laplace, 'quantal')
# plot output
pSBMD_CQ <- plot(testbb_laplace, weight_type = 'LP', title = 'Quantal (Full Laplace)', all = F)
# plot output
pSBMD_CQ <- plot(testbb_laplace,clustered = T, weight_type = 'LP', title = 'Quantal (Full Laplace)', all = F)
# plot output
pSBMD_CQ <- plot.BMADRQ(testbb_laplace, weight_type = 'LP', title = 'Quantal (Full Laplace)', all = F)
pSBMD_CQ$BMDs
pSBMD_CQ$weights
pSBMD_CQ$model_fit
pSBMD_CQ$MA_fit
# plot prior vs posterior
plot_priorQ(testbb_laplace, data = clusterdataQ$data,
model_name = "QE4_Q")
data.test <- read.csv('~/BBMD/FINAL CODE/TESTING/test_data.csv', header = T, sep = ';')
summ.data <- data.frame(
x = data.test$Dose,
y = data.test$Mean,
s = data.test$SD,
n = data.test$N,
cov = data.test$group
)
q = 0.2
prior.weights = rep(1,16)
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T,
q = q,
prior.d = 'N11',
extended = F,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
basic.plot(FLBMD, increasing = T)
rm(list=ls())
# install package from zip file
# install.packages("~/GitHub/BMABMDR_0.0.0.9017.tar.gz", repos = NULL, type = "source")
library(BMABMDR)
library(gamlss)
# library(posterior)
# library(RColorBrewer)
# library(ggpubr)
## available models?
get_models('continuous')
get_models('quantal')
par = c(10.58,0.38,1.91,2)
doses <- c(0,6.25,12.5,25,50,100)/100
dim = 10 # number of observations per litter
ngroup = 20 # number of litters per dose
covmat = matrix(0.8, nrow = dim, ncol = dim) # correlation of 0.5
diag(covmat) = 1
library(mvtnorm)
sd = 2.28
covmat2 = covmat*sd^2
means = DRM.E4_NI(par, doses, q)
sim_data = c()
for(i in 1){
datmat = c()
cnt = 1
for(j in 1:length(doses)){
for(k in 1:ngroup){
datmat = rbind(datmat,
cbind(rep(doses[j], dim), rep(cnt, dim),
## CHANGE MEANS !!!
as.vector(rmvnorm(1, mean = rep(means[j], dim), sigma = covmat2))
)
)
cnt = cnt+1
}
}
sim_data = rbind(sim_data, as.vector(datmat[,3]))
}
# simulated data
par = c(10.58,0.38,1.91,2)
doses <- c(0,6.25,12.5,25,50,100)/100
dim = 10 # number of observations per litter
ngroup = 20 # number of litters per dose
covmat = matrix(0.8, nrow = dim, ncol = dim) # correlation of 0.5
diag(covmat) = 1
library(mvtnorm)
sd = 2.28
covmat2 = covmat*sd^2
means = DRM.E4_NI(par, doses, q)
q = 0.1
means = DRM.E4_NI(par, doses, q)
sim_data = c()
for(i in 1){
datmat = c()
cnt = 1
for(j in 1:length(doses)){
for(k in 1:ngroup){
datmat = rbind(datmat,
cbind(rep(doses[j], dim), rep(cnt, dim),
## CHANGE MEANS !!!
as.vector(rmvnorm(1, mean = rep(means[j], dim), sigma = covmat2))
)
)
cnt = cnt+1
}
}
sim_data = rbind(sim_data, as.vector(datmat[,3]))
}
simulated_data = data.frame(dose = rep(doses, each = dim*ngroup),
litter = rep(c(1:(ngroup*length(doses))), each = dim),
resp = sim_data[1,])
data.input <- data.frame(dose = simulated_data$dose,
response = simulated_data$resp,
litter = simulated_data$litter)
plot(data.input$dose, data.input$response)
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
data_LN <- PREP_DATA_LN_C(data.input, q, prior.d = 'N11')
?anydoseresponseC
