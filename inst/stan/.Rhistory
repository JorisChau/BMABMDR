Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
# devtools::reload()
devtools::build() # build source package
library("rPithon")
pithon.set.default.executable("C:/Python27/python.exe")
pithon.exec("a=1")
destdir <- getwd()
library(RSimpactCyan)
set.seed(12345)
cfg <- list()
cfg["mortality.normal.weibull.scale"]<-106 #From population pyramid for males (Belgium, 1980), http://www.btlas.com/pp/en/belgium/1980/
cfg["mortality.normal.weibull.shape"]<-5 #From population pyramid for males (Belgium, 1980), http://www.btlas.com/pp/en/belgium/1980/
cfg["mortality.normal.weibull.genderdiff"]<-0 #No females in the population
cfg["population.msm"]<-"yes"
cfg["debut.debutage"]<-45 #45 = simulation age, 15 = real age (default)
cfg["population.simtime"]<-45 #stabilization period of 10 years + 1980-2015
cfg["population.nummen"]<-10000 #wordt 10000, even op 100 gezet om te testen
cfg["population.numwomen"]<-0
cfg["population.maxevents"]<-cfg$population.simtime*cfg$population.nummen*4 #If 4 events happen per person per year, something's wrong.
cfg["population.eyecap.fraction"]<-0.2 #aangepast sinds vorige simulatie
cfg["formationmsm.hazard.agegap.baseline"]<- 2.8 #0.1 #aangepast sinds vorige simulatie
cfg["formationmsm.hazard.agegap.meanage"]<- -0.025 #toegevoegd test3
cfg["formationmsm.hazard.agegap.eagerness_sum"]<- 0.1 #toegevoegd test3
cfg["formationmsm.hazard.agegap.gap_agescale"]<-0.025 #toegevoegd test3
cfg["formationmsm.hazard.agegap.numrel_sum"]<- -0.2 # parameter SA Wim
cfg["formationmsm.hazard.agegap.numrel_diff"]<- -0.1 # parameter SA Wim
cfg["formationmsm.hazard.agegap.eagerness_diff"]<- -0.048 #parameter SA Wim
cfg["formationmsm.hazard.agegap.gap_factor"]<- 0 #parameter SA Wim
cfg["hivseed.time"]<-10 #stabilization period of 10 years
cfg["hivseed.type"]<-"amount"
cfg["hivseed.age.min"]<-45 #45 = simulation age, 15 = real age
cfg["hivseed.age.max"]<-80 #80 = simulation age, 50 = real age
cfg["hivseed.gender"]<-"male" #MSM
cfg["hivseed.amount"]<- 100 #wordt 100 #1% MSM with HIV in 1970
cfg["hsv2seed.time"]<-10 #stabilization period of 10 years
cfg["hsv2seed.type"]<-"amount"
cfg["hsv2seed.age.min"]<-45 #45 = simulation age, 15 = real age
cfg["hsv2seed.age.max"]<-80 #80 = simulation age, 50 = real age
cfg["hsv2seed.gender"]<-"male" #MSM
cfg["hsv2seed.amount"]<- 1100 #wordt 1100 #11% men with HSV2 in 1976 (Fleming et al, 1997)
cfg["hivtransmission.param.a"]<- -1.0352239 #see parameters Zambia
cfg["hivtransmission.param.b"]<- -89.339994 #see parameters Zambia
cfg["hivtransmission.param.c"]<- 0.4948478 #see parameters Zambia
cfg["hivtransmission.param.e1"]<- 0.4700036 #log(1.6) # RR=1.6 (Barnabas and Celum, 2012)
cfg["hivtransmission.param.e2"]<- 0.4700036 #log(1.6) # RR=1.6 (Barnabas and Celum, 2012)
cfg["hivtransmission.param.d1"]<- 0 #parameter SA Wim
cfg["hivtransmission.param.d2"]<- 0 #parameter SA Wim
cfg["hsv2transmission.hazard.d"]<- 0.76
cfg["person.hsv2.a.dist.type"]<-"fixed"
cfg["person.hsv2.a.dist.fixed.value"]<- -2.25 #corresponding with transmission rate 10% (Bryson et al.)
cfg["person.eagerness.man.msm.dist.type"]<-"gamma"
cfg["person.eagerness.man.msm.dist.gamma.a"]<- 0.23 #parameters SA Wim
cfg["person.eagerness.man.msm.dist.gamma.b"]<- 45 #parameters SA Wim
cfg["mortality.aids.survtime.C"]<-65 #results in survival time of 10-11 years for AIDS
cfg["mortality.aids.survtime.k"]<- -0.2 #results in survival time of 10-11 years for AIDS
cfg["person.survtime.logoffset.dist.type"]<-"normal"
cfg["person.survtime.logoffset.dist.normal.mu"]<-0
cfg["person.survtime.logoffset.dist.normal.sigma"]<-0.1
cfg["person.vsp.model.logdist2d.dist2d.binormalsymm.mean"]<- 4 #parameter SA Wim
cfg["person.vsp.model.logdist2d.dist2d.binormalsymm.rho"]<- 0.33 #parameter SA Wim
cfg["person.vsp.model.logdist2d.dist2d.binormalsymm.sigma"]<- 1 #parameter SA Wim
cfg["dissolutionmsm.alpha_4"]<- -0.05
cfg["dissolution.alpha_0"]<- -0.52 #parameter SA Wim
# no ART before 1994
cfg["diagnosis.baseline"]<- -1000000
# intervention events
# 1994
iv1<-list()
iv1["time"]=24
iv1["monitoring.cd4.threshold"]<-200
iv1["person.art.accept.threshold.dist.fixed.value"]<-0
# 1996
iv2<-list()
iv2["time"]=26
iv2["monitoring.cd4.threshold"]<-230
iv2["person.art.accept.threshold.dist.fixed.value"]<-0.1
# 1998
iv3<-list()
iv3["time"]=28
iv3["monitoring.cd4.threshold"]<-260
iv3["person.art.accept.threshold.dist.fixed.value"]<-0.2
#2000
iv4<-list()
iv4["time"]=30
iv4["monitoring.cd4.threshold"]<-290
iv4["person.art.accept.threshold.dist.fixed.value"]<-0.3
#2002
iv5<-list()
iv5["time"]=32
iv5["monitoring.cd4.threshold"]<-320
iv5["person.art.accept.threshold.dist.fixed.value"]<-0.4
#2004
iv6<-list()
iv6["time"]=34
iv6["monitoring.cd4.threshold"]<-350
iv6["person.art.accept.threshold.dist.fixed.value"]<-0.5
#2006
iv7<-list()
iv7["time"]=36
iv7["monitoring.cd4.threshold"]<-380
iv7["person.art.accept.threshold.dist.fixed.value"]<-0.6
#2008
iv8<-list()
iv8["time"]=38
iv8["monitoring.cd4.threshold"]<-410
iv8["person.art.accept.threshold.dist.fixed.value"]<-0.7
#2010
iv9<-list()
iv9["time"]=40
iv9["monitoring.cd4.threshold"]<-440
iv9["person.art.accept.threshold.dist.fixed.value"]<-0.8
#2012
iv10<-list()
iv10["time"]=42
iv10["monitoring.cd4.threshold"]<-470
iv10["person.art.accept.threshold.dist.fixed.value"]<-0.9
#2014
iv11<-list()
iv11["time"]=44
iv11["monitoring.cd4.threshold"]<-500
iv11["person.art.accept.threshold.dist.fixed.value"]<-1
iv <-list(iv1,iv2,iv3,iv4,iv5,iv6,iv7,iv8,iv9,iv10,iv11)
res <- simpact.run(cfg, file.path(destdir),intervention = iv)
?simpact.run
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
library('rstantools')
library('usethis')
library('roxygen2')
# Set working directory to the new package directory
setwd('C:\\Users\\lucp9385\\Documents\\GitHub\\BMABMDR')
list.files(all.files=T)
Sys.getenv("BINPREF") # should be "C:/rtools40/mingw64/bin/"
Sys.setenv(BINPREF = "C:/Rtools/mingw_64/bin/")
old_path <- Sys.getenv("PATH")
# new_path <- paste("C:/Rtools/usr/bin", old_path, sep=";")
new_path <- paste(old_path, "C:\\Rtools\\mingw_32\\bin", sep=";")
new_path
Sys.setenv(PATH = new_path)
## Compile package and generate the documentation
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
rstan_config() # recompile stan models
pkgbuild::compile_dll()
roxygen2::roxygenize() # generate documentation
# devtools::reload()
devtools::build() # build source package
rm(list=ls())
library(gamlss)         # needed for starting values for the log(BMD) parameter
library(mvtnorm)        # for the evaluation of the prior in the laplace approximation
library(truncnorm)
library(rstan)          # stan
rstan_options(auto_write = TRUE)
library(bbmle)          # for the mle2 function, for the ML method
library(AICcmodavg)     # for model averaging the ML estimates
library(bridgesampling) # for determining the marginal likelihoods with bridgesampling
library(numDeriv)       # for calculating the hessian
# library(truncdist)
# library(cmdstanr)
library(mc2d)           # for PERT distribution
library(bayesplot)
library(ggpubr)
library(posterior)
library(RColorBrewer)
#############
setwd("~/BBMD/FINAL CODE")
load("WS_STAN_CONT.RData")
load("WS_STAN_CONT_CLUST.RData")
load("WS_STAN_CONT_COV.RData")
load("WS_STAN_Q.RData")
load("WS_STAN_Q_COV.RData")
# Required other developed R code
source("anydoseresponse.R")
source("DRM.R")
source("fun_Data.R")
source("fun_Laplace.R") # contains function to do Full Laplace
source("fun_Sampling.R") # contains function to do MCMC methods
source("fct_mcmc.R")
source("fct_optim.R")
source("output.R")
source("classes.R")
source('fun_modelTest.R')
source('plot_prior.R')
source("FUNs.R")
source("LL.R")
source("diagnostics.R")
source("plottingfunctions.R")
source("fun_cov_selection.R")
source("getBMD.R")
source("plot_model_fit.R")
thyd <- data.frame(dose = c(0, 3, 12, 20),
x = c(6, 6, 34, 42),
n = c(50, 50, 50, 50)
)
thydQ <- PREP_DATA_QA(data = thyd, sumstats = T,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = FALSE)
# pw <- rep(1,8)
pw <- c(1,0,rep(1,6))
### Full Laplace
test_laplace <- full.laplaceQ_MA(data.Q = thydQ, prior.weights = c(rep(1,6), 1, 1))
test_laplace$MA
test_laplace$bf
test_laplace$IE4_Q
pw
### Full Laplace
test_laplace <- full.laplaceQ_MA(data.Q = thydQ, prior.weights = c(rep(1,6), 0, 1))
test_laplace$MA
test_laplace$bf
print.BMADR(test_laplace, 'quantal')
test_laplace$P4_Q
rm(list=ls())
library(gamlss)         # needed for starting values for the log(BMD) parameter
library(mvtnorm)        # for the evaluation of the prior in the laplace approximation
library(truncnorm)
library(rstan)          # stan
rstan_options(auto_write = TRUE)
library(bbmle)          # for the mle2 function, for the ML method
library(AICcmodavg)     # for model averaging the ML estimates
library(bridgesampling) # for determining the marginal likelihoods with bridgesampling
library(numDeriv)       # for calculating the hessian
# library(truncdist)
# library(cmdstanr)
library(mc2d)           # for PERT distribution
library(bayesplot)
library(ggpubr)
library(posterior)
library(RColorBrewer)
#############
setwd("~/BBMD/FINAL CODE")
load("WS_STAN_CONT.RData")
load("WS_STAN_CONT_CLUST.RData")
load("WS_STAN_CONT_COV.RData")
load("WS_STAN_Q.RData")
load("WS_STAN_Q_COV.RData")
# Required other developed R code
source("anydoseresponse.R")
source("DRM.R")
source("fun_Data.R")
source("fun_Laplace.R") # contains function to do Full Laplace
source("fun_Sampling.R") # contains function to do MCMC methods
source("fct_mcmc.R")
source("fct_optim.R")
source("output.R")
source("classes.R")
source('fun_modelTest.R')
source('plot_prior.R')
source("FUNs.R")
source("LL.R")
source("diagnostics.R")
source("plottingfunctions.R")
source("fun_cov_selection.R")
source("getBMD.R")
source("plot_model_fit.R")
dose = c(0,6.25,12.5,25,50,100)
mean = c(10.87143,10.16669,10.81050,10.41179,12.38305,18.47681)
sd = c(1.804554,1.805939,3.858265,1.626007,2.045695,2.322449)
n = rep(10,6)
summ.data = data.frame(x = dose, y = mean, s = sd, n = n)
plot(summ.data$x, summ.data$y, type = 'l')
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
prior.weights = c(rep(1,6), 1, 1, rep(1,8))
pvec = c(0.05,0.5,0.95)
q = 0.1
anydoseresponseN(summ.data$x, summ.data$y, summ.data$s, summ.data$n)
anydoseresponseLN(summ.data$x, summ.data$y, summ.data$s, summ.data$n)
data_N = PREP_DATA_N(summ.data, sumstats = T, q = q, sd = T, prior.d = 'N11', extended = T)#,
# bkg = c(5,NA,15), maxy = c(15,NA,25))
data_LN = PREP_DATA_LN(summ.data, sumstats = T, q = q, sd = T, prior.d = 'N11', extended = T)#,
### Laplace approximation
FLBMD=full.laplace_MA(data_N,data_LN,prior.weights,ndraws=ndr,seed=123,pvec=pvec,plot=F)
### Laplace approximation
FLBMD=full.laplace_MA(data_N,data_LN,prior.weights,ndraws=ndr,seed=123,pvec=pvec)
FLBMD$bf
print(FLBMD)
summary(FLBMD)
summary(FLBMD, type = 'continuous')
round(FLBMD$MA,4)
round(FLBMD$weights, 4)
plot_prior(FLBMD, data_N$data, "E4_N", parms = F)
plt <- plot.BMADR(FLBMD, type = "increasing", weight_type = "LP", include_data = T,
all = F, title="")
plt$BMDs
plt$weights
plt$model_fit
plt$model_fit_N
plt$model_fit_LN
plt$MA_fit
### Sampling
SBMD = sampling_MA(data_N,data_LN,prior.weights = c(1,1,1,1,rep(0.12)),
ndraws=ndr,nrchains=nrch,
nriterations=nriter,warmup=wu,delta=dl,
treedepth=trd,seed=sd,pvec=pvec,
plot=F)
### Sampling
SBMD = sampling_MA(data_N,data_LN,prior.weights = c(1,1,1,1,rep(0.12)),
ndraws=ndr,nrchains=nrch,
nriterations=nriter,warmup=wu,delta=dl,
treedepth=trd,seed=sd,pvec=pvec)
load("~/BBMD/TRYOUT CODE/NEW CONTINUOUS/CLUSTERED/das5.rda")
data.input <- das5$data
data.input <- data.frame(dose = data.input$dose,
response = data.input$foetalweight,
litter = data.input$number)
plot(data.input$dose, data.input$response, xlab = 'dose', ylab = 'fetal weight')
library(dplyr)
data.plot <- data.input %>%
group_by(dose, litter) %>%
summarise(mresp = mean(response))
points(data.plot$dose, data.plot$mresp, pch = 15, col = 2)
data.plot2 <- data.input %>%
group_by(dose) %>%
summarise(mresp = mean(response))
points(data.plot2$dose, data.plot2$mresp, pch = 18, cex = 2, col = 3)
# sampling specification
ndr=30000
nrch=3;nriter=3000;wu=1000;dl=0.8;trd=10;sd=123
prior.weights = c(rep(1,8), rep(0,8))
q = 0.05
pvec = c(0.05,0.5,0.95)
data_N <- PREP_DATA_N_C(data.input, q, prior.d = 'N11')
data_LN <- PREP_DATA_LN_C(data.input, q, prior.d = 'N11')
FLBMD <- full.laplace_MAc(data_N, data_LN, prior.weights)
print(FLBMD)
summary(FLBMD, clustered = T)
summary(FLBMD, clustered = T, type = 'continuous')
FLBMD$bf
FLBMD$MA
round(FLBMD$weights, 4)
plot_prior(FLBMD, data_N$data, 'E4_N', parms = T, clustered = T)
# plt <- plot.BMADR(FLBMD, type = 'decreasing', clustered = T, weight_type = 'LP', include_data = T, all = F, title = '')
plt <- plot.BMADR(FLBMD, type = 'decreasing', clustered = T, weight_type = 'LP', include_data = T, all = F, title = '')
plt$BMDs
plt$weights
plt$model_fit
plt$model_fit_N
plt$model_fit_LN
plt$MA_fit
thyd <- data.frame(dose = c(0, 3, 12, 20),
x = c(6, 6, 34, 42),
n = c(50, 50, 50, 50)
)
thydQ <- PREP_DATA_QA(data = thyd, sumstats = T,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = FALSE)
pw <- rep(1,8)
### Full Laplace
test_laplace <- full.laplaceQ_MA(data.Q = thydQ, prior.weights = c(rep(1,6), 0, 1))
test_laplace$MA
test_laplace$bf
print.BMADR(test_laplace, 'quantal')
plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE,
title = 'Thyroid Epithelial Cell Vacuolisation Data')
plot_priorQ(test_laplace, data = thydQ$data, model_name = "IE4_Q")
### Sampling
test_sampling <- samplingQ_MA(data.Q = thydQ, prior.weights = c(rep(1,6), 1, 1))
### Sampling
test_sampling <- samplingQ_MA(data.Q = thydQ, prior.weights = c(rep(0,6), 1, 1))
### Sampling
test_sampling <- samplingQ_MA(data.Q = thydQ, prior.weights = c(rep(0,6), 1, 1))
### Sampling
test_sampling <- samplingQ_MA(data.Q = thydQ, prior.weights = c(rep(1,6), 0, 0))
test_sampling$bf
print.BMADR(test_sampling, 'quantal')
plot.BMADRQ(test_sampling, weight_type = 'BS', all = FALSE,
title = 'Thyroid Epithelial Cell Vacuolisation Data')
plot_priorQ(test_sampling, data = thydQ$data, model_name = "IE4_Q")
load('~/BBMD/TRYOUT CODE/QUANTAL DR/das6.rda')
deadpups2 <- data.frame(dose = das6$data$dose,
y = das6$data$dead_pups,
n = das6$data$nr_born,
zz = das6$data$zz)
deadpupsQ <- PREP_DATA_QA(data = deadpups2, sumstats = TRUE,
q = 0.1, bkg = NULL, shape.a = 4, shape.BMD = 0.0001,
cluster = TRUE)
test_laplace <- full.laplaceQ_MA(data.Q = deadpupsQ, prior.weights = c(rep(1,4), rep(0,4)))
test_laplace$MA
test_laplace$bf
print.BMADR(test_laplace, 'quantal')
summary.BMADRQ(test_laplace)
summary.BMADR(test_laplace, type = 'quantal')
plot.BMADRQ(test_laplace, weight_type = 'LP', all = FALSE, title = 'dead pups data with clustering')
plot_priorQ(test_laplace, data = deadpupsQ$data, model_name = "E4_Q")
data.test <- read.csv('TESTING/test_data.csv', header = T, sep = ';')
summ.data <- data.frame(
x = data.test$Dose,
y = data.test$Mean,
s = data.test$SD,
n = data.test$N,
cov = data.test$group
)
q = 0.2
prior.weights = rep(1,16)
FLBMD <- full.laplace_MA_Cov(summ.data,
sumstats = T,
sd = T,
q = q,
prior.d = 'N11',
extended = F,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
basic.plot(FLBMD, increasing = T)
### simulate some data
source('TESTING/simDataQ.R')
set.seed(1989)
a1 = 0.1
a2 = 0.1
BMD1 = 0.29
BMD2 = 0.16
d1 = d2 = 1
q = 0.1
sim_data1 <- sim_DRQ_data(DRM = "Exponential", DRM_par = c(a1, BMD1, d1),
# n = c(20, 20, 20, 20, 20),
n = rep(20, 5),
dose = c(0, 5, 15, 50, 100), q = q)
sim_data1$sex = rep(1, 5)
sim_data2 <- sim_DRQ_data(DRM = "Exponential", DRM_par = c(a2, BMD2, d2),
# n = c(20, 20, 20, 20, 20),
n = rep(20, 5),
dose = c(0, 5, 15, 50, 100), q = q)
sim_data2$sex = rep(2, 5)
summ.data <- data.frame(dose = c(sim_data1$dose.a, sim_data2$dose.a),
y = c(sim_data1$y.a, sim_data2$y.a),
n = c(sim_data1$n.a, sim_data2$n.a),
sex = c(sim_data1$sex, sim_data2$sex))
par(mfrow=c(1,1))
plot(summ.data$dose[summ.data$sex==1], summ.data$y[summ.data$sex==1]/summ.data$n[summ.data$sex==1], type = 'l', ylim = c(0,1))
lines(summ.data$dose[summ.data$sex==2], summ.data$y[summ.data$sex==2]/summ.data$n[summ.data$sex==2], col = 2)
prior.weights = rep(1,8)
FLBMD <- full.laplace_MA_Q_Cov(summ.data,
sumstats = T,
q = q,
prior.d = 'N11',
extended = T,
ndraws = 30000,
seed = 123,
pvec = c(0.05, 0.5, 0.95),
prior.weights = prior.weights)
FLBMD$MA
FLBMD$summary
basic.plotQ(FLBMD)
setwd("~/GitHub/BMABMDR/inst/stan")
